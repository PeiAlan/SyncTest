mov%eax, -0x8000(%esp) ： 检查栈溢。
push%ebp ： 保存上一栈帧基址。
sub$0x18 , %esp ：给新帧分配空间。
mov 0x8 (%ecx) , %eax ： 取实例变量a，这里0x8(%ecx)就是ecx+0x8的意思，前面“[Constants]”节中提示了“this : ecx='test/Bar'”，即ecx寄存器中放的就是this对象的地址。偏移0x8是越过this对象的对象头，之后就是实例变量a的内存位置。这次是访问“Java堆”中的数据。
move$0x3d2fad8，%esi ：取test.Bar在方法区的指针。
mov 0x68 (%esi) , %esi ：取类变量b，这次是访问“方法区”中的数据。
add%esi , %eax和add%edx, %eax：做两次加法，求a+b+c的值，前面的代码把a放在eax中，把b放在esi中，而c在[Constants]中提示了，“parm() : edx=int”，说明c在edx中。
add$0x18, %esp : 撤销栈帧。
pop%edp：恢复上一栈帧。
test%eax , 0X2b0100：轮询方法返回处的SafePoint。
ret：方法返回。


java/lang/String;' in 'java/lang/System')}
  0x000000011034777b: orl    $0x100,0x1b0(%rsi)
  0x0000000110347785: jmpq   0x000000011034784a
  0x000000011034778a: movabs $0x7c00016d0,%rdi  ;   {metadata('java/lang/String')}
  0x0000000110347794: mov    0x8(%rdx),%eax
  0x0000000110347797: shl    $0x3,%rax
  0x000000011034779b: cmp    %rax,%rdi
  0x000000011034779e: jne    0x000000011034782e
  0x00000001103477a4: movabs $0x127279de0,%rsi  ;   {metadata(method data for {method} {0x0000000126f2bdb0} 'setProperty' '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;' in 'java/lang/System')}
  0x00000001103477ae: mov    0x8(%rdx),%edi
  0x00000001103477b1: shl    $0x3,%rdi
  0x00000001103477b5: cmp    0x1c0(%rsi),%rdi
  0x00000001103477bc: jne    0x00000001103477cb
  0x00000001103477be: addq   $0x1,0x1c8(%rsi)
  0x00000001103477c6: jmpq   0x000000011034784a
  0x00000001103477cb: cmp    0x1d0(%rsi),%rdi
  0x00000001103477d2: jne    0x00000001103477e1
  0x00000001103477d4: addq   $0x1,0x1d8(%rsi)
  0x00000001103477dc: jmpq   0x000000011034784a
  0x00000001103477e1: cmpq   $0x0,0x1c0(%rsi)
  0x00000001103477ec: jne    0x0000000110347805
  0x00000001103477ee: mov    %rdi,0x1c0(%rsi)
  0x00000001103477f5: movq   $0x1,0x1c8(%rsi)
  0x0000000110347800: jmpq   0x000000011034784a
  0x0000000110347805: cmpq   $0x0,0x1d0(%rsi)
  0x0000000110347810: jne    0x0000000110347829
  0x0000000110347812: mov    %rdi,0x1d0(%rsi)
  0x0000000110347819: movq   $0x1,0x1d8(%rsi)
  0x0000000110347824: jmpq   0x000000011034784a
  0x0000000110347829: jmpq   0x000000011034784a
  0x000000011034782e: movabs $0x127279de0,%rsi  ;   {metadata(method data for {method} {0x0000000126f2bdb0} 'setProperty' '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;' in 'java/lang/System')}
  0x0000000110347838: subq   $0x1,0x1b8(%rsi)
  0x0000000110347840: jmpq   0x0000000110347a72
  0x0000000110347845: jmpq   0x000000011034784a
  0x000000011034784a: mov    %rdx,%rax          ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)

  0x000000011034784d: add    $0xa0,%rsp
  0x0000000110347854: pop    %rbp
  0x0000000110347855: test   %eax,-0x372e75b(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011034785b: retq                      ;*areturn
                                                ; - java.lang.System::setProperty@37 (line 796)

  0x000000011034785c: nopl   0x0(%rax)
  0x0000000110347860: jmpq   0x0000000110347a8a  ;   {no_reloc}
  0x0000000110347865: add    %al,(%rax)
  0x0000000110347867: add    %al,(%rax)
  0x0000000110347869: add    %cl,-0x75(%rcx)
  0x000000011034786c: rex.RXB (bad)
  0x000000011034786e: lea    0x20(%rax),%rdi
  0x0000000110347872: cmp    0x70(%r15),%rdi
  0x0000000110347876: ja     0x0000000110347a94
  0x000000011034787c: mov    %rdi,0x60(%r15)
  0x0000000110347880: mov    0xa8(%rdx),%rcx
  0x0000000110347887: mov    %rcx,(%rax)
  0x000000011034788a: mov    %rdx,%rcx
  0x000000011034788d: shr    $0x3,%rcx
  0x0000000110347891: mov    %ecx,0x8(%rax)
  0x0000000110347894: xor    %rcx,%rcx
  0x0000000110347897: mov    %ecx,0xc(%rax)
  0x000000011034789a: xor    %rcx,%rcx
  0x000000011034789d: mov    %rcx,0x10(%rax)
  0x00000001103478a1: mov    %rcx,0x18(%rax)    ;*new  ; - java.lang.System::checkKey@23 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x00000001103478a5: mov    %rax,%rdx
  0x00000001103478a8: movabs $0x127173ca8,%rsi  ;   {metadata(method data for {method} {0x0000000126f2bf20} 'checkKey' '(Ljava/lang/String;)V' in 'java/lang/System')}
  0x00000001103478b2: addq   $0x1,0x188(%rsi)
  0x00000001103478ba: movabs $0x76aed7498,%rdx  ;   {oop("key can't be empty")}
  0x00000001103478c4: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.System::checkKey@29 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x00000001103478c7: mov    %rax,0x70(%rsp)
  0x00000001103478cc: nop
  0x00000001103478cd: nop
  0x00000001103478ce: nop
  0x00000001103478cf: callq  0x000000010ff580a0  ; OopMap{[80]=Oop [88]=Oop [112]=Oop off=1716}
                                                ;*invokespecial <init>
                                                ; - java.lang.System::checkKey@29 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {optimized virtual_call}
  0x00000001103478d4: mov    0x70(%rsp),%rax
  0x00000001103478d9: jmpq   0x0000000110347b08  ;*athrow
                                                ; - java.lang.System::checkKey@32 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x00000001103478de: xchg   %ax,%ax
  0x00000001103478e0: jmpq   0x0000000110347ab0  ;   {no_reloc}
  0x00000001103478e5: add    %al,(%rax)
  0x00000001103478e7: add    %al,(%rax)
  0x00000001103478e9: add    %cl,-0x75(%rcx)
  0x00000001103478ec: rex.RXB (bad)
  0x00000001103478ee: lea    0x20(%rax),%rdi
  0x00000001103478f2: cmp    0x70(%r15),%rdi
  0x00000001103478f6: ja     0x0000000110347aba
  0x00000001103478fc: mov    %rdi,0x60(%r15)
  0x0000000110347900: mov    0xa8(%rdx),%rcx
  0x0000000110347907: mov    %rcx,(%rax)
  0x000000011034790a: mov    %rdx,%rcx
  0x000000011034790d: shr    $0x3,%rcx
  0x0000000110347911: mov    %ecx,0x8(%rax)
  0x0000000110347914: xor    %rcx,%rcx
  0x0000000110347917: mov    %ecx,0xc(%rax)
  0x000000011034791a: xor    %rcx,%rcx
  0x000000011034791d: mov    %rcx,0x10(%rax)
  0x0000000110347921: mov    %rcx,0x18(%rax)    ;*new  ; - java.lang.System::checkKey@4 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x0000000110347925: mov    %rax,%rdx
  0x0000000110347928: movabs $0x127173ca8,%rsi  ;   {metadata(method data for {method} {0x0000000126f2bf20} 'checkKey' '(Ljava/lang/String;)V' in 'java/lang/System')}
  0x0000000110347932: addq   $0x1,0x128(%rsi)
  0x000000011034793a: movabs $0x76aed7448,%rdx  ;   {oop("key can't be null")}
  0x0000000110347944: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.System::checkKey@10 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x0000000110347947: mov    %rax,0x78(%rsp)
  0x000000011034794c: nop
  0x000000011034794d: nop
  0x000000011034794e: nop
  0x000000011034794f: callq  0x000000010ff580a0  ; OopMap{[120]=Oop [80]=Oop [88]=Oop off=1844}
                                                ;*invokespecial <init>
                                                ; - java.lang.System::checkKey@10 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {optimized virtual_call}
  0x0000000110347954: mov    0x78(%rsp),%rax
  0x0000000110347959: jmpq   0x0000000110347b08  ;*athrow
                                                ; - java.lang.System::checkKey@13 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)

  0x000000011034795e: mov    0x2a8(%r15),%rax
  0x0000000110347965: xor    %r10,%r10
  0x0000000110347968: mov    %r10,0x2a8(%r15)
  0x000000011034796f: xor    %r10,%r10
  0x0000000110347972: mov    %r10,0x2b0(%r15)
  0x0000000110347979: mov    %rax,%rsi
  0x000000011034797c: lea    0x80(%rsp),%rax
  0x0000000110347984: mov    0x8(%rax),%rbx
  0x0000000110347988: mov    (%rbx),%rdi
  0x000000011034798b: and    $0x7,%rdi
  0x000000011034798f: cmp    $0x5,%rdi
  0x0000000110347993: je     0x00000001103479b0
  0x0000000110347999: mov    (%rax),%rdi
  0x000000011034799c: test   %rdi,%rdi
  0x000000011034799f: je     0x00000001103479b0
  0x00000001103479a5: lock cmpxchg %rdi,(%rbx)
  0x00000001103479aa: jne    0x0000000110347ac7  ;*synchronization entry
                                                ; - java.util.Properties::setProperty@-1 (line 166)
                                                ; - java.lang.System::setProperty@31 (line 796)

  0x00000001103479b0: mov    %rsi,%rax
  0x00000001103479b3: jmpq   0x0000000110347b08
  0x00000001103479b8: mov    %rdi,0x8(%rsp)
  0x00000001103479bd: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103479c5: callq  0x00000001100129e0  ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop off=1962}
                                                ;*synchronization entry
                                                ; - java.lang.System::setProperty@-1 (line 789)
                                                ;   {runtime_call}
  0x00000001103479ca: jmpq   0x0000000110347268
  0x00000001103479cf: mov    %rdi,0x8(%rsp)
  0x00000001103479d4: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103479dc: callq  0x00000001100129e0  ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop off=1985}
                                                ;*synchronization entry
                                                ; - java.lang.System::checkKey@-1 (line 837)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x00000001103479e1: jmpq   0x00000001103472ac
  0x00000001103479e6: callq  0x000000011000e080  ; OopMap{rsi=Oop [80]=Oop [88]=Oop off=1995}
                                                ;*invokevirtual equals
                                                ; - java.lang.System::checkKey@17 (line 840)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x00000001103479eb: mov    %rdx,0x8(%rsp)
  0x00000001103479f0: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103479f8: callq  0x00000001100129e0  ; OopMap{[80]=Oop [88]=Oop off=2013}
                                                ;*synchronization entry
                                                ; - java.lang.System::getSecurityManager@-1 (line 334)
                                                ; - java.lang.System::setProperty@4 (line 790)
                                                ;   {runtime_call}
  0x00000001103479fd: jmpq   0x0000000110347411
  0x0000000110347a02: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110347a0c: mov    $0xa050f00,%eax
  0x0000000110347a11: callq  0x00000001100118a0  ; OopMap{[80]=Oop [88]=Oop [96]=Oop off=2038}
                                                ;*new  ; - java.lang.System::setProperty@13 (line 792)
                                                ;   {runtime_call}
  0x0000000110347a16: jmpq   0x0000000110347468
  0x0000000110347a1b: mov    %rdx,%rdx
  0x0000000110347a1e: callq  0x000000011000e520  ; OopMap{[80]=Oop [88]=Oop [96]=Oop off=2051}
                                                ;*new  ; - java.lang.System::setProperty@13 (line 792)
                                                ;   {runtime_call}
  0x0000000110347a23: jmpq   0x0000000110347477
  0x0000000110347a28: callq  0x000000011000e080  ; OopMap{[80]=Oop [88]=Oop [104]=Oop rdi=Oop off=2061}
                                                ;*invokevirtual checkPermission
                                                ; - java.lang.System::setProperty@23 (line 792)
                                                ;   {runtime_call}
  0x0000000110347a2d: callq  0x000000011000e080  ; OopMap{[80]=Oop [88]=Oop rsi=Oop off=2066}
                                                ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {runtime_call}
  0x0000000110347a32: mov    %rsi,0x8(%rsp)
  0x0000000110347a37: mov    %rdx,(%rsp)
  0x0000000110347a3b: callq  0x0000000110010c20  ; OopMap{[80]=Oop [88]=Oop rsi=Oop [136]=Oop off=2080}
                                                ;*synchronization entry
                                                ; - java.util.Properties::setProperty@-1 (line 166)
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {runtime_call}
  0x0000000110347a40: jmpq   0x000000011034765f
  0x0000000110347a45: mov    %rdx,0x8(%rsp)
  0x0000000110347a4a: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110347a52: callq  0x00000001100129e0  ; OopMap{[80]=Oop [88]=Oop rsi=Oop [136]=Oop off=2103}
                                                ;*synchronization entry
                                                ; - java.util.Properties::setProperty@-1 (line 166)
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {runtime_call}
  0x0000000110347a57: jmpq   0x0000000110347691
  0x0000000110347a5c: lea    0x80(%rsp),%rax
  0x0000000110347a64: mov    %rax,(%rsp)
  0x0000000110347a68: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110347a6d: jmpq   0x000000011034776b
  0x0000000110347a72: mov    %rdx,(%rsp)
  0x0000000110347a76: callq  0x0000000110010440  ; OopMap{off=2139}
                                                ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)
                                                ;   {runtime_call}
  0x0000000110347a7b: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110347a85: mov    $0xa050f00,%eax
  0x0000000110347a8a: callq  0x00000001100118a0  ; OopMap{[80]=Oop [88]=Oop off=2159}
                                                ;*new  ; - java.lang.System::checkKey@23 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x0000000110347a8f: jmpq   0x0000000110347860
  0x0000000110347a94: mov    %rdx,%rdx
  0x0000000110347a97: callq  0x000000011000e7e0  ; OopMap{[80]=Oop [88]=Oop off=2172}
                                                ;*new  ; - java.lang.System::checkKey@23 (line 841)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x0000000110347a9c: jmpq   0x00000001103478a5
  0x0000000110347aa1: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110347aab: mov    $0xa050f00,%eax
  0x0000000110347ab0: callq  0x00000001100118a0  ; OopMap{[80]=Oop [88]=Oop off=2197}
                                                ;*new  ; - java.lang.System::checkKey@4 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x0000000110347ab5: jmpq   0x00000001103478e0
  0x0000000110347aba: mov    %rdx,%rdx
  0x0000000110347abd: callq  0x000000011000e7e0  ; OopMap{[88]=Oop [80]=Oop off=2210}
                                                ;*new  ; - java.lang.System::checkKey@4 (line 838)
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x0000000110347ac2: jmpq   0x0000000110347925
  0x0000000110347ac7: lea    0x80(%rsp),%rax
  0x0000000110347acf: mov    %rax,(%rsp)
  0x0000000110347ad3: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110347ad8: jmpq   0x00000001103479b0
  0x0000000110347add: nop
  0x0000000110347ade: nop
  0x0000000110347adf: mov    0x2a8(%r15),%rax
  0x0000000110347ae6: movabs $0x0,%r10
  0x0000000110347af0: mov    %r10,0x2a8(%r15)
  0x0000000110347af7: movabs $0x0,%r10
  0x0000000110347b01: mov    %r10,0x2b0(%r15)
  0x0000000110347b08: add    $0xa0,%rsp
  0x0000000110347b0f: pop    %rbp
  0x0000000110347b10: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110347b15: hlt
  0x0000000110347b16: hlt
  0x0000000110347b17: hlt
  0x0000000110347b18: hlt
  0x0000000110347b19: hlt
  0x0000000110347b1a: hlt
  0x0000000110347b1b: hlt
  0x0000000110347b1c: hlt
  0x0000000110347b1d: hlt
  0x0000000110347b1e: hlt
  0x0000000110347b1f: hlt
[Stub Code]
  0x0000000110347b20: nop                       ;   {no_reloc}
  0x0000000110347b21: nop
  0x0000000110347b22: nop
  0x0000000110347b23: nop
  0x0000000110347b24: nop
  0x0000000110347b25: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b2f: jmpq   0x0000000110347b2f  ;   {runtime_call}
  0x0000000110347b34: nop
  0x0000000110347b35: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b3f: jmpq   0x0000000110347b3f  ;   {runtime_call}
  0x0000000110347b44: nop
  0x0000000110347b45: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b4f: jmpq   0x0000000110347b4f  ;   {runtime_call}
  0x0000000110347b54: nop
  0x0000000110347b55: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b5f: jmpq   0x0000000110347b5f  ;   {runtime_call}
  0x0000000110347b64: nop
  0x0000000110347b65: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b6f: jmpq   0x0000000110347b6f  ;   {runtime_call}
  0x0000000110347b74: nop
  0x0000000110347b75: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110347b7f: jmpq   0x0000000110347b7f  ;   {runtime_call}
[Exception Handler]
  0x0000000110347b84: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110347b89: mov    %rsp,-0x28(%rsp)
  0x0000000110347b8e: sub    $0x80,%rsp
  0x0000000110347b95: mov    %rax,0x78(%rsp)
  0x0000000110347b9a: mov    %rcx,0x70(%rsp)
  0x0000000110347b9f: mov    %rdx,0x68(%rsp)
  0x0000000110347ba4: mov    %rbx,0x60(%rsp)
  0x0000000110347ba9: mov    %rbp,0x50(%rsp)
  0x0000000110347bae: mov    %rsi,0x48(%rsp)
  0x0000000110347bb3: mov    %rdi,0x40(%rsp)
  0x0000000110347bb8: mov    %r8,0x38(%rsp)
  0x0000000110347bbd: mov    %r9,0x30(%rsp)
  0x0000000110347bc2: mov    %r10,0x28(%rsp)
  0x0000000110347bc7: mov    %r11,0x20(%rsp)
  0x0000000110347bcc: mov    %r12,0x18(%rsp)
  0x0000000110347bd1: mov    %r13,0x10(%rsp)
  0x0000000110347bd6: mov    %r14,0x8(%rsp)
  0x0000000110347bdb: mov    %r15,(%rsp)
  0x0000000110347bdf: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110347be9: movabs $0x110347b89,%rsi  ;   {internal_word}
  0x0000000110347bf3: mov    %rsp,%rdx
  0x0000000110347bf6: and    $0xfffffffffffffff0,%rsp
  0x0000000110347bfa: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110347bff: hlt
[Deopt Handler Code]
  0x0000000110347c00: movabs $0x110347c00,%r10  ;   {section_word}
  0x0000000110347c0a: push   %r10
  0x0000000110347c0c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110347c11: hlt
  0x0000000110347c12: hlt
  0x0000000110347c13: hlt
  0x0000000110347c14: hlt
  0x0000000110347c15: hlt
  0x0000000110347c16: hlt
  0x0000000110347c17: hlt
Decoding compiled method 0x0000000110341c50:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127314af8} 'readAndWrite' '()V' in 'com/example/jmm/VolatileTest3'
  #           [sp+0x40]  (sp of caller)
  0x0000000110341da0: mov    0x8(%rsi),%r10d
  0x0000000110341da4: shl    $0x3,%r10
  0x0000000110341da8: cmp    %rax,%r10
  0x0000000110341dab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110341db1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110341dbc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110341dc0: mov    %eax,-0x14000(%rsp)
  0x0000000110341dc7: push   %rbp
  0x0000000110341dc8: sub    $0x30,%rsp
  0x0000000110341dcc: movabs $0x127315028,%rdi  ;   {metadata(method data for {method} {0x0000000127314af8} 'readAndWrite' '()V' in 'com/example/jmm/VolatileTest3')}
  0x0000000110341dd6: mov    0xdc(%rdi),%ebx
  0x0000000110341ddc: add    $0x8,%ebx
  0x0000000110341ddf: mov    %ebx,0xdc(%rdi)
  0x0000000110341de5: movabs $0x127314af8,%rdi  ;   {metadata({method} {0x0000000127314af8} 'readAndWrite' '()V' in 'com/example/jmm/VolatileTest3')}
  0x0000000110341def: and    $0x0,%ebx
  0x0000000110341df2: cmp    $0x0,%ebx
  0x0000000110341df5: je     0x0000000110341e29  ;*aload_0
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@0 (line 18)

  0x0000000110341dfb: mov    0x10(%rsi),%edi    ;*getfield v1
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@1 (line 18)

  0x0000000110341dfe: mov    0x14(%rsi),%ebx    ;*getfield v2
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@6 (line 20)

  0x0000000110341e01: mov    %rdi,%rax
  0x0000000110341e04: add    %ebx,%eax
  0x0000000110341e06: mov    %eax,0xc(%rsi)     ;*putfield a
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@14 (line 22)

  0x0000000110341e09: inc    %edi
  0x0000000110341e0b: mov    %edi,0x10(%rsi)
  0x0000000110341e0e: lock addl $0x0,(%rsp)     ;*putfield v1
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@21 (line 24)

  0x0000000110341e13: shl    %ebx
  0x0000000110341e15: mov    %ebx,0x14(%rsi)
  0x0000000110341e18: lock addl $0x0,(%rsp)     ;*putfield v2
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@28 (line 26)

  0x0000000110341e1d: add    $0x30,%rsp
  0x0000000110341e21: pop    %rbp
  0x0000000110341e22: test   %eax,-0x3728d28(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110341e28: retq
  0x0000000110341e29: mov    %rdi,0x8(%rsp)
  0x0000000110341e2e: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110341e36: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=155}
                                                ;*synchronization entry
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@-1 (line 18)
                                                ;   {runtime_call}
  0x0000000110341e3b: jmp    0x0000000110341dfb
  0x0000000110341e3d: nop
  0x0000000110341e3e: nop
  0x0000000110341e3f: mov    0x2a8(%r15),%rax
  0x0000000110341e46: movabs $0x0,%r10
  0x0000000110341e50: mov    %r10,0x2a8(%r15)
  0x0000000110341e57: movabs $0x0,%r10
  0x0000000110341e61: mov    %r10,0x2b0(%r15)
  0x0000000110341e68: add    $0x30,%rsp
  0x0000000110341e6c: pop    %rbp
  0x0000000110341e6d: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110341e72: hlt
  0x0000000110341e73: hlt
  0x0000000110341e74: hlt
  0x0000000110341e75: hlt
  0x0000000110341e76: hlt
  0x0000000110341e77: hlt
  0x0000000110341e78: hlt
  0x0000000110341e79: hlt
  0x0000000110341e7a: hlt
  0x0000000110341e7b: hlt
  0x0000000110341e7c: hlt
  0x0000000110341e7d: hlt
  0x0000000110341e7e: hlt
  0x0000000110341e7f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110341e80: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110341e85: mov    %rsp,-0x28(%rsp)
  0x0000000110341e8a: sub    $0x80,%rsp
  0x0000000110341e91: mov    %rax,0x78(%rsp)
  0x0000000110341e96: mov    %rcx,0x70(%rsp)
  0x0000000110341e9b: mov    %rdx,0x68(%rsp)
  0x0000000110341ea0: mov    %rbx,0x60(%rsp)
  0x0000000110341ea5: mov    %rbp,0x50(%rsp)
  0x0000000110341eaa: mov    %rsi,0x48(%rsp)
  0x0000000110341eaf: mov    %rdi,0x40(%rsp)
  0x0000000110341eb4: mov    %r8,0x38(%rsp)
  0x0000000110341eb9: mov    %r9,0x30(%rsp)
  0x0000000110341ebe: mov    %r10,0x28(%rsp)
  0x0000000110341ec3: mov    %r11,0x20(%rsp)
  0x0000000110341ec8: mov    %r12,0x18(%rsp)
  0x0000000110341ecd: mov    %r13,0x10(%rsp)
  0x0000000110341ed2: mov    %r14,0x8(%rsp)
  0x0000000110341ed7: mov    %r15,(%rsp)
  0x0000000110341edb: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110341ee5: movabs $0x110341e85,%rsi  ;   {internal_word}
  0x0000000110341eef: mov    %rsp,%rdx
  0x0000000110341ef2: and    $0xfffffffffffffff0,%rsp
  0x0000000110341ef6: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110341efb: hlt
[Deopt Handler Code]
  0x0000000110341efc: movabs $0x110341efc,%r10  ;   {section_word}
  0x0000000110341f06: push   %r10
  0x0000000110341f08: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110341f0d: hlt
  0x0000000110341f0e: hlt
  0x0000000110341f0f: hlt
Decoding compiled method 0x0000000110346b50:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  # parm1:    rdx:rdx   = 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x0000000110346cc0: mov    %eax,-0x14000(%rsp)
  0x0000000110346cc7: push   %rbp
  0x0000000110346cc8: sub    $0x30,%rsp
  0x0000000110346ccc: mov    %rdx,%rbx
  0x0000000110346ccf: movabs $0x12727b2c8,%rax  ;   {metadata(method data for {method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects')}
  0x0000000110346cd9: mov    0xdc(%rax),%edx
  0x0000000110346cdf: add    $0x8,%edx
  0x0000000110346ce2: mov    %edx,0xdc(%rax)
  0x0000000110346ce8: movabs $0x127045a18,%rax  ;   {metadata({method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects')}
  0x0000000110346cf2: and    $0x0,%edx
  0x0000000110346cf5: cmp    $0x0,%edx
  0x0000000110346cf8: je     0x0000000110346dbe  ;*aload_0
                                                ; - java.util.Objects::requireNonNull@0 (line 227)

  0x0000000110346cfe: cmp    $0x0,%rsi
  0x0000000110346d02: movabs $0x12727b2c8,%rax  ;   {metadata(method data for {method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects')}
  0x0000000110346d0c: movabs $0x108,%rdx
  0x0000000110346d16: jne    0x0000000110346d26
  0x0000000110346d1c: movabs $0x118,%rdx
  0x0000000110346d26: mov    (%rax,%rdx,1),%rdi
  0x0000000110346d2a: lea    0x1(%rdi),%rdi
  0x0000000110346d2e: mov    %rdi,(%rax,%rdx,1)
  0x0000000110346d32: je     0x0000000110346d47  ;*ifnonnull
                                                ; - java.util.Objects::requireNonNull@1 (line 227)

  0x0000000110346d38: mov    %rsi,%rax
  0x0000000110346d3b: add    $0x30,%rsp
  0x0000000110346d3f: pop    %rbp
  0x0000000110346d40: test   %eax,-0x372dc46(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110346d46: retq                      ;*areturn
                                                ; - java.util.Objects::requireNonNull@14 (line 229)

  0x0000000110346d47: nop
  0x0000000110346d48: jmpq   0x0000000110346de4  ;   {no_reloc}
  0x0000000110346d4d: add    %al,(%rax)
  0x0000000110346d4f: add    %al,(%rax)
  0x0000000110346d51: add    %cl,-0x75(%rcx)
  0x0000000110346d54: rex.RXB (bad)
  0x0000000110346d56: lea    0x20(%rax),%rdi
  0x0000000110346d5a: cmp    0x70(%r15),%rdi
  0x0000000110346d5e: ja     0x0000000110346dee
  0x0000000110346d64: mov    %rdi,0x60(%r15)
  0x0000000110346d68: mov    0xa8(%rdx),%rcx
  0x0000000110346d6f: mov    %rcx,(%rax)
  0x0000000110346d72: mov    %rdx,%rcx
  0x0000000110346d75: shr    $0x3,%rcx
  0x0000000110346d79: mov    %ecx,0x8(%rax)
  0x0000000110346d7c: xor    %rcx,%rcx
  0x0000000110346d7f: mov    %ecx,0xc(%rax)
  0x0000000110346d82: xor    %rcx,%rcx
  0x0000000110346d85: mov    %rcx,0x10(%rax)
  0x0000000110346d89: mov    %rcx,0x18(%rax)    ;*new  ; - java.util.Objects::requireNonNull@4 (line 228)

  0x0000000110346d8d: mov    %rax,%rdx
  0x0000000110346d90: movabs $0x12727b2c8,%rsi  ;   {metadata(method data for {method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects')}
  0x0000000110346d9a: addq   $0x1,0x128(%rsi)
  0x0000000110346da2: mov    %rbx,%rdx
  0x0000000110346da5: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.Objects::requireNonNull@9 (line 228)

  0x0000000110346da8: mov    %rax,0x20(%rsp)
  0x0000000110346dad: nop
  0x0000000110346dae: nop
  0x0000000110346daf: callq  0x000000010ff580a0  ; OopMap{[32]=Oop off=244}
                                                ;*invokespecial <init>
                                                ; - java.util.Objects::requireNonNull@9 (line 228)
                                                ;   {optimized virtual_call}
  0x0000000110346db4: mov    0x20(%rsp),%rax
  0x0000000110346db9: jmpq   0x0000000110346e23
  0x0000000110346dbe: mov    %rax,0x8(%rsp)
  0x0000000110346dc3: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110346dcb: callq  0x00000001100129e0  ; OopMap{rsi=Oop rbx=Oop off=272}
                                                ;*synchronization entry
                                                ; - java.util.Objects::requireNonNull@-1 (line 227)
                                                ;   {runtime_call}
  0x0000000110346dd0: jmpq   0x0000000110346cfe
  0x0000000110346dd5: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110346ddf: mov    $0xa050f00,%eax
  0x0000000110346de4: callq  0x00000001100118a0  ; OopMap{rbx=Oop off=297}
                                                ;*new  ; - java.util.Objects::requireNonNull@4 (line 228)
                                                ;   {runtime_call}
  0x0000000110346de9: jmpq   0x0000000110346d48
  0x0000000110346dee: mov    %rdx,%rdx
  0x0000000110346df1: callq  0x000000011000e7e0  ; OopMap{rbx=Oop off=310}
                                                ;*new  ; - java.util.Objects::requireNonNull@4 (line 228)
                                                ;   {runtime_call}
  0x0000000110346df6: jmp    0x0000000110346d8d
  0x0000000110346df8: nop
  0x0000000110346df9: nop
  0x0000000110346dfa: mov    0x2a8(%r15),%rax
  0x0000000110346e01: movabs $0x0,%r10
  0x0000000110346e0b: mov    %r10,0x2a8(%r15)
  0x0000000110346e12: movabs $0x0,%r10
  0x0000000110346e1c: mov    %r10,0x2b0(%r15)
  0x0000000110346e23: add    $0x30,%rsp
  0x0000000110346e27: pop    %rbp
  0x0000000110346e28: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110346e2d: hlt
  0x0000000110346e2e: hlt
  0x0000000110346e2f: hlt
  0x0000000110346e30: hlt
  0x0000000110346e31: hlt
  0x0000000110346e32: hlt
  0x0000000110346e33: hlt
  0x0000000110346e34: hlt
  0x0000000110346e35: hlt
  0x0000000110346e36: hlt
  0x0000000110346e37: hlt
  0x0000000110346e38: hlt
  0x0000000110346e39: hlt
  0x0000000110346e3a: hlt
  0x0000000110346e3b: hlt
  0x0000000110346e3c: hlt
  0x0000000110346e3d: hlt
  0x0000000110346e3e: hlt
  0x0000000110346e3f: hlt
[Stub Code]
  0x0000000110346e40: nop                       ;   {no_reloc}
  0x0000000110346e41: nop
  0x0000000110346e42: nop
  0x0000000110346e43: nop
  0x0000000110346e44: nop
  0x0000000110346e45: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110346e4f: jmpq   0x0000000110346e4f  ;   {runtime_call}
[Exception Handler]
  0x0000000110346e54: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110346e59: mov    %rsp,-0x28(%rsp)
  0x0000000110346e5e: sub    $0x80,%rsp
  0x0000000110346e65: mov    %rax,0x78(%rsp)
  0x0000000110346e6a: mov    %rcx,0x70(%rsp)
  0x0000000110346e6f: mov    %rdx,0x68(%rsp)
  0x0000000110346e74: mov    %rbx,0x60(%rsp)
  0x0000000110346e79: mov    %rbp,0x50(%rsp)
  0x0000000110346e7e: mov    %rsi,0x48(%rsp)
  0x0000000110346e83: mov    %rdi,0x40(%rsp)
  0x0000000110346e88: mov    %r8,0x38(%rsp)
  0x0000000110346e8d: mov    %r9,0x30(%rsp)
  0x0000000110346e92: mov    %r10,0x28(%rsp)
  0x0000000110346e97: mov    %r11,0x20(%rsp)
  0x0000000110346e9c: mov    %r12,0x18(%rsp)
  0x0000000110346ea1: mov    %r13,0x10(%rsp)
  0x0000000110346ea6: mov    %r14,0x8(%rsp)
  0x0000000110346eab: mov    %r15,(%rsp)
  0x0000000110346eaf: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110346eb9: movabs $0x110346e59,%rsi  ;   {internal_word}
  0x0000000110346ec3: mov    %rsp,%rdx
  0x0000000110346ec6: and    $0xfffffffffffffff0,%rsp
  0x0000000110346eca: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110346ecf: hlt
[Deopt Handler Code]
  0x0000000110346ed0: movabs $0x110346ed0,%r10  ;   {section_word}
  0x0000000110346eda: push   %r10
  0x0000000110346edc: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110346ee1: hlt
  0x0000000110346ee2: hlt
  0x0000000110346ee3: hlt
  0x0000000110346ee4: hlt
  0x0000000110346ee5: hlt
  0x0000000110346ee6: hlt
  0x0000000110346ee7: hlt
Decoding compiled method 0x0000000110343ed0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127314af8} 'readAndWrite' '()V' in 'com/example/jmm/VolatileTest3'
  #           [sp+0x20]  (sp of caller)
  0x0000000110344020: mov    0x8(%rsi),%r10d
  0x0000000110344024: shl    $0x3,%r10
  0x0000000110344028: cmp    %r10,%rax
  0x000000011034402b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110344031: data32 xchg %ax,%ax
  0x0000000110344034: nopl   0x0(%rax,%rax,1)
  0x000000011034403c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110344040: sub    $0x18,%rsp
  0x0000000110344047: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@-1 (line 18)

  0x000000011034404c: mov    0x10(%rsi),%r11d   ;*getfield v1
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@1 (line 18)

  0x0000000110344050: mov    0x14(%rsi),%r10d   ;*getfield v2
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@6 (line 20)

  0x0000000110344054: mov    %r11d,%r9d
  0x0000000110344057: add    %r10d,%r9d
  0x000000011034405a: mov    %r9d,0xc(%rsi)
  0x000000011034405e: inc    %r11d
  0x0000000110344061: mov    %r11d,0x10(%rsi)
  0x0000000110344065: shl    %r10d
  0x0000000110344068: mov    %r10d,0x14(%rsi)
  0x000000011034406c: lock addl $0x0,(%rsp)     ;*putfield v2
                                                ; - com.example.jmm.VolatileTest3::readAndWrite@28 (line 26)

  0x0000000110344071: add    $0x10,%rsp
  0x0000000110344075: pop    %rbp
  0x0000000110344076: test   %eax,-0x372b07c(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011034407c: retq
  0x000000011034407d: hlt
  0x000000011034407e: hlt
  0x000000011034407f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110344080: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110344085: callq  0x000000011034408a
  0x000000011034408a: subq   $0x5,(%rsp)
  0x000000011034408f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110344094: hlt
  0x0000000110344095: hlt
  0x0000000110344096: hlt
  0x0000000110344097: hlt
Decoding compiled method 0x000000011034b090:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000126f2bdb0} 'setProperty' '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;' in 'java/lang/System'
  # parm0:    rsi:rsi   = 'java/lang/String'
  # parm1:    rdx:rdx   = 'java/lang/String'
  #           [sp+0x30]  (sp of caller)
  0x000000011034b200: mov    %eax,-0x14000(%rsp)
  0x000000011034b207: push   %rbp
  0x000000011034b208: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.System::setProperty@-1 (line 789)

  0x000000011034b20c: mov    %rdx,0x8(%rsp)
  0x000000011034b211: mov    %rsi,(%rsp)
  0x000000011034b215: xchg   %ax,%ax
  0x000000011034b217: callq  0x000000010ff58520  ; OopMap{[0]=Oop [8]=Oop off=28}
                                                ;*invokestatic checkKey
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {static_call}
  0x000000011034b21c: movabs $0x76ab00c78,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/System')}
  0x000000011034b226: mov    0x74(%r10),%ebp    ;*getstatic security
                                                ; - java.lang.System::getSecurityManager@0 (line 334)
                                                ; - java.lang.System::setProperty@4 (line 790)

  0x000000011034b22a: test   %ebp,%ebp
  0x000000011034b22c: jne    0x000000011034b279  ;*ifnull
                                                ; - java.lang.System::setProperty@9 (line 791)

  0x000000011034b22e: mov    0x7c(%r10),%r11d   ;*getstatic props
                                                ; - java.lang.System::setProperty@26 (line 796)

  0x000000011034b232: test   %r11d,%r11d
  0x000000011034b235: je     0x000000011034b265  ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)

  0x000000011034b237: lea    (%r12,%r11,8),%rsi  ;*getstatic props
                                                ; - java.lang.System::setProperty@26 (line 796)

  0x000000011034b23b: mov    (%rsp),%rdx
  0x000000011034b23f: mov    0x8(%rsp),%rcx
  0x000000011034b244: data32 xchg %ax,%ax
  0x000000011034b247: callq  0x000000010ff580a0  ; OopMap{off=76}
                                                ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {optimized virtual_call}
  0x000000011034b24c: mov    0x8(%rax),%r10d    ; implicit exception: dispatches to 0x000000011034b2af
  0x000000011034b250: cmp    $0xf80002da,%r10d  ;   {metadata('java/lang/String')}
  0x000000011034b257: jne    0x000000011034b289  ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)

  0x000000011034b259: add    $0x20,%rsp
  0x000000011034b25d: pop    %rbp
  0x000000011034b25e: test   %eax,-0x3732264(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011034b264: retq
  0x000000011034b265: mov    $0xfffffff6,%esi
  0x000000011034b26a: mov    (%rsp),%rbp
  0x000000011034b26e: nop
  0x000000011034b26f: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [8]=Oop off=116}
                                                ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {runtime_call}
  0x000000011034b274: callq  0x000000010e0276f4  ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)
                                                ;   {runtime_call}
  0x000000011034b279: mov    $0x26,%esi
  0x000000011034b27e: nop
  0x000000011034b27f: callq  0x000000010ff576a0  ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=132}
                                                ;*new  ; - java.lang.System::setProperty@13 (line 792)
                                                ;   {runtime_call}
  0x000000011034b284: callq  0x000000010e0276f4  ;*new
                                                ; - java.lang.System::setProperty@13 (line 792)
                                                ;   {runtime_call}
  0x000000011034b289: mov    $0xffffffde,%esi
  0x000000011034b28e: mov    %rax,%rbp
  0x000000011034b291: xchg   %ax,%ax
  0x000000011034b293: callq  0x000000010ff576a0  ; OopMap{rbp=Oop off=152}
                                                ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)
                                                ;   {runtime_call}
  0x000000011034b298: callq  0x000000010e0276f4  ;*invokestatic checkKey
                                                ; - java.lang.System::setProperty@1 (line 789)
                                                ;   {runtime_call}
  0x000000011034b29d: mov    %rax,%rsi
  0x000000011034b2a0: jmp    0x000000011034b2a5
  0x000000011034b2a2: mov    %rax,%rsi          ;*invokevirtual setProperty
                                                ; - java.lang.System::setProperty@31 (line 796)

  0x000000011034b2a5: add    $0x20,%rsp
  0x000000011034b2a9: pop    %rbp
  0x000000011034b2aa: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011034b2af: mov    $0xfffffff4,%esi
  0x000000011034b2b4: data32 xchg %ax,%ax
  0x000000011034b2b7: callq  0x000000010ff576a0  ; OopMap{off=188}
                                                ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)
                                                ;   {runtime_call}
  0x000000011034b2bc: callq  0x000000010e0276f4  ;*checkcast
                                                ; - java.lang.System::setProperty@34 (line 796)
                                                ;   {runtime_call}
  0x000000011034b2c1: hlt
  0x000000011034b2c2: hlt
  0x000000011034b2c3: hlt
  0x000000011034b2c4: hlt
  0x000000011034b2c5: hlt
  0x000000011034b2c6: hlt
  0x000000011034b2c7: hlt
  0x000000011034b2c8: hlt
  0x000000011034b2c9: hlt
  0x000000011034b2ca: hlt
  0x000000011034b2cb: hlt
  0x000000011034b2cc: hlt
  0x000000011034b2cd: hlt
  0x000000011034b2ce: hlt
  0x000000011034b2cf: hlt
  0x000000011034b2d0: hlt
  0x000000011034b2d1: hlt
  0x000000011034b2d2: hlt
  0x000000011034b2d3: hlt
  0x000000011034b2d4: hlt
  0x000000011034b2d5: hlt
  0x000000011034b2d6: hlt
  0x000000011034b2d7: hlt
  0x000000011034b2d8: hlt
  0x000000011034b2d9: hlt
  0x000000011034b2da: hlt
  0x000000011034b2db: hlt
  0x000000011034b2dc: hlt
  0x000000011034b2dd: hlt
  0x000000011034b2de: hlt
  0x000000011034b2df: hlt
[Stub Code]
  0x000000011034b2e0: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011034b2ea: jmpq   0x000000011034b2ea  ;   {runtime_call}
  0x000000011034b2ef: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034b2f9: jmpq   0x000000011034b2f9  ;   {runtime_call}
[Exception Handler]
  0x000000011034b2fe: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011034b303: callq  0x000000011034b308
  0x000000011034b308: subq   $0x5,(%rsp)
  0x000000011034b30d: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011034b312: hlt
  0x000000011034b313: hlt
  0x000000011034b314: hlt
  0x000000011034b315: hlt
  0x000000011034b316: hlt
  0x000000011034b317: hlt
Decoding compiled method 0x0000000110348110:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127045a18} 'requireNonNull' '(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;' in 'java/util/Objects'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  # parm1:    rdx:rdx   = 'java/lang/String'
  #           [sp+0x20]  (sp of caller)
  0x0000000110348260: mov    %eax,-0x14000(%rsp)
  0x0000000110348267: push   %rbp
  0x0000000110348268: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.util.Objects::requireNonNull@-1 (line 227)

  0x000000011034826c: test   %rsi,%rsi
  0x000000011034826f: je     0x0000000110348280  ;*ifnonnull
                                                ; - java.util.Objects::requireNonNull@1 (line 227)

  0x0000000110348271: mov    %rsi,%rax
  0x0000000110348274: add    $0x10,%rsp
  0x0000000110348278: pop    %rbp
  0x0000000110348279: test   %eax,-0x372f27f(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011034827f: retq
  0x0000000110348280: mov    $0xc,%esi
  0x0000000110348285: mov    %rdx,%rbp
  0x0000000110348288: data32 xchg %ax,%ax
  0x000000011034828b: callq  0x000000010ff576a0  ; OopMap{rbp=Oop off=48}
                                                ;*new  ; - java.util.Objects::requireNonNull@4 (line 228)
                                                ;   {runtime_call}
  0x0000000110348290: callq  0x000000010e0276f4  ;*new
                                                ; - java.util.Objects::requireNonNull@4 (line 228)
                                                ;   {runtime_call}
  0x0000000110348295: hlt
  0x0000000110348296: hlt
  0x0000000110348297: hlt
  0x0000000110348298: hlt
  0x0000000110348299: hlt
  0x000000011034829a: hlt
  0x000000011034829b: hlt
  0x000000011034829c: hlt
  0x000000011034829d: hlt
  0x000000011034829e: hlt
  0x000000011034829f: hlt
[Exception Handler]
[Stub Code]
  0x00000001103482a0: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x00000001103482a5: callq  0x00000001103482aa
  0x00000001103482aa: subq   $0x5,(%rsp)
  0x00000001103482af: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103482b4: hlt
  0x00000001103482b5: hlt
  0x00000001103482b6: hlt
  0x00000001103482b7: hlt
Decoding compiled method 0x0000000110346590:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x0000000110346700: mov    0x8(%rsi),%r10d
  0x0000000110346704: shl    $0x3,%r10
  0x0000000110346708: cmp    %rax,%r10
  0x000000011034670b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110346711: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011034671c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110346720: mov    %eax,-0x14000(%rsp)
  0x0000000110346727: push   %rbp
  0x0000000110346728: sub    $0x30,%rsp
  0x000000011034672c: movabs $0x12727b480,%rdx  ;   {metadata(method data for {method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread')}
  0x0000000110346736: mov    0xdc(%rdx),%edi
  0x000000011034673c: add    $0x8,%edi
  0x000000011034673f: mov    %edi,0xdc(%rdx)
  0x0000000110346745: movabs $0x126f408d8,%rdx  ;   {metadata({method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread')}
  0x000000011034674f: and    $0x0,%edi
  0x0000000110346752: cmp    $0x0,%edi
  0x0000000110346755: je     0x00000001103468a2  ;*aload_0
                                                ; - java.lang.Thread::exit@0 (line 757)

  0x000000011034675b: mov    0x44(%rsi),%edi
  0x000000011034675e: shl    $0x3,%rdi          ;*getfield group
                                                ; - java.lang.Thread::exit@1 (line 757)

  0x0000000110346762: cmp    $0x0,%rdi
  0x0000000110346766: movabs $0x12727b480,%rdx  ;   {metadata(method data for {method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread')}
  0x0000000110346770: movabs $0x108,%rbx
  0x000000011034677a: je     0x000000011034678a
  0x0000000110346780: movabs $0x118,%rbx
  0x000000011034678a: mov    (%rdx,%rbx,1),%rax
  0x000000011034678e: lea    0x1(%rax),%rax
  0x0000000110346792: mov    %rax,(%rdx,%rbx,1)
  0x0000000110346796: je     0x00000001103467fd  ;*ifnull
                                                ; - java.lang.Thread::exit@4 (line 757)

  0x000000011034679c: cmp    (%rdi),%rax        ; implicit exception: dispatches to 0x00000001103468b9
  0x000000011034679f: mov    %rdi,%rdx
  0x00000001103467a2: movabs $0x12727b480,%rbx  ;   {metadata(method data for {method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread')}
  0x00000001103467ac: movabs $0x7c0007110,%r10  ;   {metadata('java/lang/ThreadGroup')}
  0x00000001103467b6: mov    %r10,0x130(%rbx)
  0x00000001103467bd: addq   $0x1,0x138(%rbx)
  0x00000001103467c5: mov    %rsi,%rdx
  0x00000001103467c8: mov    %rsi,0x20(%rsp)
  0x00000001103467cd: mov    %rdi,%rsi          ;*invokevirtual threadTerminated
                                                ; - java.lang.Thread::exit@12 (line 758)

  0x00000001103467d0: nop
  0x00000001103467d1: nop
  0x00000001103467d2: nop
  0x00000001103467d3: nop
  0x00000001103467d4: nop
  0x00000001103467d5: nop
  0x00000001103467d6: nop
  0x00000001103467d7: callq  0x000000010ff580a0  ; OopMap{[32]=Oop off=220}
                                                ;*invokevirtual threadTerminated
                                                ; - java.lang.Thread::exit@12 (line 758)
                                                ;   {optimized virtual_call}
  0x00000001103467dc: mov    0x20(%rsp),%rsi
  0x00000001103467e1: movl   $0x0,0x44(%rsi)
  0x00000001103467e8: mov    %rsi,%rdi
  0x00000001103467eb: shr    $0x9,%rdi
  0x00000001103467ef: movabs $0x109ac3000,%rbx
  0x00000001103467f9: movb   $0x0,(%rdi,%rbx,1)  ;*putfield group
                                                ; - java.lang.Thread::exit@17 (line 759)

  0x00000001103467fd: movl   $0x0,0x40(%rsi)
  0x0000000110346804: mov    %rsi,%rdi
  0x0000000110346807: shr    $0x9,%rdi
  0x000000011034680b: movabs $0x109ac3000,%rbx
  0x0000000110346815: movb   $0x0,(%rdi,%rbx,1)  ;*putfield target
                                                ; - java.lang.Thread::exit@22 (line 762)

  0x0000000110346819: movl   $0x0,0x50(%rsi)
  0x0000000110346820: mov    %rsi,%rdi
  0x0000000110346823: shr    $0x9,%rdi
  0x0000000110346827: movb   $0x0,(%rdi,%rbx,1)  ;*putfield threadLocals
                                                ; - java.lang.Thread::exit@27 (line 764)

  0x000000011034682b: movl   $0x0,0x54(%rsi)
  0x0000000110346832: mov    %rsi,%rdi
  0x0000000110346835: shr    $0x9,%rdi
  0x0000000110346839: movb   $0x0,(%rdi,%rbx,1)  ;*putfield inheritableThreadLocals
                                                ; - java.lang.Thread::exit@32 (line 765)

  0x000000011034683d: movl   $0x0,0x4c(%rsi)
  0x0000000110346844: mov    %rsi,%rdi
  0x0000000110346847: shr    $0x9,%rdi
  0x000000011034684b: movb   $0x0,(%rdi,%rbx,1)  ;*putfield inheritedAccessControlContext
                                                ; - java.lang.Thread::exit@37 (line 766)

  0x000000011034684f: movabs $0x0,%rdi          ;   {oop(NULL)}
  0x0000000110346859: mov    %rdi,%r10
  0x000000011034685c: shr    $0x3,%r10
  0x0000000110346860: mov    %r10d,0x5c(%rsi)
  0x0000000110346864: mov    %rsi,%rdi
  0x0000000110346867: shr    $0x9,%rdi
  0x000000011034686b: movb   $0x0,(%rdi,%rbx,1)
  0x000000011034686f: lock addl $0x0,(%rsp)     ;*putfield blocker
                                                ; - java.lang.Thread::exit@42 (line 767)

  0x0000000110346874: movabs $0x0,%rdi          ;   {oop(NULL)}
  0x000000011034687e: mov    %rdi,%r10
  0x0000000110346881: shr    $0x3,%r10
  0x0000000110346885: mov    %r10d,0x64(%rsi)
  0x0000000110346889: shr    $0x9,%rsi
  0x000000011034688d: movb   $0x0,(%rsi,%rbx,1)
  0x0000000110346891: lock addl $0x0,(%rsp)     ;*putfield uncaughtExceptionHandler
                                                ; - java.lang.Thread::exit@47 (line 768)

  0x0000000110346896: add    $0x30,%rsp
  0x000000011034689a: pop    %rbp
  0x000000011034689b: test   %eax,-0x372d7a1(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103468a1: retq
  0x00000001103468a2: mov    %rdx,0x8(%rsp)
  0x00000001103468a7: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103468af: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=436}
                                                ;*synchronization entry
                                                ; - java.lang.Thread::exit@-1 (line 757)
                                                ;   {runtime_call}
  0x00000001103468b4: jmpq   0x000000011034675b
  0x00000001103468b9: callq  0x000000011000e080  ; OopMap{rsi=Oop rdi=Oop off=446}
                                                ;*invokevirtual threadTerminated
                                                ; - java.lang.Thread::exit@12 (line 758)
                                                ;   {runtime_call}
  0x00000001103468be: nop
  0x00000001103468bf: nop
  0x00000001103468c0: mov    0x2a8(%r15),%rax
  0x00000001103468c7: movabs $0x0,%r10
  0x00000001103468d1: mov    %r10,0x2a8(%r15)
  0x00000001103468d8: movabs $0x0,%r10
  0x00000001103468e2: mov    %r10,0x2b0(%r15)
  0x00000001103468e9: add    $0x30,%rsp
  0x00000001103468ed: pop    %rbp
  0x00000001103468ee: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103468f3: hlt
  0x00000001103468f4: hlt
  0x00000001103468f5: hlt
  0x00000001103468f6: hlt
  0x00000001103468f7: hlt
  0x00000001103468f8: hlt
  0x00000001103468f9: hlt
  0x00000001103468fa: hlt
  0x00000001103468fb: hlt
  0x00000001103468fc: hlt
  0x00000001103468fd: hlt
  0x00000001103468fe: hlt
  0x00000001103468ff: hlt
[Stub Code]
  0x0000000110346900: nop                       ;   {no_reloc}
  0x0000000110346901: nop
  0x0000000110346902: nop
  0x0000000110346903: nop
  0x0000000110346904: nop
  0x0000000110346905: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034690f: jmpq   0x000000011034690f  ;   {runtime_call}
[Exception Handler]
  0x0000000110346914: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110346919: mov    %rsp,-0x28(%rsp)
  0x000000011034691e: sub    $0x80,%rsp
  0x0000000110346925: mov    %rax,0x78(%rsp)
  0x000000011034692a: mov    %rcx,0x70(%rsp)
  0x000000011034692f: mov    %rdx,0x68(%rsp)
  0x0000000110346934: mov    %rbx,0x60(%rsp)
  0x0000000110346939: mov    %rbp,0x50(%rsp)
  0x000000011034693e: mov    %rsi,0x48(%rsp)
  0x0000000110346943: mov    %rdi,0x40(%rsp)
  0x0000000110346948: mov    %r8,0x38(%rsp)
  0x000000011034694d: mov    %r9,0x30(%rsp)
  0x0000000110346952: mov    %r10,0x28(%rsp)
  0x0000000110346957: mov    %r11,0x20(%rsp)
  0x000000011034695c: mov    %r12,0x18(%rsp)
  0x0000000110346961: mov    %r13,0x10(%rsp)
  0x0000000110346966: mov    %r14,0x8(%rsp)
  0x000000011034696b: mov    %r15,(%rsp)
  0x000000011034696f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110346979: movabs $0x110346919,%rsi  ;   {internal_word}
  0x0000000110346983: mov    %rsp,%rdx
  0x0000000110346986: and    $0xfffffffffffffff0,%rsp
  0x000000011034698a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011034698f: hlt
[Deopt Handler Code]
  0x0000000110346990: movabs $0x110346990,%r10  ;   {section_word}
  0x000000011034699a: push   %r10
  0x000000011034699c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103469a1: hlt
  0x00000001103469a2: hlt
  0x00000001103469a3: hlt
  0x00000001103469a4: hlt
  0x00000001103469a5: hlt
  0x00000001103469a6: hlt
  0x00000001103469a7: hlt
Decoding compiled method 0x0000000110341910:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f18e40} 'toString' '()Ljava/lang/String;' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x0000000110341a60: mov    0x8(%rsi),%r10d
  0x0000000110341a64: shl    $0x3,%r10
  0x0000000110341a68: cmp    %rax,%r10
  0x0000000110341a6b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110341a71: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110341a7c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110341a80: mov    %eax,-0x14000(%rsp)
  0x0000000110341a87: push   %rbp
  0x0000000110341a88: sub    $0x30,%rsp
  0x0000000110341a8c: movabs $0x12727b460,%rax
  0x0000000110341a96: mov    0x8(%rax),%edi
  0x0000000110341a99: add    $0x8,%edi
  0x0000000110341a9c: mov    %edi,0x8(%rax)
  0x0000000110341a9f: movabs $0x126f18e40,%rax  ;   {metadata({method} {0x0000000126f18e40} 'toString' '()Ljava/lang/String;' in 'java/lang/String')}
  0x0000000110341aa9: and    $0x3ff8,%edi
  0x0000000110341aaf: cmp    $0x0,%edi
  0x0000000110341ab2: je     0x0000000110341ac7  ;*aload_0
                                                ; - java.lang.String::toString@0 (line 2887)

  0x0000000110341ab8: mov    %rsi,%rax
  0x0000000110341abb: add    $0x30,%rsp
  0x0000000110341abf: pop    %rbp
  0x0000000110341ac0: test   %eax,-0x37289c6(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110341ac6: retq
  0x0000000110341ac7: mov    %rax,0x8(%rsp)
  0x0000000110341acc: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110341ad4: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=121}
                                                ;*synchronization entry
                                                ; - java.lang.String::toString@-1 (line 2887)
                                                ;   {runtime_call}
  0x0000000110341ad9: jmp    0x0000000110341ab8
  0x0000000110341adb: nop
  0x0000000110341adc: nop
  0x0000000110341add: mov    0x2a8(%r15),%rax
  0x0000000110341ae4: movabs $0x0,%r10
  0x0000000110341aee: mov    %r10,0x2a8(%r15)
  0x0000000110341af5: movabs $0x0,%r10
  0x0000000110341aff: mov    %r10,0x2b0(%r15)
  0x0000000110341b06: add    $0x30,%rsp
  0x0000000110341b0a: pop    %rbp
  0x0000000110341b0b: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110341b10: hlt
  0x0000000110341b11: hlt
  0x0000000110341b12: hlt
  0x0000000110341b13: hlt
  0x0000000110341b14: hlt
  0x0000000110341b15: hlt
  0x0000000110341b16: hlt
  0x0000000110341b17: hlt
  0x0000000110341b18: hlt
  0x0000000110341b19: hlt
  0x0000000110341b1a: hlt
  0x0000000110341b1b: hlt
  0x0000000110341b1c: hlt
  0x0000000110341b1d: hlt
  0x0000000110341b1e: hlt
  0x0000000110341b1f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110341b20: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110341b25: mov    %rsp,-0x28(%rsp)
  0x0000000110341b2a: sub    $0x80,%rsp
  0x0000000110341b31: mov    %rax,0x78(%rsp)
  0x0000000110341b36: mov    %rcx,0x70(%rsp)
  0x0000000110341b3b: mov    %rdx,0x68(%rsp)
  0x0000000110341b40: mov    %rbx,0x60(%rsp)
  0x0000000110341b45: mov    %rbp,0x50(%rsp)
  0x0000000110341b4a: mov    %rsi,0x48(%rsp)
  0x0000000110341b4f: mov    %rdi,0x40(%rsp)
  0x0000000110341b54: mov    %r8,0x38(%rsp)
  0x0000000110341b59: mov    %r9,0x30(%rsp)
  0x0000000110341b5e: mov    %r10,0x28(%rsp)
  0x0000000110341b63: mov    %r11,0x20(%rsp)
  0x0000000110341b68: mov    %r12,0x18(%rsp)
  0x0000000110341b6d: mov    %r13,0x10(%rsp)
  0x0000000110341b72: mov    %r14,0x8(%rsp)
  0x0000000110341b77: mov    %r15,(%rsp)
  0x0000000110341b7b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110341b85: movabs $0x110341b25,%rsi  ;   {internal_word}
  0x0000000110341b8f: mov    %rsp,%rdx
  0x0000000110341b92: and    $0xfffffffffffffff0,%rsp
  0x0000000110341b96: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110341b9b: hlt
[Deopt Handler Code]
  0x0000000110341b9c: movabs $0x110341b9c,%r10  ;   {section_word}
  0x0000000110341ba6: push   %r10
  0x0000000110341ba8: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110341bad: hlt
  0x0000000110341bae: hlt
  0x0000000110341baf: hlt
Decoding compiled method 0x0000000110345d90:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian'
  # this:     rsi:rsi   = 'sun/util/calendar/Gregorian'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = 'java/util/TimeZone'
  #           [sp+0x90]  (sp of caller)
  0x0000000110345f40: mov    0x8(%rsi),%r10d
  0x0000000110345f44: shl    $0x3,%r10
  0x0000000110345f48: cmp    %rax,%r10
  0x0000000110345f4b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110345f51: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110345f5c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110345f60: mov    %eax,-0x14000(%rsp)
  0x0000000110345f67: push   %rbp
  0x0000000110345f68: sub    $0x80,%rsp
  0x0000000110345f6f: movabs $0x12727b8b0,%rax  ;   {metadata(method data for {method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110345f79: mov    0xdc(%rax),%edi
  0x0000000110345f7f: add    $0x8,%edi
  0x0000000110345f82: mov    %edi,0xdc(%rax)
  0x0000000110345f88: movabs $0x12720e658,%rax  ;   {metadata({method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110345f92: and    $0x0,%edi
  0x0000000110345f95: cmp    $0x0,%edi
  0x0000000110345f98: je     0x00000001103461e5  ;*aload_0
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@0 (line 77)

  0x0000000110345f9e: mov    %rdx,0x60(%rsp)
  0x0000000110345fa3: mov    %rsi,%rax
  0x0000000110345fa6: movabs $0x12727b8b0,%rdi  ;   {metadata(method data for {method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110345fb0: movabs $0x7c0052bd8,%r10  ;   {metadata('sun/util/calendar/Gregorian')}
  0x0000000110345fba: mov    %r10,0x110(%rdi)
  0x0000000110345fc1: addq   $0x1,0x118(%rdi)
  0x0000000110345fc9: movabs $0x12727ba70,%rax  ;   {metadata(method data for {method} {0x000000012720e788} 'newCalendarDate' '(Ljava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110345fd3: mov    0xdc(%rax),%edi
  0x0000000110345fd9: add    $0x8,%edi
  0x0000000110345fdc: mov    %edi,0xdc(%rax)
  0x0000000110345fe2: movabs $0x12720e788,%rax  ;   {metadata({method} {0x000000012720e788} 'newCalendarDate' '(Ljava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110345fec: and    $0x7ffff8,%edi
  0x0000000110345ff2: cmp    $0x0,%edi
  0x0000000110345ff5: je     0x00000001103461fc
  0x0000000110345ffb: nopl   0x0(%rax,%rax,1)
  0x0000000110346000: jmpq   0x0000000110346222  ;   {no_reloc}
  0x0000000110346005: add    %al,(%rax)
  0x0000000110346007: add    %al,(%rax)
  0x0000000110346009: add    %ch,%cl
  0x000000011034600b: sbb    $0x48000002,%eax   ;*new  ; - sun.util.calendar.Gregorian::newCalendarDate@0 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)

  0x0000000110346010: mov    %eax,%edx
  0x0000000110346012: movabs $0x12727ba70,%rbx  ;   {metadata(method data for {method} {0x000000012720e788} 'newCalendarDate' '(Ljava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x000000011034601c: addq   $0x1,0x108(%rbx)
  0x0000000110346024: mov    %rcx,%rdx
  0x0000000110346027: mov    %rsi,0x58(%rsp)
  0x000000011034602c: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - sun.util.calendar.Gregorian::newCalendarDate@5 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)

  0x000000011034602f: mov    %rax,0x68(%rsp)
  0x0000000110346034: nop
  0x0000000110346035: nop
  0x0000000110346036: nop
  0x0000000110346037: callq  0x000000010ff580a0  ; OopMap{[88]=Oop [104]=Oop off=252}
                                                ;*invokespecial <init>
                                                ; - sun.util.calendar.Gregorian::newCalendarDate@5 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)
                                                ;   {optimized virtual_call}
  0x000000011034603c: mov    0x58(%rsp),%rsi
  0x0000000110346041: movabs $0x12727b8b0,%rdx  ;   {metadata(method data for {method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x000000011034604b: movabs $0x7c0052bd8,%r10  ;   {metadata('sun/util/calendar/Gregorian')}
  0x0000000110346055: mov    %r10,0x140(%rdx)
  0x000000011034605c: addq   $0x1,0x148(%rdx)
  0x0000000110346064: movabs $0x12727bbc8,%rdx  ;   {metadata(method data for {method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x000000011034606e: mov    0xdc(%rdx),%ecx
  0x0000000110346074: add    $0x8,%ecx
  0x0000000110346077: mov    %ecx,0xdc(%rdx)
  0x000000011034607d: movabs $0x12720e5c0,%rdx  ;   {metadata({method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110346087: and    $0x7ffff8,%ecx
  0x000000011034608d: cmp    $0x0,%ecx
  0x0000000110346090: je     0x0000000110346239
  0x0000000110346096: mov    0x58(%rsp),%rsi
  0x000000011034609b: movabs $0x12727bbc8,%rdx  ;   {metadata(method data for {method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x00000001103460a5: addq   $0x1,0x108(%rdx)
  0x00000001103460ad: mov    0x60(%rsp),%rdx
  0x00000001103460b2: mov    0x68(%rsp),%rcx
  0x00000001103460b7: mov    0x58(%rsp),%rsi    ;*invokespecial getCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@3 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)

  0x00000001103460bc: nop
  0x00000001103460bd: nop
  0x00000001103460be: nop
  0x00000001103460bf: callq  0x000000010ff580a0  ; OopMap{off=388}
                                                ;*invokespecial getCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@3 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)
                                                ;   {optimized virtual_call}
  0x00000001103460c4: cmp    $0x0,%rax
  0x00000001103460c8: jne    0x00000001103460e3
  0x00000001103460ca: movabs $0x12727bbc8,%rbx  ;   {metadata(method data for {method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x00000001103460d4: orl    $0x100,0x110(%rbx)
  0x00000001103460de: jmpq   0x00000001103461d0
  0x00000001103460e3: nopl   0x0(%rax,%rax,1)
  0x00000001103460e8: jmpq   0x000000011034625f  ;   {no_reloc}
  0x00000001103460ed: add    %al,(%rax)
  0x00000001103460ef: add    %al,(%rax)
  0x00000001103460f1: add    %cl,-0x3eb7f7a8(%rbx)
  0x00000001103460f7: jrcxz  0x00000001103460fc
  0x00000001103460f9: cmp    %rdx,%rbx
  0x00000001103460fc: je     0x000000011034612a
  0x0000000110346102: mov    0xc(%rdx),%edi
  0x0000000110346105: cmp    (%rbx,%rdi,1),%rdx
  0x0000000110346109: je     0x000000011034612a
  0x000000011034610f: cmp    $0x18,%edi
  0x0000000110346112: jne    0x00000001103461b4
  0x0000000110346118: push   %rbx
  0x0000000110346119: push   %rdx
  0x000000011034611a: callq  0x00000001100108a0  ;   {runtime_call}
  0x000000011034611f: pop    %rbx
  0x0000000110346120: pop    %rdx
  0x0000000110346121: cmp    $0x0,%edx
  0x0000000110346124: je     0x00000001103461b4
  0x000000011034612a: movabs $0x12727bbc8,%rbx  ;   {metadata(method data for {method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x0000000110346134: mov    0x8(%rax),%edx
  0x0000000110346137: shl    $0x3,%rdx
  0x000000011034613b: cmp    0x120(%rbx),%rdx
  0x0000000110346142: jne    0x0000000110346151
  0x0000000110346144: addq   $0x1,0x128(%rbx)
  0x000000011034614c: jmpq   0x00000001103461d0
  0x0000000110346151: cmp    0x130(%rbx),%rdx
  0x0000000110346158: jne    0x0000000110346167
  0x000000011034615a: addq   $0x1,0x138(%rbx)
  0x0000000110346162: jmpq   0x00000001103461d0
  0x0000000110346167: cmpq   $0x0,0x120(%rbx)
  0x0000000110346172: jne    0x000000011034618b
  0x0000000110346174: mov    %rdx,0x120(%rbx)
  0x000000011034617b: movq   $0x1,0x128(%rbx)
  0x0000000110346186: jmpq   0x00000001103461d0
  0x000000011034618b: cmpq   $0x0,0x130(%rbx)
  0x0000000110346196: jne    0x00000001103461af
  0x0000000110346198: mov    %rdx,0x130(%rbx)
  0x000000011034619f: movq   $0x1,0x138(%rbx)
  0x00000001103461aa: jmpq   0x00000001103461d0
  0x00000001103461af: jmpq   0x00000001103461d0
  0x00000001103461b4: movabs $0x12727bbc8,%rbx  ;   {metadata(method data for {method} {0x000000012720e5c0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian')}
  0x00000001103461be: subq   $0x1,0x118(%rbx)
  0x00000001103461c6: jmpq   0x0000000110346269
  0x00000001103461cb: jmpq   0x00000001103461d0
  0x00000001103461d0: mov    %rax,%rsi          ;*checkcast
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@6 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)

  0x00000001103461d3: mov    %rsi,%rax
  0x00000001103461d6: add    $0x80,%rsp
  0x00000001103461dd: pop    %rbp
  0x00000001103461de: test   %eax,-0x372d0e4(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103461e4: retq
  0x00000001103461e5: mov    %rax,0x8(%rsp)
  0x00000001103461ea: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103461f2: callq  0x00000001100129e0  ; OopMap{rsi=Oop rcx=Oop off=695}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@-1 (line 77)
                                                ;   {runtime_call}
  0x00000001103461f7: jmpq   0x0000000110345f9e
  0x00000001103461fc: mov    %rax,0x8(%rsp)
  0x0000000110346201: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110346209: callq  0x00000001100129e0  ; OopMap{rsi=Oop rcx=Oop off=718}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.Gregorian::newCalendarDate@-1 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)
                                                ;   {runtime_call}
  0x000000011034620e: jmpq   0x0000000110345ffb
  0x0000000110346213: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034621d: mov    $0xa050f00,%eax
  0x0000000110346222: callq  0x00000001100118a0  ; OopMap{rsi=Oop rcx=Oop off=743}
                                                ;*new  ; - sun.util.calendar.Gregorian::newCalendarDate@0 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)
                                                ;   {runtime_call}
  0x0000000110346227: jmpq   0x0000000110346000
  0x000000011034622c: mov    %rdx,%rdx
  0x000000011034622f: callq  0x000000011000e520  ; OopMap{rsi=Oop rcx=Oop off=756}
                                                ;*new  ; - sun.util.calendar.Gregorian::newCalendarDate@0 (line 85)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)
                                                ;   {runtime_call}
  0x0000000110346234: jmpq   0x000000011034600f
  0x0000000110346239: mov    %rdx,0x8(%rsp)
  0x000000011034623e: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110346246: callq  0x00000001100129e0  ; OopMap{[88]=Oop [104]=Oop off=779}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@-1 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)
                                                ;   {runtime_call}
  0x000000011034624b: jmpq   0x0000000110346096
  0x0000000110346250: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034625a: mov    $0xa050f00,%eax
  0x000000011034625f: callq  0x00000001100118a0  ; OopMap{rax=Oop off=804}
                                                ;*checkcast
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@6 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)
                                                ;   {runtime_call}
  0x0000000110346264: jmpq   0x00000001103460e8
  0x0000000110346269: mov    %rax,(%rsp)
  0x000000011034626d: callq  0x0000000110010440  ; OopMap{rax=Oop off=818}
                                                ;*checkcast
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@6 (line 73)
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)
                                                ;   {runtime_call}
  0x0000000110346272: nop
  0x0000000110346273: nop
  0x0000000110346274: mov    0x2a8(%r15),%rax
  0x000000011034627b: movabs $0x0,%r10
  0x0000000110346285: mov    %r10,0x2a8(%r15)
  0x000000011034628c: movabs $0x0,%r10
  0x0000000110346296: mov    %r10,0x2b0(%r15)
  0x000000011034629d: add    $0x80,%rsp
  0x00000001103462a4: pop    %rbp
  0x00000001103462a5: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103462aa: hlt
  0x00000001103462ab: hlt
  0x00000001103462ac: hlt
  0x00000001103462ad: hlt
  0x00000001103462ae: hlt
  0x00000001103462af: hlt
  0x00000001103462b0: hlt
  0x00000001103462b1: hlt
  0x00000001103462b2: hlt
  0x00000001103462b3: hlt
  0x00000001103462b4: hlt
  0x00000001103462b5: hlt
  0x00000001103462b6: hlt
  0x00000001103462b7: hlt
  0x00000001103462b8: hlt
  0x00000001103462b9: hlt
  0x00000001103462ba: hlt
  0x00000001103462bb: hlt
  0x00000001103462bc: hlt
  0x00000001103462bd: hlt
  0x00000001103462be: hlt
  0x00000001103462bf: hlt
[Stub Code]
  0x00000001103462c0: nop                       ;   {no_reloc}
  0x00000001103462c1: nop
  0x00000001103462c2: nop
  0x00000001103462c3: nop
  0x00000001103462c4: nop
  0x00000001103462c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103462cf: jmpq   0x00000001103462cf  ;   {runtime_call}
  0x00000001103462d4: nop
  0x00000001103462d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103462df: jmpq   0x00000001103462df  ;   {runtime_call}
[Exception Handler]
  0x00000001103462e4: callq  0x00000001100100e0  ;   {runtime_call}
  0x00000001103462e9: mov    %rsp,-0x28(%rsp)
  0x00000001103462ee: sub    $0x80,%rsp
  0x00000001103462f5: mov    %rax,0x78(%rsp)
  0x00000001103462fa: mov    %rcx,0x70(%rsp)
  0x00000001103462ff: mov    %rdx,0x68(%rsp)
  0x0000000110346304: mov    %rbx,0x60(%rsp)
  0x0000000110346309: mov    %rbp,0x50(%rsp)
  0x000000011034630e: mov    %rsi,0x48(%rsp)
  0x0000000110346313: mov    %rdi,0x40(%rsp)
  0x0000000110346318: mov    %r8,0x38(%rsp)
  0x000000011034631d: mov    %r9,0x30(%rsp)
  0x0000000110346322: mov    %r10,0x28(%rsp)
  0x0000000110346327: mov    %r11,0x20(%rsp)
  0x000000011034632c: mov    %r12,0x18(%rsp)
  0x0000000110346331: mov    %r13,0x10(%rsp)
  0x0000000110346336: mov    %r14,0x8(%rsp)
  0x000000011034633b: mov    %r15,(%rsp)
  0x000000011034633f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110346349: movabs $0x1103462e9,%rsi  ;   {internal_word}
  0x0000000110346353: mov    %rsp,%rdx
  0x0000000110346356: and    $0xfffffffffffffff0,%rsp
  0x000000011034635a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011034635f: hlt
[Deopt Handler Code]
  0x0000000110346360: movabs $0x110346360,%r10  ;   {section_word}
  0x000000011034636a: push   %r10
  0x000000011034636c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110346371: hlt
  0x0000000110346372: hlt
  0x0000000110346373: hlt
  0x0000000110346374: hlt
  0x0000000110346375: hlt
  0x0000000110346376: hlt
  0x0000000110346377: hlt
Decoding compiled method 0x0000000110344510:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f408d8} 'exit' '()V' in 'java/lang/Thread'
  #           [sp+0x20]  (sp of caller)
  0x0000000110344660: mov    0x8(%rsi),%r10d
  0x0000000110344664: shl    $0x3,%r10
  0x0000000110344668: cmp    %r10,%rax
  0x000000011034466b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110344671: data32 xchg %ax,%ax
  0x0000000110344674: nopl   0x0(%rax,%rax,1)
  0x000000011034467c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110344680: mov    %eax,-0x14000(%rsp)
  0x0000000110344687: push   %rbp
  0x0000000110344688: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.lang.Thread::exit@-1 (line 757)

  0x000000011034468c: mov    %rsi,%rbp
  0x000000011034468f: mov    0x44(%rsi),%r11d   ;*getfield group
                                                ; - java.lang.Thread::exit@1 (line 757)

  0x0000000110344693: test   %r11d,%r11d
  0x0000000110344696: je     0x00000001103446a8  ;*ifnull
                                                ; - java.lang.Thread::exit@4 (line 757)

  0x0000000110344698: lea    (%r12,%r11,8),%rsi  ;*getfield group
                                                ; - java.lang.Thread::exit@1 (line 757)

  0x000000011034469c: mov    %rbp,%rdx
  0x000000011034469f: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=68}
                                                ;*invokevirtual threadTerminated
                                                ; - java.lang.Thread::exit@12 (line 758)
                                                ;   {optimized virtual_call}
  0x00000001103446a4: mov    %r12d,0x44(%rbp)   ;*aload_0
                                                ; - java.lang.Thread::exit@20 (line 762)

  0x00000001103446a8: mov    %r12d,0x40(%rbp)   ;*putfield target
                                                ; - java.lang.Thread::exit@22 (line 762)

  0x00000001103446ac: mov    %r12d,0x4c(%rbp)   ;*putfield inheritedAccessControlContext
                                                ; - java.lang.Thread::exit@37 (line 766)

  0x00000001103446b0: mov    %r12d,0x54(%rbp)   ;*putfield inheritableThreadLocals
                                                ; - java.lang.Thread::exit@32 (line 765)

  0x00000001103446b4: mov    %r12d,0x50(%rbp)
  0x00000001103446b8: mov    %r12d,0x5c(%rbp)
  0x00000001103446bc: mov    %r12d,0x64(%rbp)
  0x00000001103446c0: lock addl $0x0,(%rsp)     ;*putfield uncaughtExceptionHandler
                                                ; - java.lang.Thread::exit@47 (line 768)

  0x00000001103446c5: add    $0x10,%rsp
  0x00000001103446c9: pop    %rbp
  0x00000001103446ca: test   %eax,-0x372b6d0(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x00000001103446d0: retq                      ;*invokevirtual threadTerminated
                                                ; - java.lang.Thread::exit@12 (line 758)

  0x00000001103446d1: mov    %rax,%rsi
  0x00000001103446d4: add    $0x10,%rsp
  0x00000001103446d8: pop    %rbp
  0x00000001103446d9: jmpq   0x0000000110019060  ;   {runtime_call}
  0x00000001103446de: hlt
  0x00000001103446df: hlt
[Stub Code]
  0x00000001103446e0: movabs $0x0,%rbx          ;   {no_reloc}
  0x00000001103446ea: jmpq   0x00000001103446ea  ;   {runtime_call}
[Exception Handler]
  0x00000001103446ef: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x00000001103446f4: callq  0x00000001103446f9
  0x00000001103446f9: subq   $0x5,(%rsp)
  0x00000001103446fe: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110344703: hlt
  0x0000000110344704: hlt
  0x0000000110344705: hlt
  0x0000000110344706: hlt
  0x0000000110344707: hlt
Decoding compiled method 0x0000000110344150:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012720e658} 'getCalendarDate' '(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;' in 'sun/util/calendar/Gregorian'
  # this:     rsi:rsi   = 'sun/util/calendar/Gregorian'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = 'java/util/TimeZone'
  #           [sp+0x30]  (sp of caller)
  0x00000001103442a0: mov    0x8(%rsi),%r10d
  0x00000001103442a4: shl    $0x3,%r10
  0x00000001103442a8: cmp    %r10,%rax
  0x00000001103442ab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103442b1: data32 xchg %ax,%ax
  0x00000001103442b4: nopl   0x0(%rax,%rax,1)
  0x00000001103442bc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103442c0: mov    %eax,-0x14000(%rsp)
  0x00000001103442c7: push   %rbp
  0x00000001103442c8: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@-1 (line 77)

  0x00000001103442cc: mov    %rdx,(%rsp)
  0x00000001103442d0: mov    %rsi,%rbp
  0x00000001103442d3: mov    %rcx,%rdx
  0x00000001103442d6: nop
  0x00000001103442d7: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=60}
                                                ;*invokevirtual newCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)
                                                ;   {optimized virtual_call}
  0x00000001103442dc: mov    %rbp,%rsi
  0x00000001103442df: mov    (%rsp),%rdx
  0x00000001103442e3: mov    %rax,%rcx
  0x00000001103442e6: nop
  0x00000001103442e7: callq  0x000000010ff580a0  ; OopMap{off=76}
                                                ;*invokevirtual getCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)
                                                ;   {optimized virtual_call}
  0x00000001103442ec: add    $0x20,%rsp
  0x00000001103442f0: pop    %rbp
  0x00000001103442f1: test   %eax,-0x372b2f7(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x00000001103442f7: retq                      ;*invokevirtual newCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@4 (line 77)

  0x00000001103442f8: mov    %rax,%rsi
  0x00000001103442fb: jmp    0x0000000110344300
  0x00000001103442fd: mov    %rax,%rsi          ;*invokevirtual getCalendarDate
                                                ; - sun.util.calendar.Gregorian::getCalendarDate@7 (line 77)

  0x0000000110344300: add    $0x20,%rsp
  0x0000000110344304: pop    %rbp
  0x0000000110344305: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011034430a: hlt
  0x000000011034430b: hlt
  0x000000011034430c: hlt
  0x000000011034430d: hlt
  0x000000011034430e: hlt
  0x000000011034430f: hlt
  0x0000000110344310: hlt
  0x0000000110344311: hlt
  0x0000000110344312: hlt
  0x0000000110344313: hlt
  0x0000000110344314: hlt
  0x0000000110344315: hlt
  0x0000000110344316: hlt
  0x0000000110344317: hlt
  0x0000000110344318: hlt
  0x0000000110344319: hlt
  0x000000011034431a: hlt
  0x000000011034431b: hlt
  0x000000011034431c: hlt
  0x000000011034431d: hlt
  0x000000011034431e: hlt
  0x000000011034431f: hlt
[Stub Code]
  0x0000000110344320: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011034432a: jmpq   0x000000011034432a  ;   {runtime_call}
  0x000000011034432f: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110344339: jmpq   0x0000000110344339  ;   {runtime_call}
[Exception Handler]
  0x000000011034433e: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110344343: callq  0x0000000110344348
  0x0000000110344348: subq   $0x5,(%rsp)
  0x000000011034434d: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110344352: hlt
  0x0000000110344353: hlt
  0x0000000110344354: hlt
  0x0000000110344355: hlt
  0x0000000110344356: hlt
  0x0000000110344357: hlt
Decoding compiled method 0x000000011034b550:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/String'
  # parm1:    rcx       = int
  #           [sp+0x150]  (sp of caller)
  0x000000011034b9e0: mov    0x8(%rsi),%r10d
  0x000000011034b9e4: shl    $0x3,%r10
  0x000000011034b9e8: cmp    %rax,%r10
  0x000000011034b9eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011034b9f1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011034b9fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011034ba00: mov    %eax,-0x14000(%rsp)
  0x000000011034ba07: push   %rbp
  0x000000011034ba08: sub    $0x140,%rsp
  0x000000011034ba0f: mov    %rsi,0xb8(%rsp)
  0x000000011034ba17: mov    %rdx,0xb0(%rsp)
  0x000000011034ba1f: mov    %ecx,0xac(%rsp)
  0x000000011034ba26: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034ba30: mov    0xdc(%rdi),%ebx
  0x000000011034ba36: add    $0x8,%ebx
  0x000000011034ba39: mov    %ebx,0xdc(%rdi)
  0x000000011034ba3f: movabs $0x126f18458,%rdi  ;   {metadata({method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034ba49: and    $0x0,%ebx
  0x000000011034ba4c: cmp    $0x0,%ebx
  0x000000011034ba4f: je     0x000000011034e091  ;*iconst_0
                                                ; - java.lang.String::split@0 (line 2336)

  0x000000011034ba55: mov    0xc(%rdx),%edi     ; implicit exception: dispatches to 0x000000011034e0a8
  0x000000011034ba58: shl    $0x3,%rdi          ;*getfield value
                                                ; - java.lang.String::split@3 (line 2337)

  0x000000011034ba5c: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - java.lang.String::split@6 (line 2337)
                                                ; implicit exception: dispatches to 0x000000011034e0ad
  0x000000011034ba5f: cmp    $0x1,%ebx
  0x000000011034ba62: movabs $0x127278e50,%rax  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034ba6c: movabs $0x108,%r8
  0x000000011034ba76: jne    0x000000011034ba86
  0x000000011034ba7c: movabs $0x118,%r8
  0x000000011034ba86: mov    (%rax,%r8,1),%r9
  0x000000011034ba8a: lea    0x1(%r9),%r9
  0x000000011034ba8e: mov    %r9,(%rax,%r8,1)
  0x000000011034ba92: jne    0x000000011034bd96  ;*if_icmpne
                                                ; - java.lang.String::split@8 (line 2337)

  0x000000011034ba98: mov    %rdx,%rax
  0x000000011034ba9b: movabs $0x127278e50,%r8   ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034baa5: mov    0x8(%rax),%eax
  0x000000011034baa8: shl    $0x3,%rax
  0x000000011034baac: cmp    0x130(%r8),%rax
  0x000000011034bab3: jne    0x000000011034bac2
  0x000000011034bab5: addq   $0x1,0x138(%r8)
  0x000000011034babd: jmpq   0x000000011034bb28
  0x000000011034bac2: cmp    0x140(%r8),%rax
  0x000000011034bac9: jne    0x000000011034bad8
  0x000000011034bacb: addq   $0x1,0x148(%r8)
  0x000000011034bad3: jmpq   0x000000011034bb28
  0x000000011034bad8: cmpq   $0x0,0x130(%r8)
  0x000000011034bae3: jne    0x000000011034bafc
  0x000000011034bae5: mov    %rax,0x130(%r8)
  0x000000011034baec: movq   $0x1,0x138(%r8)
  0x000000011034baf7: jmpq   0x000000011034bb28
  0x000000011034bafc: cmpq   $0x0,0x140(%r8)
  0x000000011034bb07: jne    0x000000011034bb20
  0x000000011034bb09: mov    %rax,0x140(%r8)
  0x000000011034bb10: movq   $0x1,0x148(%r8)
  0x000000011034bb1b: jmpq   0x000000011034bb28
  0x000000011034bb20: addq   $0x1,0x128(%r8)
  0x000000011034bb28: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bb32: mov    0xdc(%rax),%r8d
  0x000000011034bb39: add    $0x8,%r8d
  0x000000011034bb3d: mov    %r8d,0xdc(%rax)
  0x000000011034bb44: movabs $0x126f15db0,%rax  ;   {metadata({method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bb4e: and    $0x7ffff8,%r8d
  0x000000011034bb55: cmp    $0x0,%r8d
  0x000000011034bb59: je     0x000000011034e0b2
  0x000000011034bb5f: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bb69: incl   0x118(%rax)        ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ; - java.lang.String::split@15 (line 2338)

  0x000000011034bb6f: cmp    $0x0,%ebx
  0x000000011034bb72: movabs $0x1270989d8,%rbx  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bb7c: movabs $0x128,%rax
  0x000000011034bb86: jg     0x000000011034bb96
  0x000000011034bb8c: movabs $0x138,%rax
  0x000000011034bb96: mov    (%rbx,%rax,1),%r8
  0x000000011034bb9a: lea    0x1(%r8),%r8
  0x000000011034bb9e: mov    %r8,(%rbx,%rax,1)
  0x000000011034bba2: jle    0x000000011034e041  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ; - java.lang.String::split@15 (line 2338)

  0x000000011034bba8: cmpl   $0x0,0xc(%rdi)
  0x000000011034bbaf: jbe    0x000000011034e0c9
  0x000000011034bbb5: movzwl 0x10(%rdi),%edi    ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@15 (line 2338)

  0x000000011034bbb9: and    $0xffff,%edi
  0x000000011034bbbf: movabs $0x76ad95ef0,%rbx  ;   {oop(".$|()[{^?*+\")}
  0x000000011034bbc9: mov    %rbx,%rax
  0x000000011034bbcc: movabs $0x127278e50,%r8   ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034bbd6: mov    0x8(%rax),%eax
  0x000000011034bbd9: shl    $0x3,%rax
  0x000000011034bbdd: cmp    0x160(%r8),%rax
  0x000000011034bbe4: jne    0x000000011034bbf3
  0x000000011034bbe6: addq   $0x1,0x168(%r8)
  0x000000011034bbee: jmpq   0x000000011034bc59
  0x000000011034bbf3: cmp    0x170(%r8),%rax
  0x000000011034bbfa: jne    0x000000011034bc09
  0x000000011034bbfc: addq   $0x1,0x178(%r8)
  0x000000011034bc04: jmpq   0x000000011034bc59
  0x000000011034bc09: cmpq   $0x0,0x160(%r8)
  0x000000011034bc14: jne    0x000000011034bc2d
  0x000000011034bc16: mov    %rax,0x160(%r8)
  0x000000011034bc1d: movq   $0x1,0x168(%r8)
  0x000000011034bc28: jmpq   0x000000011034bc59
  0x000000011034bc2d: cmpq   $0x0,0x170(%r8)
  0x000000011034bc38: jne    0x000000011034bc51
  0x000000011034bc3a: mov    %rax,0x170(%r8)
  0x000000011034bc41: movq   $0x1,0x178(%r8)
  0x000000011034bc4c: jmpq   0x000000011034bc59
  0x000000011034bc51: addq   $0x1,0x158(%r8)
  0x000000011034bc59: movabs $0x12711ddb0,%rax  ;   {metadata(method data for {method} {0x0000000126f17098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x000000011034bc63: mov    0xdc(%rax),%r8d
  0x000000011034bc6a: add    $0x8,%r8d
  0x000000011034bc6e: mov    %r8d,0xdc(%rax)
  0x000000011034bc75: movabs $0x126f17098,%rax  ;   {metadata({method} {0x0000000126f17098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x000000011034bc7f: and    $0x7ffff8,%r8d
  0x000000011034bc86: cmp    $0x0,%r8d
  0x000000011034bc8a: je     0x000000011034e0d6
  0x000000011034bc90: mov    %rbx,%rax
  0x000000011034bc93: movabs $0x12711ddb0,%r8   ;   {metadata(method data for {method} {0x0000000126f17098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x000000011034bc9d: mov    0x8(%rax),%eax
  0x000000011034bca0: shl    $0x3,%rax
  0x000000011034bca4: cmp    0x110(%r8),%rax
  0x000000011034bcab: jne    0x000000011034bcba
  0x000000011034bcad: addq   $0x1,0x118(%r8)
  0x000000011034bcb5: jmpq   0x000000011034bd20
  0x000000011034bcba: cmp    0x120(%r8),%rax
  0x000000011034bcc1: jne    0x000000011034bcd0
  0x000000011034bcc3: addq   $0x1,0x128(%r8)
  0x000000011034bccb: jmpq   0x000000011034bd20
  0x000000011034bcd0: cmpq   $0x0,0x110(%r8)
  0x000000011034bcdb: jne    0x000000011034bcf4
  0x000000011034bcdd: mov    %rax,0x110(%r8)
  0x000000011034bce4: movq   $0x1,0x118(%r8)
  0x000000011034bcef: jmpq   0x000000011034bd20
  0x000000011034bcf4: cmpq   $0x0,0x120(%r8)
  0x000000011034bcff: jne    0x000000011034bd18
  0x000000011034bd01: mov    %rax,0x120(%r8)
  0x000000011034bd08: movq   $0x1,0x128(%r8)
  0x000000011034bd13: jmpq   0x000000011034bd20
  0x000000011034bd18: addq   $0x1,0x108(%r8)
  0x000000011034bd20: mov    %rdi,%rdx
  0x000000011034bd23: mov    $0x0,%ecx
  0x000000011034bd28: mov    %rbx,%rsi          ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)
                                                ; - java.lang.String::split@20 (line 2338)

  0x000000011034bd2b: mov    %edi,0xa8(%rsp)
  0x000000011034bd32: nop
  0x000000011034bd33: nop
  0x000000011034bd34: nop
  0x000000011034bd35: nop
  0x000000011034bd36: nop
  0x000000011034bd37: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [176]=Oop off=860}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)
                                                ; - java.lang.String::split@20 (line 2338)
                                                ;   {optimized virtual_call}
  0x000000011034bd3c: cmp    $0xffffffffffffffff,%eax
  0x000000011034bd3f: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034bd49: movabs $0x188,%rsi
  0x000000011034bd53: je     0x000000011034bd63
  0x000000011034bd59: movabs $0x198,%rsi
  0x000000011034bd63: mov    (%rdx,%rsi,1),%rdi
  0x000000011034bd67: lea    0x1(%rdi),%rdi
  0x000000011034bd6b: mov    %rdi,(%rdx,%rsi,1)
  0x000000011034bd6f: je     0x000000011034bd82  ;*if_icmpeq
                                                ; - java.lang.String::split@24 (line 2338)

  0x000000011034bd75: mov    0xb0(%rsp),%rdx
  0x000000011034bd7d: jmpq   0x000000011034bd96  ;*aload_1
                                                ; - java.lang.String::split@27 (line 2338)

  0x000000011034bd82: mov    0xa8(%rsp),%edi
  0x000000011034bd89: mov    0xb0(%rsp),%rdx
  0x000000011034bd91: jmpq   0x000000011034c1f6  ;*iload_3
                                                ; - java.lang.String::split@87 (line 2341)

  0x000000011034bd96: mov    %rdx,%rsi
  0x000000011034bd99: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034bda3: mov    0x8(%rsi),%esi
  0x000000011034bda6: shl    $0x3,%rsi
  0x000000011034bdaa: cmp    0x1b0(%rdi),%rsi
  0x000000011034bdb1: jne    0x000000011034bdc0
  0x000000011034bdb3: addq   $0x1,0x1b8(%rdi)
  0x000000011034bdbb: jmpq   0x000000011034be26
  0x000000011034bdc0: cmp    0x1c0(%rdi),%rsi
  0x000000011034bdc7: jne    0x000000011034bdd6
  0x000000011034bdc9: addq   $0x1,0x1c8(%rdi)
  0x000000011034bdd1: jmpq   0x000000011034be26
  0x000000011034bdd6: cmpq   $0x0,0x1b0(%rdi)
  0x000000011034bde1: jne    0x000000011034bdfa
  0x000000011034bde3: mov    %rsi,0x1b0(%rdi)
  0x000000011034bdea: movq   $0x1,0x1b8(%rdi)
  0x000000011034bdf5: jmpq   0x000000011034be26
  0x000000011034bdfa: cmpq   $0x0,0x1c0(%rdi)
  0x000000011034be05: jne    0x000000011034be1e
  0x000000011034be07: mov    %rsi,0x1c0(%rdi)
  0x000000011034be0e: movq   $0x1,0x1c8(%rdi)
  0x000000011034be19: jmpq   0x000000011034be26
  0x000000011034be1e: addq   $0x1,0x1a8(%rdi)
  0x000000011034be26: movabs $0x1270e7600,%rsi  ;   {metadata(method data for {method} {0x0000000126f15c60} 'length' '()I' in 'java/lang/String')}
  0x000000011034be30: mov    0xdc(%rsi),%edi
  0x000000011034be36: add    $0x8,%edi
  0x000000011034be39: mov    %edi,0xdc(%rsi)
  0x000000011034be3f: movabs $0x126f15c60,%rsi  ;   {metadata({method} {0x0000000126f15c60} 'length' '()I' in 'java/lang/String')}
  0x000000011034be49: and    $0x7ffff8,%edi
  0x000000011034be4f: cmp    $0x0,%edi
  0x000000011034be52: je     0x000000011034e0ed
  0x000000011034be58: mov    0xc(%rdx),%esi
  0x000000011034be5b: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)

  0x000000011034be5f: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)
                                                ; implicit exception: dispatches to 0x000000011034e104
  0x000000011034be62: cmp    $0x2,%edi
  0x000000011034be65: movabs $0x127278e50,%rax  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034be6f: movabs $0x1d8,%rcx
  0x000000011034be79: jne    0x000000011034be89
  0x000000011034be7f: movabs $0x1e8,%rcx
  0x000000011034be89: mov    (%rax,%rcx,1),%rbx
  0x000000011034be8d: lea    0x1(%rbx),%rbx
  0x000000011034be91: mov    %rbx,(%rax,%rcx,1)
  0x000000011034be95: jne    0x000000011034de36  ;*if_icmpne
                                                ; - java.lang.String::split@32 (line 2339)

  0x000000011034be9b: mov    %rdx,%rax
  0x000000011034be9e: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034bea8: mov    0x8(%rax),%eax
  0x000000011034beab: shl    $0x3,%rax
  0x000000011034beaf: cmp    0x200(%rcx),%rax
  0x000000011034beb6: jne    0x000000011034bec5
  0x000000011034beb8: addq   $0x1,0x208(%rcx)
  0x000000011034bec0: jmpq   0x000000011034bf2b
  0x000000011034bec5: cmp    0x210(%rcx),%rax
  0x000000011034becc: jne    0x000000011034bedb
  0x000000011034bece: addq   $0x1,0x218(%rcx)
  0x000000011034bed6: jmpq   0x000000011034bf2b
  0x000000011034bedb: cmpq   $0x0,0x200(%rcx)
  0x000000011034bee6: jne    0x000000011034beff
  0x000000011034bee8: mov    %rax,0x200(%rcx)
  0x000000011034beef: movq   $0x1,0x208(%rcx)
  0x000000011034befa: jmpq   0x000000011034bf2b
  0x000000011034beff: cmpq   $0x0,0x210(%rcx)
  0x000000011034bf0a: jne    0x000000011034bf23
  0x000000011034bf0c: mov    %rax,0x210(%rcx)
  0x000000011034bf13: movq   $0x1,0x218(%rcx)
  0x000000011034bf1e: jmpq   0x000000011034bf2b
  0x000000011034bf23: addq   $0x1,0x1f8(%rcx)
  0x000000011034bf2b: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bf35: mov    0xdc(%rax),%ecx
  0x000000011034bf3b: add    $0x8,%ecx
  0x000000011034bf3e: mov    %ecx,0xdc(%rax)
  0x000000011034bf44: movabs $0x126f15db0,%rax  ;   {metadata({method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bf4e: and    $0x7ffff8,%ecx
  0x000000011034bf54: cmp    $0x0,%ecx
  0x000000011034bf57: je     0x000000011034e109
  0x000000011034bf5d: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bf67: incl   0x118(%rax)        ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034bf6d: cmp    $0x0,%edi
  0x000000011034bf70: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034bf7a: movabs $0x128,%rcx
  0x000000011034bf84: jg     0x000000011034bf94
  0x000000011034bf8a: movabs $0x138,%rcx
  0x000000011034bf94: mov    (%rax,%rcx,1),%rbx
  0x000000011034bf98: lea    0x1(%rbx),%rbx
  0x000000011034bf9c: mov    %rbx,(%rax,%rcx,1)
  0x000000011034bfa0: jle    0x000000011034dff1  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034bfa6: cmpl   $0x0,0xc(%rsi)
  0x000000011034bfad: jbe    0x000000011034e120
  0x000000011034bfb3: movzwl 0x10(%rsi),%eax    ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034bfb7: and    $0xffff,%eax
  0x000000011034bfbd: cmp    $0x5c,%eax
  0x000000011034bfc0: movabs $0x127278e50,%rax  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034bfca: movabs $0x228,%rcx
  0x000000011034bfd4: jne    0x000000011034bfe4
  0x000000011034bfda: movabs $0x238,%rcx
  0x000000011034bfe4: mov    (%rax,%rcx,1),%rbx
  0x000000011034bfe8: lea    0x1(%rbx),%rbx
  0x000000011034bfec: mov    %rbx,(%rax,%rcx,1)
  0x000000011034bff0: jne    0x000000011034de36  ;*if_icmpne
                                                ; - java.lang.String::split@42 (line 2340)

  0x000000011034bff6: mov    %rdx,%rax
  0x000000011034bff9: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c003: mov    0x8(%rax),%eax
  0x000000011034c006: shl    $0x3,%rax
  0x000000011034c00a: cmp    0x250(%rcx),%rax
  0x000000011034c011: jne    0x000000011034c020
  0x000000011034c013: addq   $0x1,0x258(%rcx)
  0x000000011034c01b: jmpq   0x000000011034c086
  0x000000011034c020: cmp    0x260(%rcx),%rax
  0x000000011034c027: jne    0x000000011034c036
  0x000000011034c029: addq   $0x1,0x268(%rcx)
  0x000000011034c031: jmpq   0x000000011034c086
  0x000000011034c036: cmpq   $0x0,0x250(%rcx)
  0x000000011034c041: jne    0x000000011034c05a
  0x000000011034c043: mov    %rax,0x250(%rcx)
  0x000000011034c04a: movq   $0x1,0x258(%rcx)
  0x000000011034c055: jmpq   0x000000011034c086
  0x000000011034c05a: cmpq   $0x0,0x260(%rcx)
  0x000000011034c065: jne    0x000000011034c07e
  0x000000011034c067: mov    %rax,0x260(%rcx)
  0x000000011034c06e: movq   $0x1,0x268(%rcx)
  0x000000011034c079: jmpq   0x000000011034c086
  0x000000011034c07e: addq   $0x1,0x248(%rcx)
  0x000000011034c086: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034c090: mov    0xdc(%rax),%ecx
  0x000000011034c096: add    $0x8,%ecx
  0x000000011034c099: mov    %ecx,0xdc(%rax)
  0x000000011034c09f: movabs $0x126f15db0,%rax  ;   {metadata({method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034c0a9: and    $0x7ffff8,%ecx
  0x000000011034c0af: cmp    $0x0,%ecx
  0x000000011034c0b2: je     0x000000011034e12d
  0x000000011034c0b8: movabs $0x1270989d8,%rax  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034c0c2: incl   0x118(%rax)        ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034c0c8: cmp    $0x1,%edi
  0x000000011034c0cb: movabs $0x1270989d8,%rdi  ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034c0d5: movabs $0x128,%rax
  0x000000011034c0df: jg     0x000000011034c0ef
  0x000000011034c0e5: movabs $0x138,%rax
  0x000000011034c0ef: mov    (%rdi,%rax,1),%rcx
  0x000000011034c0f3: lea    0x1(%rcx),%rcx
  0x000000011034c0f7: mov    %rcx,(%rdi,%rax,1)
  0x000000011034c0fb: jle    0x000000011034dfa1  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034c101: cmpl   $0x1,0xc(%rsi)
  0x000000011034c108: jbe    0x000000011034e144
  0x000000011034c10e: movzwl 0x12(%rsi),%esi    ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034c112: and    $0xffff,%esi
  0x000000011034c118: mov    %rsi,%rdi
  0x000000011034c11b: sub    $0x30,%edi
  0x000000011034c11e: mov    $0x39,%eax
  0x000000011034c123: sub    %esi,%eax
  0x000000011034c125: or     %rax,%rdi
  0x000000011034c128: cmp    $0x0,%edi
  0x000000011034c12b: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c135: movabs $0x278,%rax
  0x000000011034c13f: jge    0x000000011034c14f
  0x000000011034c145: movabs $0x288,%rax
  0x000000011034c14f: mov    (%rdi,%rax,1),%rcx
  0x000000011034c153: lea    0x1(%rcx),%rcx
  0x000000011034c157: mov    %rcx,(%rdi,%rax,1)
  0x000000011034c15b: jge    0x000000011034de36  ;*ifge
                                                ; - java.lang.String::split@60 (line 2341)

  0x000000011034c161: mov    %rsi,%rdi
  0x000000011034c164: sub    $0x61,%edi
  0x000000011034c167: mov    $0x7a,%eax
  0x000000011034c16c: sub    %esi,%eax
  0x000000011034c16e: or     %rax,%rdi
  0x000000011034c171: cmp    $0x0,%edi
  0x000000011034c174: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c17e: movabs $0x298,%rax
  0x000000011034c188: jge    0x000000011034c198
  0x000000011034c18e: movabs $0x2a8,%rax
  0x000000011034c198: mov    (%rdi,%rax,1),%rcx
  0x000000011034c19c: lea    0x1(%rcx),%rcx
  0x000000011034c1a0: mov    %rcx,(%rdi,%rax,1)
  0x000000011034c1a4: jge    0x000000011034de36  ;*ifge
                                                ; - java.lang.String::split@72 (line 2341)

  0x000000011034c1aa: mov    %rsi,%rdi
  0x000000011034c1ad: sub    $0x41,%edi
  0x000000011034c1b0: mov    $0x5a,%eax
  0x000000011034c1b5: sub    %esi,%eax
  0x000000011034c1b7: or     %rax,%rdi
  0x000000011034c1ba: cmp    $0x0,%edi
  0x000000011034c1bd: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c1c7: movabs $0x2b8,%rax
  0x000000011034c1d1: jge    0x000000011034c1e1
  0x000000011034c1d7: movabs $0x2c8,%rax
  0x000000011034c1e1: mov    (%rdi,%rax,1),%rcx
  0x000000011034c1e5: lea    0x1(%rcx),%rcx
  0x000000011034c1e9: mov    %rcx,(%rdi,%rax,1)
  0x000000011034c1ed: jge    0x000000011034de36  ;*ifge
                                                ; - java.lang.String::split@84 (line 2341)

  0x000000011034c1f3: mov    %rsi,%rdi          ;*iload_3
                                                ; - java.lang.String::split@87 (line 2341)

  0x000000011034c1f6: cmp    $0xd800,%edi
  0x000000011034c1fc: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c206: movabs $0x2d8,%rax
  0x000000011034c210: jl     0x000000011034c220
  0x000000011034c216: movabs $0x2e8,%rax
  0x000000011034c220: mov    (%rsi,%rax,1),%rcx
  0x000000011034c224: lea    0x1(%rcx),%rcx
  0x000000011034c228: mov    %rcx,(%rsi,%rax,1)
  0x000000011034c22c: jl     0x000000011034c26e  ;*if_icmplt
                                                ; - java.lang.String::split@90 (line 2341)

  0x000000011034c232: cmp    $0xdfff,%edi
  0x000000011034c238: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c242: movabs $0x2f8,%rax
  0x000000011034c24c: jle    0x000000011034c25c
  0x000000011034c252: movabs $0x308,%rax
  0x000000011034c25c: mov    (%rsi,%rax,1),%rcx
  0x000000011034c260: lea    0x1(%rcx),%rcx
  0x000000011034c264: mov    %rcx,(%rsi,%rax,1)
  0x000000011034c268: jle    0x000000011034de36  ;*if_icmple
                                                ; - java.lang.String::split@96 (line 2341)

  0x000000011034c26e: mov    0xac(%rsp),%ecx
  0x000000011034c275: cmp    $0x0,%ecx
  0x000000011034c278: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c282: movabs $0x318,%rsi
  0x000000011034c28c: jle    0x000000011034c29c
  0x000000011034c292: movabs $0x328,%rsi
  0x000000011034c29c: mov    (%rdx,%rsi,1),%rax
  0x000000011034c2a0: lea    0x1(%rax),%rax
  0x000000011034c2a4: mov    %rax,(%rdx,%rsi,1)
  0x000000011034c2a8: jle    0x000000011034c2c8  ;*ifle
                                                ; - java.lang.String::split@106 (line 2349)

  0x000000011034c2ae: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c2b8: incl   0x338(%rdx)
  0x000000011034c2be: mov    $0x1,%ebx
  0x000000011034c2c3: jmpq   0x000000011034c2cd  ;*goto
                                                ; - java.lang.String::split@110 (line 2349)

  0x000000011034c2c8: mov    $0x0,%ebx          ;*istore
                                                ; - java.lang.String::split@114 (line 2349)

  0x000000011034c2cd: data32 xchg %ax,%ax
  0x000000011034c2d0: jmpq   0x000000011034e160  ;   {no_reloc}
  0x000000011034c2d5: add    %al,(%rax)
  0x000000011034c2d7: add    %al,(%rax)
  0x000000011034c2d9: add    %cl,-0x39(%rbx,%rcx,4)
  0x000000011034c2dd: mov    0x60(%r15),%rax
  0x000000011034c2e1: lea    0x18(%rax),%rdi
  0x000000011034c2e5: cmp    0x70(%r15),%rdi
  0x000000011034c2e9: ja     0x000000011034e16a
  0x000000011034c2ef: mov    %rdi,0x60(%r15)
  0x000000011034c2f3: mov    0xa8(%rdx),%rcx
  0x000000011034c2fa: mov    %rcx,(%rax)
  0x000000011034c2fd: mov    %rdx,%rcx
  0x000000011034c300: shr    $0x3,%rcx
  0x000000011034c304: mov    %ecx,0x8(%rax)
  0x000000011034c307: xor    %rcx,%rcx
  0x000000011034c30a: mov    %ecx,0xc(%rax)
  0x000000011034c30d: xor    %rcx,%rcx
  0x000000011034c310: mov    %rcx,0x10(%rax)    ;*new  ; - java.lang.String::split@116 (line 2350)

  0x000000011034c314: mov    %rax,0xc8(%rsp)
  0x000000011034c31c: mov    %rax,%rdx
  0x000000011034c31f: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c329: addq   $0x1,0x350(%rcx)
  0x000000011034c331: movabs $0x12718a468,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3090} '<init>' '()V' in 'java/util/ArrayList')}
  0x000000011034c33b: mov    0xdc(%rdx),%ecx
  0x000000011034c341: add    $0x8,%ecx
  0x000000011034c344: mov    %ecx,0xdc(%rdx)
  0x000000011034c34a: movabs $0x126fe3090,%rdx  ;   {metadata({method} {0x0000000126fe3090} '<init>' '()V' in 'java/util/ArrayList')}
  0x000000011034c354: and    $0x7ffff8,%ecx
  0x000000011034c35a: cmp    $0x0,%ecx
  0x000000011034c35d: je     0x000000011034e177
  0x000000011034c363: mov    %rax,%rdx
  0x000000011034c366: movabs $0x12718a468,%rcx  ;   {metadata(method data for {method} {0x0000000126fe3090} '<init>' '()V' in 'java/util/ArrayList')}
  0x000000011034c370: addq   $0x1,0x108(%rcx)
  0x000000011034c378: movabs $0x12718a598,%rdx  ;   {metadata(method data for {method} {0x0000000126fd9908} '<init>' '()V' in 'java/util/AbstractList')}
  0x000000011034c382: mov    0xdc(%rdx),%ecx
  0x000000011034c388: add    $0x8,%ecx
  0x000000011034c38b: mov    %ecx,0xdc(%rdx)
  0x000000011034c391: movabs $0x126fd9908,%rdx  ;   {metadata({method} {0x0000000126fd9908} '<init>' '()V' in 'java/util/AbstractList')}
  0x000000011034c39b: and    $0x7ffff8,%ecx
  0x000000011034c3a1: cmp    $0x0,%ecx
  0x000000011034c3a4: je     0x000000011034e18e
  0x000000011034c3aa: mov    %rax,%rdx
  0x000000011034c3ad: movabs $0x12718a598,%rcx  ;   {metadata(method data for {method} {0x0000000126fd9908} '<init>' '()V' in 'java/util/AbstractList')}
  0x000000011034c3b7: addq   $0x1,0x108(%rcx)
  0x000000011034c3bf: movabs $0x12718a6c8,%rdx  ;   {metadata(method data for {method} {0x0000000126fdaca8} '<init>' '()V' in 'java/util/AbstractCollection')}
  0x000000011034c3c9: mov    0xdc(%rdx),%ecx
  0x000000011034c3cf: add    $0x8,%ecx
  0x000000011034c3d2: mov    %ecx,0xdc(%rdx)
  0x000000011034c3d8: movabs $0x126fdaca8,%rdx  ;   {metadata({method} {0x0000000126fdaca8} '<init>' '()V' in 'java/util/AbstractCollection')}
  0x000000011034c3e2: and    $0x7ffff8,%ecx
  0x000000011034c3e8: cmp    $0x0,%ecx
  0x000000011034c3eb: je     0x000000011034e1a5
  0x000000011034c3f1: mov    %rax,%rdx
  0x000000011034c3f4: movabs $0x12718a6c8,%rcx  ;   {metadata(method data for {method} {0x0000000126fdaca8} '<init>' '()V' in 'java/util/AbstractCollection')}
  0x000000011034c3fe: addq   $0x1,0x108(%rcx)
  0x000000011034c406: movabs $0x12708aa48,%rdx  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x000000011034c410: mov    0xdc(%rdx),%ecx
  0x000000011034c416: add    $0x8,%ecx
  0x000000011034c419: mov    %ecx,0xdc(%rdx)
  0x000000011034c41f: movabs $0x126f12480,%rdx  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x000000011034c429: and    $0x7ffff8,%ecx
  0x000000011034c42f: cmp    $0x0,%ecx
  0x000000011034c432: je     0x000000011034e1bc
  0x000000011034c438: movabs $0x76ab06e50,%rdx  ;   {oop(a 'java/lang/Object'[0] )}
  0x000000011034c442: movabs $0x76ab06e50,%r10  ;   {oop(a 'java/lang/Object'[0] )}
  0x000000011034c44c: shr    $0x3,%r10
  0x000000011034c450: mov    %r10d,0x14(%rax)
  0x000000011034c454: mov    %rax,%rdx
  0x000000011034c457: shr    $0x9,%rdx
  0x000000011034c45b: movabs $0x109ac3000,%rcx
  0x000000011034c465: movb   $0x0,(%rdx,%rcx,1)  ;*putfield elementData
                                                ; - java.util.ArrayList::<init>@8 (line 166)
                                                ; - java.lang.String::split@120 (line 2350)

  0x000000011034c469: mov    $0x0,%edi          ;*aload_0
                                                ; - java.lang.String::split@125 (line 2351)

  0x000000011034c46e: mov    %ebx,0xc0(%rsp)
  0x000000011034c475: data32 xchg %ax,%ax
  0x000000011034c478: mov    0xb8(%rsp),%rsi
  0x000000011034c480: mov    %rsi,%rdx
  0x000000011034c483: movabs $0x127278e50,%r9   ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c48d: mov    0x8(%rdx),%edx
  0x000000011034c490: shl    $0x3,%rdx
  0x000000011034c494: cmp    0x368(%r9),%rdx
  0x000000011034c49b: jne    0x000000011034c4aa
  0x000000011034c49d: addq   $0x1,0x370(%r9)
  0x000000011034c4a5: jmpq   0x000000011034c510
  0x000000011034c4aa: cmp    0x378(%r9),%rdx
  0x000000011034c4b1: jne    0x000000011034c4c0
  0x000000011034c4b3: addq   $0x1,0x380(%r9)
  0x000000011034c4bb: jmpq   0x000000011034c510
  0x000000011034c4c0: cmpq   $0x0,0x368(%r9)
  0x000000011034c4cb: jne    0x000000011034c4e4
  0x000000011034c4cd: mov    %rdx,0x368(%r9)
  0x000000011034c4d4: movq   $0x1,0x370(%r9)
  0x000000011034c4df: jmpq   0x000000011034c510
  0x000000011034c4e4: cmpq   $0x0,0x378(%r9)
  0x000000011034c4ef: jne    0x000000011034c508
  0x000000011034c4f1: mov    %rdx,0x378(%r9)
  0x000000011034c4f8: movq   $0x1,0x380(%r9)
  0x000000011034c503: jmpq   0x000000011034c510
  0x000000011034c508: addq   $0x1,0x360(%r9)
  0x000000011034c510: mov    %r8,%rdx
  0x000000011034c513: mov    %rdi,%rcx
  0x000000011034c516: mov    %rsi,%r11
  0x000000011034c519: mov    %r11,%rsi          ;*invokevirtual indexOf
                                                ; - java.lang.String::split@129 (line 2351)

  0x000000011034c51c: mov    %r8d,0xd0(%rsp)
  0x000000011034c524: mov    %edi,0xc4(%rsp)
  0x000000011034c52b: nop
  0x000000011034c52c: nop
  0x000000011034c52d: nop
  0x000000011034c52e: nop
  0x000000011034c52f: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [200]=Oop off=2900}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::split@129 (line 2351)
                                                ;   {optimized virtual_call}
  0x000000011034c534: cmp    $0xffffffffffffffff,%eax
  0x000000011034c537: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c541: movabs $0x390,%rcx
  0x000000011034c54b: je     0x000000011034c55b
  0x000000011034c551: movabs $0x3a0,%rcx
  0x000000011034c55b: mov    (%rdx,%rcx,1),%rsi
  0x000000011034c55f: lea    0x1(%rsi),%rsi
  0x000000011034c563: mov    %rsi,(%rdx,%rcx,1)
  0x000000011034c567: je     0x000000011034cb17  ;*if_icmpeq
                                                ; - java.lang.String::split@136 (line 2351)

  0x000000011034c56d: mov    0xc0(%rsp),%ebx
  0x000000011034c574: cmp    $0x0,%ebx
  0x000000011034c577: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c581: movabs $0x3b0,%rcx
  0x000000011034c58b: je     0x000000011034c59b
  0x000000011034c591: movabs $0x3c0,%rcx
  0x000000011034c59b: mov    (%rdx,%rcx,1),%rsi
  0x000000011034c59f: lea    0x1(%rsi),%rsi
  0x000000011034c5a3: mov    %rsi,(%rdx,%rcx,1)
  0x000000011034c5a7: je     0x000000011034c61f  ;*ifeq
                                                ; - java.lang.String::split@141 (line 2352)

  0x000000011034c5ad: mov    0xc8(%rsp),%rdi
  0x000000011034c5b5: mov    %rdi,%rdx
  0x000000011034c5b8: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c5c2: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034c5cc: mov    %r10,0x3d8(%rcx)
  0x000000011034c5d3: addq   $0x1,0x3e0(%rcx)
  0x000000011034c5db: mov    0x10(%rdi),%edx    ;*getfield size
                                                ; - java.util.ArrayList::size@1 (line 282)
                                                ; - java.lang.String::split@146 (line 2352)

  0x000000011034c5de: mov    0xac(%rsp),%ecx
  0x000000011034c5e5: dec    %ecx
  0x000000011034c5e7: cmp    %ecx,%edx
  0x000000011034c5e9: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c5f3: movabs $0x400,%rcx
  0x000000011034c5fd: jge    0x000000011034c60d
  0x000000011034c603: movabs $0x410,%rcx
  0x000000011034c60d: mov    (%rdx,%rcx,1),%rsi
  0x000000011034c611: lea    0x1(%rsi),%rsi
  0x000000011034c615: mov    %rsi,(%rdx,%rcx,1)
  0x000000011034c619: jge    0x000000011034cb33  ;*if_icmpge
                                                ; - java.lang.String::split@152 (line 2352)

  0x000000011034c61f: mov    %ebx,0xc0(%rsp)
  0x000000011034c626: mov    0xb8(%rsp),%rsi
  0x000000011034c62e: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c638: mov    0x8(%rsi),%esi
  0x000000011034c63b: shl    $0x3,%rsi
  0x000000011034c63f: cmp    0x428(%rdx),%rsi
  0x000000011034c646: jne    0x000000011034c655
  0x000000011034c648: addq   $0x1,0x430(%rdx)
  0x000000011034c650: jmpq   0x000000011034c6bb
  0x000000011034c655: cmp    0x438(%rdx),%rsi
  0x000000011034c65c: jne    0x000000011034c66b
  0x000000011034c65e: addq   $0x1,0x440(%rdx)
  0x000000011034c666: jmpq   0x000000011034c6bb
  0x000000011034c66b: cmpq   $0x0,0x428(%rdx)
  0x000000011034c676: jne    0x000000011034c68f
  0x000000011034c678: mov    %rsi,0x428(%rdx)
  0x000000011034c67f: movq   $0x1,0x430(%rdx)
  0x000000011034c68a: jmpq   0x000000011034c6bb
  0x000000011034c68f: cmpq   $0x0,0x438(%rdx)
  0x000000011034c69a: jne    0x000000011034c6b3
  0x000000011034c69c: mov    %rsi,0x438(%rdx)
  0x000000011034c6a3: movq   $0x1,0x440(%rdx)
  0x000000011034c6ae: jmpq   0x000000011034c6bb
  0x000000011034c6b3: addq   $0x1,0x420(%rdx)
  0x000000011034c6bb: mov    0xc4(%rsp),%edx
  0x000000011034c6c2: mov    %rax,%rcx
  0x000000011034c6c5: mov    0xb8(%rsp),%rsi    ;*invokevirtual substring
                                                ; - java.lang.String::split@162 (line 2353)

  0x000000011034c6cd: mov    %eax,0xd4(%rsp)
  0x000000011034c6d4: nop
  0x000000011034c6d5: nop
  0x000000011034c6d6: nop
  0x000000011034c6d7: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [200]=Oop off=3324}
                                                ;*invokevirtual substring
                                                ; - java.lang.String::split@162 (line 2353)
                                                ;   {optimized virtual_call}
  0x000000011034c6dc: mov    0xc8(%rsp),%rdx
  0x000000011034c6e4: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034c6ee: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034c6f8: mov    %r10,0x458(%rsi)
  0x000000011034c6ff: addq   $0x1,0x460(%rsi)
  0x000000011034c707: movabs $0x1271b8088,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034c711: mov    0xdc(%rdx),%esi
  0x000000011034c717: add    $0x8,%esi
  0x000000011034c71a: mov    %esi,0xdc(%rdx)
  0x000000011034c720: movabs $0x126fe3ea8,%rdx  ;   {metadata({method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034c72a: and    $0x7ffff8,%esi
  0x000000011034c730: cmp    $0x0,%esi
  0x000000011034c733: je     0x000000011034e1d3
  0x000000011034c739: mov    0xc8(%rsp),%rdi
  0x000000011034c741: mov    0x10(%rdi),%edx    ;*getfield size
                                                ; - java.util.ArrayList::add@2 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c744: inc    %edx
  0x000000011034c746: mov    %rdi,%rsi
  0x000000011034c749: movabs $0x1271b8088,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034c753: addq   $0x1,0x108(%rbx)
  0x000000011034c75b: movabs $0x1271b8218,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c765: mov    0xdc(%rsi),%ebx
  0x000000011034c76b: add    $0x8,%ebx
  0x000000011034c76e: mov    %ebx,0xdc(%rsi)
  0x000000011034c774: movabs $0x126fe3420,%rsi  ;   {metadata({method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c77e: and    $0x7ffff8,%ebx
  0x000000011034c784: cmp    $0x0,%ebx
  0x000000011034c787: je     0x000000011034e1ea
  0x000000011034c78d: mov    0x14(%rdi),%esi
  0x000000011034c790: shl    $0x3,%rsi          ;*getfield elementData
                                                ; - java.util.ArrayList::ensureCapacityInternal@2 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c794: movabs $0x1271b8218,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c79e: addq   $0x1,0x108(%rbx)
  0x000000011034c7a6: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034c7b0: mov    0xdc(%rbx),%ecx
  0x000000011034c7b6: add    $0x8,%ecx
  0x000000011034c7b9: mov    %ecx,0xdc(%rbx)
  0x000000011034c7bf: movabs $0x126fe3380,%rbx  ;   {metadata({method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034c7c9: and    $0x7ffff8,%ecx
  0x000000011034c7cf: cmp    $0x0,%ecx
  0x000000011034c7d2: je     0x000000011034e201
  0x000000011034c7d8: movabs $0x76ab06e50,%rbx  ;   {oop(a 'java/lang/Object'[0] )}
  0x000000011034c7e2: cmp    %rbx,%rsi
  0x000000011034c7e5: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034c7ef: movabs $0x108,%rcx
  0x000000011034c7f9: jne    0x000000011034c809
  0x000000011034c7ff: movabs $0x118,%rcx
  0x000000011034c809: mov    (%rbx,%rcx,1),%r8
  0x000000011034c80d: lea    0x1(%r8),%r8
  0x000000011034c811: mov    %r8,(%rbx,%rcx,1)
  0x000000011034c815: jne    0x000000011034c8ad  ;*if_acmpne
                                                ; - java.util.ArrayList::calculateCapacity@4 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c81b: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034c825: addq   $0x1,0x128(%rbx)
  0x000000011034c82d: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034c837: mov    0xdc(%rbx),%ecx
  0x000000011034c83d: add    $0x8,%ecx
  0x000000011034c840: mov    %ecx,0xdc(%rbx)
  0x000000011034c846: movabs $0x1270088c8,%rbx  ;   {metadata({method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034c850: and    $0x7ffff8,%ecx
  0x000000011034c856: cmp    $0x0,%ecx
  0x000000011034c859: je     0x000000011034e218
  0x000000011034c85f: cmp    $0xa,%edx
  0x000000011034c862: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034c86c: movabs $0x108,%rcx
  0x000000011034c876: jg     0x000000011034c886
  0x000000011034c87c: movabs $0x118,%rcx
  0x000000011034c886: mov    (%rbx,%rcx,1),%r8
  0x000000011034c88a: lea    0x1(%r8),%r8
  0x000000011034c88e: mov    %r8,(%rbx,%rcx,1)
  0x000000011034c892: jg     0x000000011034c8ad  ;*if_icmplt
                                                ; - java.lang.Math::max@2 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c898: movabs $0x1271323e0,%rdx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034c8a2: incl   0x128(%rdx)
  0x000000011034c8a8: mov    $0xa,%edx          ;*goto
                                                ; - java.lang.Math::max@6 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c8ad: mov    %rdi,%rbx
  0x000000011034c8b0: movabs $0x1271b8218,%rcx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c8ba: addq   $0x1,0x118(%rcx)
  0x000000011034c8c2: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c8cc: mov    0xdc(%rbx),%ecx
  0x000000011034c8d2: add    $0x8,%ecx
  0x000000011034c8d5: mov    %ecx,0xdc(%rbx)
  0x000000011034c8db: movabs $0x126fe34d0,%rbx  ;   {metadata({method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c8e5: and    $0x7ffff8,%ecx
  0x000000011034c8eb: cmp    $0x0,%ecx
  0x000000011034c8ee: je     0x000000011034e22f
  0x000000011034c8f4: mov    0xc(%rdi),%ebx     ;*getfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@2 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c8f7: inc    %ebx
  0x000000011034c8f9: mov    %ebx,0xc(%rdi)     ;*putfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@7 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c8fc: mov    0xc(%rsi),%esi     ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ; implicit exception: dispatches to 0x000000011034e246
  0x000000011034c8ff: mov    %rdx,%rbx
  0x000000011034c902: sub    %esi,%ebx
  0x000000011034c904: cmp    $0x0,%ebx
  0x000000011034c907: movabs $0x1271b8508,%rsi  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c911: movabs $0x108,%rbx
  0x000000011034c91b: jle    0x000000011034c92b
  0x000000011034c921: movabs $0x118,%rbx
  0x000000011034c92b: mov    (%rsi,%rbx,1),%rcx
  0x000000011034c92f: lea    0x1(%rcx),%rcx
  0x000000011034c933: mov    %rcx,(%rsi,%rbx,1)
  0x000000011034c937: mov    %rax,0xd8(%rsp)
  0x000000011034c93f: jle    0x000000011034c964  ;*ifle
                                                ; - java.util.ArrayList::ensureExplicitCapacity@17 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c945: mov    %rdi,%rsi
  0x000000011034c948: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034c952: addq   $0x1,0x128(%rbx)
  0x000000011034c95a: mov    %rdi,%rsi          ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c95d: nop
  0x000000011034c95e: nop
  0x000000011034c95f: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [216]=Oop [200]=Oop off=3972}
                                                ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {optimized virtual_call}
  0x000000011034c964: mov    0xd8(%rsp),%rdx
  0x000000011034c96c: mov    0xc8(%rsp),%rax
  0x000000011034c974: mov    0x14(%rax),%ecx
  0x000000011034c977: shl    $0x3,%rcx          ;*getfield elementData
                                                ; - java.util.ArrayList::add@11 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c97b: mov    0x10(%rax),%esi    ;*getfield size
                                                ; - java.util.ArrayList::add@16 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c97e: mov    %rsi,%rdi
  0x000000011034c981: inc    %edi
  0x000000011034c983: mov    %edi,0x10(%rax)    ;*putfield size
                                                ; - java.util.ArrayList::add@22 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034c986: movslq %esi,%rdi
  0x000000011034c989: lea    0x10(%rcx,%rdi,4),%rdi
  0x000000011034c98e: cmp    0xc(%rcx),%esi     ; implicit exception: dispatches to 0x000000011034e24b
  0x000000011034c991: jae    0x000000011034e255
  0x000000011034c997: cmp    $0x0,%rdx
  0x000000011034c99b: jne    0x000000011034c9b6
  0x000000011034c99d: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034c9a7: orl    $0x100,0x110(%rsi)
  0x000000011034c9b1: jmpq   0x000000011034ca9a
  0x000000011034c9b6: mov    0x8(%rcx),%ecx     ; implicit exception: dispatches to 0x000000011034e25e
  0x000000011034c9b9: shl    $0x3,%rcx
  0x000000011034c9bd: mov    0x8(%rdx),%esi
  0x000000011034c9c0: shl    $0x3,%rsi
  0x000000011034c9c4: mov    0xe8(%rcx),%rcx
  0x000000011034c9cb: cmp    %rcx,%rsi
  0x000000011034c9ce: je     0x000000011034c9fc
  0x000000011034c9d4: mov    0xc(%rcx),%ebx
  0x000000011034c9d7: cmp    (%rsi,%rbx,1),%rcx
  0x000000011034c9db: je     0x000000011034c9fc
  0x000000011034c9e1: cmp    $0x18,%ebx
  0x000000011034c9e4: jne    0x000000011034ca83
  0x000000011034c9ea: push   %rsi
  0x000000011034c9eb: push   %rcx
  0x000000011034c9ec: callq  0x00000001100108a0  ;   {runtime_call}
  0x000000011034c9f1: pop    %rsi
  0x000000011034c9f2: pop    %rcx
  0x000000011034c9f3: cmp    $0x0,%ecx
  0x000000011034c9f6: je     0x000000011034ca83
  0x000000011034c9fc: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034ca06: mov    0x8(%rdx),%ecx
  0x000000011034ca09: shl    $0x3,%rcx
  0x000000011034ca0d: cmp    0x120(%rsi),%rcx
  0x000000011034ca14: jne    0x000000011034ca23
  0x000000011034ca16: addq   $0x1,0x128(%rsi)
  0x000000011034ca1e: jmpq   0x000000011034ca9a
  0x000000011034ca23: cmp    0x130(%rsi),%rcx
  0x000000011034ca2a: jne    0x000000011034ca39
  0x000000011034ca2c: addq   $0x1,0x138(%rsi)
  0x000000011034ca34: jmpq   0x000000011034ca9a
  0x000000011034ca39: cmpq   $0x0,0x120(%rsi)
  0x000000011034ca44: jne    0x000000011034ca5d
  0x000000011034ca46: mov    %rcx,0x120(%rsi)
  0x000000011034ca4d: movq   $0x1,0x128(%rsi)
  0x000000011034ca58: jmpq   0x000000011034ca9a
  0x000000011034ca5d: cmpq   $0x0,0x130(%rsi)
  0x000000011034ca68: jne    0x000000011034ca81
  0x000000011034ca6a: mov    %rcx,0x130(%rsi)
  0x000000011034ca71: movq   $0x1,0x138(%rsi)
  0x000000011034ca7c: jmpq   0x000000011034ca9a
  0x000000011034ca81: jmp    0x000000011034ca9a
  0x000000011034ca83: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034ca8d: subq   $0x1,0x118(%rsi)
  0x000000011034ca95: jmpq   0x000000011034e263
  0x000000011034ca9a: mov    %rdx,%r10
  0x000000011034ca9d: shr    $0x3,%r10
  0x000000011034caa1: mov    %r10d,(%rdi)
  0x000000011034caa4: shr    $0x9,%rdi
  0x000000011034caa8: movabs $0x109ac3000,%rdx
  0x000000011034cab2: movb   $0x0,(%rdi,%rdx,1)  ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)

  0x000000011034cab6: mov    0xd4(%rsp),%edx
  0x000000011034cabd: inc    %edx
  0x000000011034cabf: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cac9: mov    0xe0(%rcx),%esi
  0x000000011034cacf: add    $0x8,%esi
  0x000000011034cad2: mov    %esi,0xe0(%rcx)
  0x000000011034cad8: movabs $0x126f18458,%rcx  ;   {metadata({method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cae2: and    $0xfff8,%esi
  0x000000011034cae8: cmp    $0x0,%esi
  0x000000011034caeb: je     0x000000011034e26c  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=4369}
                                                ;*goto
                                                ; - java.lang.String::split@175 (line 2354)

  0x000000011034caf1: test   %eax,-0x37339f7(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x000000011034caf7: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cb01: incl   0x480(%rcx)
  0x000000011034cb07: mov    %rdx,%rdi
  0x000000011034cb0a: mov    0xd0(%rsp),%r8d
  0x000000011034cb12: jmpq   0x000000011034c478  ;*goto
                                                ; - java.lang.String::split@175 (line 2354)

  0x000000011034cb17: mov    0xc4(%rsp),%edi
  0x000000011034cb1e: mov    0xc8(%rsp),%rax
  0x000000011034cb26: mov    0xb8(%rsp),%rsi
  0x000000011034cb2e: jmpq   0x000000011034cff3  ;*iload
                                                ; - java.lang.String::split@205 (line 2363)

  0x000000011034cb33: mov    %ebx,0xc0(%rsp)
  0x000000011034cb3a: mov    0xb8(%rsp),%rsi
  0x000000011034cb42: mov    0xc4(%rsp),%edi
  0x000000011034cb49: mov    0xc(%rsi),%edx
  0x000000011034cb4c: shl    $0x3,%rdx          ;*getfield value
                                                ; - java.lang.String::split@184 (line 2357)

  0x000000011034cb50: mov    0xc(%rdx),%ecx     ;*arraylength
                                                ; - java.lang.String::split@187 (line 2357)
                                                ; implicit exception: dispatches to 0x000000011034e283
  0x000000011034cb53: mov    %rsi,%rdx
  0x000000011034cb56: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cb60: mov    0x8(%rdx),%edx
  0x000000011034cb63: shl    $0x3,%rdx
  0x000000011034cb67: cmp    0x4a0(%rbx),%rdx
  0x000000011034cb6e: jne    0x000000011034cb7d
  0x000000011034cb70: addq   $0x1,0x4a8(%rbx)
  0x000000011034cb78: jmpq   0x000000011034cbe3
  0x000000011034cb7d: cmp    0x4b0(%rbx),%rdx
  0x000000011034cb84: jne    0x000000011034cb93
  0x000000011034cb86: addq   $0x1,0x4b8(%rbx)
  0x000000011034cb8e: jmpq   0x000000011034cbe3
  0x000000011034cb93: cmpq   $0x0,0x4a0(%rbx)
  0x000000011034cb9e: jne    0x000000011034cbb7
  0x000000011034cba0: mov    %rdx,0x4a0(%rbx)
  0x000000011034cba7: movq   $0x1,0x4a8(%rbx)
  0x000000011034cbb2: jmpq   0x000000011034cbe3
  0x000000011034cbb7: cmpq   $0x0,0x4b0(%rbx)
  0x000000011034cbc2: jne    0x000000011034cbdb
  0x000000011034cbc4: mov    %rdx,0x4b0(%rbx)
  0x000000011034cbcb: movq   $0x1,0x4b8(%rbx)
  0x000000011034cbd6: jmpq   0x000000011034cbe3
  0x000000011034cbdb: addq   $0x1,0x498(%rbx)
  0x000000011034cbe3: mov    %rdi,%rdx
  0x000000011034cbe6: mov    %rsi,%rdi
  0x000000011034cbe9: mov    %rdi,%rsi          ;*invokevirtual substring
                                                ; - java.lang.String::split@188 (line 2357)

  0x000000011034cbec: nop
  0x000000011034cbed: nop
  0x000000011034cbee: nop
  0x000000011034cbef: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [200]=Oop off=4628}
                                                ;*invokevirtual substring
                                                ; - java.lang.String::split@188 (line 2357)
                                                ;   {optimized virtual_call}
  0x000000011034cbf4: mov    0xc8(%rsp),%rdx
  0x000000011034cbfc: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cc06: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034cc10: mov    %r10,0x4d0(%rsi)
  0x000000011034cc17: addq   $0x1,0x4d8(%rsi)
  0x000000011034cc1f: movabs $0x1271b8088,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cc29: mov    0xdc(%rdx),%esi
  0x000000011034cc2f: add    $0x8,%esi
  0x000000011034cc32: mov    %esi,0xdc(%rdx)
  0x000000011034cc38: movabs $0x126fe3ea8,%rdx  ;   {metadata({method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cc42: and    $0x7ffff8,%esi
  0x000000011034cc48: cmp    $0x0,%esi
  0x000000011034cc4b: je     0x000000011034e288
  0x000000011034cc51: mov    0xc8(%rsp),%rdi
  0x000000011034cc59: mov    0x10(%rdi),%edx    ;*getfield size
                                                ; - java.util.ArrayList::add@2 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034cc5c: inc    %edx
  0x000000011034cc5e: mov    %rdi,%rsi
  0x000000011034cc61: movabs $0x1271b8088,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cc6b: addq   $0x1,0x108(%rbx)
  0x000000011034cc73: movabs $0x1271b8218,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034cc7d: mov    0xdc(%rsi),%ebx
  0x000000011034cc83: add    $0x8,%ebx
  0x000000011034cc86: mov    %ebx,0xdc(%rsi)
  0x000000011034cc8c: movabs $0x126fe3420,%rsi  ;   {metadata({method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034cc96: and    $0x7ffff8,%ebx
  0x000000011034cc9c: cmp    $0x0,%ebx
  0x000000011034cc9f: je     0x000000011034e29f
  0x000000011034cca5: mov    0x14(%rdi),%esi
  0x000000011034cca8: shl    $0x3,%rsi          ;*getfield elementData
                                                ; - java.util.ArrayList::ensureCapacityInternal@2 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ccac: movabs $0x1271b8218,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034ccb6: addq   $0x1,0x108(%rbx)
  0x000000011034ccbe: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034ccc8: mov    0xdc(%rbx),%ecx
  0x000000011034ccce: add    $0x8,%ecx
  0x000000011034ccd1: mov    %ecx,0xdc(%rbx)
  0x000000011034ccd7: movabs $0x126fe3380,%rbx  ;   {metadata({method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034cce1: and    $0x7ffff8,%ecx
  0x000000011034cce7: cmp    $0x0,%ecx
  0x000000011034ccea: je     0x000000011034e2b6
  0x000000011034ccf0: movabs $0x76ab06e50,%rbx  ;   {oop(a 'java/lang/Object'[0] )}
  0x000000011034ccfa: cmp    %rbx,%rsi
  0x000000011034ccfd: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034cd07: movabs $0x108,%rcx
  0x000000011034cd11: jne    0x000000011034cd21
  0x000000011034cd17: movabs $0x118,%rcx
  0x000000011034cd21: mov    (%rbx,%rcx,1),%r8
  0x000000011034cd25: lea    0x1(%r8),%r8
  0x000000011034cd29: mov    %r8,(%rbx,%rcx,1)
  0x000000011034cd2d: jne    0x000000011034cdc5  ;*if_acmpne
                                                ; - java.util.ArrayList::calculateCapacity@4 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034cd33: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034cd3d: addq   $0x1,0x128(%rbx)
  0x000000011034cd45: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034cd4f: mov    0xdc(%rbx),%ecx
  0x000000011034cd55: add    $0x8,%ecx
  0x000000011034cd58: mov    %ecx,0xdc(%rbx)
  0x000000011034cd5e: movabs $0x1270088c8,%rbx  ;   {metadata({method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034cd68: and    $0x7ffff8,%ecx
  0x000000011034cd6e: cmp    $0x0,%ecx
  0x000000011034cd71: je     0x000000011034e2cd
  0x000000011034cd77: cmp    $0xa,%edx
  0x000000011034cd7a: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034cd84: movabs $0x108,%rcx
  0x000000011034cd8e: jg     0x000000011034cd9e
  0x000000011034cd94: movabs $0x118,%rcx
  0x000000011034cd9e: mov    (%rbx,%rcx,1),%r8
  0x000000011034cda2: lea    0x1(%r8),%r8
  0x000000011034cda6: mov    %r8,(%rbx,%rcx,1)
  0x000000011034cdaa: jg     0x000000011034cdc5  ;*if_icmplt
                                                ; - java.lang.Math::max@2 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034cdb0: movabs $0x1271323e0,%rdx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034cdba: incl   0x128(%rdx)
  0x000000011034cdc0: mov    $0xa,%edx          ;*goto
                                                ; - java.lang.Math::max@6 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034cdc5: mov    %rdi,%rbx
  0x000000011034cdc8: movabs $0x1271b8218,%rcx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034cdd2: addq   $0x1,0x118(%rcx)
  0x000000011034cdda: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034cde4: mov    0xdc(%rbx),%ecx
  0x000000011034cdea: add    $0x8,%ecx
  0x000000011034cded: mov    %ecx,0xdc(%rbx)
  0x000000011034cdf3: movabs $0x126fe34d0,%rbx  ;   {metadata({method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034cdfd: and    $0x7ffff8,%ecx
  0x000000011034ce03: cmp    $0x0,%ecx
  0x000000011034ce06: je     0x000000011034e2e4
  0x000000011034ce0c: mov    0xc(%rdi),%ebx     ;*getfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@2 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce0f: inc    %ebx
  0x000000011034ce11: mov    %ebx,0xc(%rdi)     ;*putfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@7 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce14: mov    0xc(%rsi),%esi     ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ; implicit exception: dispatches to 0x000000011034e2fb
  0x000000011034ce17: mov    %rdx,%rbx
  0x000000011034ce1a: sub    %esi,%ebx
  0x000000011034ce1c: cmp    $0x0,%ebx
  0x000000011034ce1f: movabs $0x1271b8508,%rsi  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034ce29: movabs $0x108,%rbx
  0x000000011034ce33: jle    0x000000011034ce43
  0x000000011034ce39: movabs $0x118,%rbx
  0x000000011034ce43: mov    (%rsi,%rbx,1),%rcx
  0x000000011034ce47: lea    0x1(%rcx),%rcx
  0x000000011034ce4b: mov    %rcx,(%rsi,%rbx,1)
  0x000000011034ce4f: mov    %rax,0xe0(%rsp)
  0x000000011034ce57: jle    0x000000011034ce7c  ;*ifle
                                                ; - java.util.ArrayList::ensureExplicitCapacity@17 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce5d: mov    %rdi,%rsi
  0x000000011034ce60: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034ce6a: addq   $0x1,0x128(%rbx)
  0x000000011034ce72: mov    %rdi,%rsi          ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce75: nop
  0x000000011034ce76: nop
  0x000000011034ce77: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [200]=Oop [224]=Oop off=5276}
                                                ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {optimized virtual_call}
  0x000000011034ce7c: mov    0xe0(%rsp),%rdx
  0x000000011034ce84: mov    0xc8(%rsp),%rax
  0x000000011034ce8c: mov    0x14(%rax),%ecx
  0x000000011034ce8f: shl    $0x3,%rcx          ;*getfield elementData
                                                ; - java.util.ArrayList::add@11 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce93: mov    0x10(%rax),%esi    ;*getfield size
                                                ; - java.util.ArrayList::add@16 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce96: mov    %rsi,%rdi
  0x000000011034ce99: inc    %edi
  0x000000011034ce9b: mov    %edi,0x10(%rax)    ;*putfield size
                                                ; - java.util.ArrayList::add@22 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034ce9e: movslq %esi,%rdi
  0x000000011034cea1: lea    0x10(%rcx,%rdi,4),%rdi
  0x000000011034cea6: cmp    0xc(%rcx),%esi     ; implicit exception: dispatches to 0x000000011034e300
  0x000000011034cea9: jae    0x000000011034e30a
  0x000000011034ceaf: cmp    $0x0,%rdx
  0x000000011034ceb3: jne    0x000000011034cece
  0x000000011034ceb5: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cebf: orl    $0x100,0x110(%rsi)
  0x000000011034cec9: jmpq   0x000000011034cfb2
  0x000000011034cece: mov    0x8(%rcx),%ecx     ; implicit exception: dispatches to 0x000000011034e313
  0x000000011034ced1: shl    $0x3,%rcx
  0x000000011034ced5: mov    0x8(%rdx),%esi
  0x000000011034ced8: shl    $0x3,%rsi
  0x000000011034cedc: mov    0xe8(%rcx),%rcx
  0x000000011034cee3: cmp    %rcx,%rsi
  0x000000011034cee6: je     0x000000011034cf14
  0x000000011034ceec: mov    0xc(%rcx),%ebx
  0x000000011034ceef: cmp    (%rsi,%rbx,1),%rcx
  0x000000011034cef3: je     0x000000011034cf14
  0x000000011034cef9: cmp    $0x18,%ebx
  0x000000011034cefc: jne    0x000000011034cf9b
  0x000000011034cf02: push   %rsi
  0x000000011034cf03: push   %rcx
  0x000000011034cf04: callq  0x00000001100108a0  ;   {runtime_call}
  0x000000011034cf09: pop    %rsi
  0x000000011034cf0a: pop    %rcx
  0x000000011034cf0b: cmp    $0x0,%ecx
  0x000000011034cf0e: je     0x000000011034cf9b
  0x000000011034cf14: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cf1e: mov    0x8(%rdx),%ecx
  0x000000011034cf21: shl    $0x3,%rcx
  0x000000011034cf25: cmp    0x120(%rsi),%rcx
  0x000000011034cf2c: jne    0x000000011034cf3b
  0x000000011034cf2e: addq   $0x1,0x128(%rsi)
  0x000000011034cf36: jmpq   0x000000011034cfb2
  0x000000011034cf3b: cmp    0x130(%rsi),%rcx
  0x000000011034cf42: jne    0x000000011034cf51
  0x000000011034cf44: addq   $0x1,0x138(%rsi)
  0x000000011034cf4c: jmpq   0x000000011034cfb2
  0x000000011034cf51: cmpq   $0x0,0x120(%rsi)
  0x000000011034cf5c: jne    0x000000011034cf75
  0x000000011034cf5e: mov    %rcx,0x120(%rsi)
  0x000000011034cf65: movq   $0x1,0x128(%rsi)
  0x000000011034cf70: jmpq   0x000000011034cfb2
  0x000000011034cf75: cmpq   $0x0,0x130(%rsi)
  0x000000011034cf80: jne    0x000000011034cf99
  0x000000011034cf82: mov    %rcx,0x130(%rsi)
  0x000000011034cf89: movq   $0x1,0x138(%rsi)
  0x000000011034cf94: jmpq   0x000000011034cfb2
  0x000000011034cf99: jmp    0x000000011034cfb2
  0x000000011034cf9b: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034cfa5: subq   $0x1,0x118(%rsi)
  0x000000011034cfad: jmpq   0x000000011034e318
  0x000000011034cfb2: mov    %rdx,%r10
  0x000000011034cfb5: shr    $0x3,%r10
  0x000000011034cfb9: mov    %r10d,(%rdi)
  0x000000011034cfbc: shr    $0x9,%rdi
  0x000000011034cfc0: movabs $0x109ac3000,%rdx
  0x000000011034cfca: movb   $0x0,(%rdi,%rdx,1)  ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)

  0x000000011034cfce: mov    0xb8(%rsp),%rsi
  0x000000011034cfd6: mov    0xc(%rsi),%edx
  0x000000011034cfd9: shl    $0x3,%rdx          ;*getfield value
                                                ; - java.lang.String::split@196 (line 2358)

  0x000000011034cfdd: mov    0xc(%rdx),%edx     ;*arraylength
                                                ; - java.lang.String::split@199 (line 2358)
                                                ; implicit exception: dispatches to 0x000000011034e321
  0x000000011034cfe0: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034cfea: incl   0x4f8(%rcx)
  0x000000011034cff0: mov    %rdx,%rdi          ;*goto
                                                ; - java.lang.String::split@202 (line 2359)

  0x000000011034cff3: cmp    $0x0,%edi
  0x000000011034cff6: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d000: movabs $0x510,%rcx
  0x000000011034d00a: jne    0x000000011034d01a
  0x000000011034d010: movabs $0x520,%rcx
  0x000000011034d01a: mov    (%rdx,%rcx,1),%rbx
  0x000000011034d01e: lea    0x1(%rbx),%rbx
  0x000000011034d022: mov    %rbx,(%rdx,%rcx,1)
  0x000000011034d026: je     0x000000011034dc83  ;*ifne
                                                ; - java.lang.String::split@207 (line 2363)

  0x000000011034d02c: mov    0xc0(%rsp),%ebx
  0x000000011034d033: cmp    $0x0,%ebx
  0x000000011034d036: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d040: movabs $0x560,%rcx
  0x000000011034d04a: je     0x000000011034d05a
  0x000000011034d050: movabs $0x570,%rcx
  0x000000011034d05a: mov    (%rdx,%rcx,1),%rbx
  0x000000011034d05e: lea    0x1(%rbx),%rbx
  0x000000011034d062: mov    %rbx,(%rdx,%rcx,1)
  0x000000011034d066: je     0x000000011034d0d2  ;*ifeq
                                                ; - java.lang.String::split@221 (line 2367)

  0x000000011034d06c: mov    %rax,%rdx
  0x000000011034d06f: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d079: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034d083: mov    %r10,0x588(%rcx)
  0x000000011034d08a: addq   $0x1,0x590(%rcx)
  0x000000011034d092: mov    0x10(%rax),%edx    ;*getfield size
                                                ; - java.util.ArrayList::size@1 (line 282)
                                                ; - java.lang.String::split@226 (line 2367)

  0x000000011034d095: cmp    0xac(%rsp),%edx
  0x000000011034d09c: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d0a6: movabs $0x5b0,%rcx
  0x000000011034d0b0: jge    0x000000011034d0c0
  0x000000011034d0b6: movabs $0x5c0,%rcx
  0x000000011034d0c0: mov    (%rdx,%rcx,1),%rbx
  0x000000011034d0c4: lea    0x1(%rbx),%rbx
  0x000000011034d0c8: mov    %rbx,(%rdx,%rcx,1)
  0x000000011034d0cc: jge    0x000000011034d54e  ;*if_icmpge
                                                ; - java.lang.String::split@230 (line 2367)

  0x000000011034d0d2: mov    0xc(%rsi),%edx
  0x000000011034d0d5: shl    $0x3,%rdx          ;*getfield value
                                                ; - java.lang.String::split@239 (line 2368)

  0x000000011034d0d9: mov    0xc(%rdx),%ecx     ;*arraylength
                                                ; - java.lang.String::split@242 (line 2368)
                                                ; implicit exception: dispatches to 0x000000011034e326
  0x000000011034d0dc: mov    %rsi,%rdx
  0x000000011034d0df: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d0e9: mov    0x8(%rdx),%edx
  0x000000011034d0ec: shl    $0x3,%rdx
  0x000000011034d0f0: cmp    0x5d8(%rbx),%rdx
  0x000000011034d0f7: jne    0x000000011034d106
  0x000000011034d0f9: addq   $0x1,0x5e0(%rbx)
  0x000000011034d101: jmpq   0x000000011034d16c
  0x000000011034d106: cmp    0x5e8(%rbx),%rdx
  0x000000011034d10d: jne    0x000000011034d11c
  0x000000011034d10f: addq   $0x1,0x5f0(%rbx)
  0x000000011034d117: jmpq   0x000000011034d16c
  0x000000011034d11c: cmpq   $0x0,0x5d8(%rbx)
  0x000000011034d127: jne    0x000000011034d140
  0x000000011034d129: mov    %rdx,0x5d8(%rbx)
  0x000000011034d130: movq   $0x1,0x5e0(%rbx)
  0x000000011034d13b: jmpq   0x000000011034d16c
  0x000000011034d140: cmpq   $0x0,0x5e8(%rbx)
  0x000000011034d14b: jne    0x000000011034d164
  0x000000011034d14d: mov    %rdx,0x5e8(%rbx)
  0x000000011034d154: movq   $0x1,0x5f0(%rbx)
  0x000000011034d15f: jmpq   0x000000011034d16c
  0x000000011034d164: addq   $0x1,0x5d0(%rbx)
  0x000000011034d16c: mov    %rdi,%rdx          ;*invokevirtual substring
                                                ; - java.lang.String::split@243 (line 2368)

  0x000000011034d16f: callq  0x000000010ff580a0  ; OopMap{[200]=Oop off=6036}
                                                ;*invokevirtual substring
                                                ; - java.lang.String::split@243 (line 2368)
                                                ;   {optimized virtual_call}
  0x000000011034d174: mov    0xc8(%rsp),%rdx
  0x000000011034d17c: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d186: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034d190: mov    %r10,0x608(%rsi)
  0x000000011034d197: addq   $0x1,0x610(%rsi)
  0x000000011034d19f: movabs $0x1271b8088,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d1a9: mov    0xdc(%rdx),%esi
  0x000000011034d1af: add    $0x8,%esi
  0x000000011034d1b2: mov    %esi,0xdc(%rdx)
  0x000000011034d1b8: movabs $0x126fe3ea8,%rdx  ;   {metadata({method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d1c2: and    $0x7ffff8,%esi
  0x000000011034d1c8: cmp    $0x0,%esi
  0x000000011034d1cb: je     0x000000011034e32b
  0x000000011034d1d1: mov    0xc8(%rsp),%rdi
  0x000000011034d1d9: mov    0x10(%rdi),%edx    ;*getfield size
                                                ; - java.util.ArrayList::add@2 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d1dc: inc    %edx
  0x000000011034d1de: mov    %rdi,%rsi
  0x000000011034d1e1: movabs $0x1271b8088,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d1eb: addq   $0x1,0x108(%rbx)
  0x000000011034d1f3: movabs $0x1271b8218,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d1fd: mov    0xdc(%rsi),%ebx
  0x000000011034d203: add    $0x8,%ebx
  0x000000011034d206: mov    %ebx,0xdc(%rsi)
  0x000000011034d20c: movabs $0x126fe3420,%rsi  ;   {metadata({method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d216: and    $0x7ffff8,%ebx
  0x000000011034d21c: cmp    $0x0,%ebx
  0x000000011034d21f: je     0x000000011034e342
  0x000000011034d225: mov    0x14(%rdi),%esi
  0x000000011034d228: shl    $0x3,%rsi          ;*getfield elementData
                                                ; - java.util.ArrayList::ensureCapacityInternal@2 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d22c: movabs $0x1271b8218,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d236: addq   $0x1,0x108(%rbx)
  0x000000011034d23e: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034d248: mov    0xdc(%rbx),%ecx
  0x000000011034d24e: add    $0x8,%ecx
  0x000000011034d251: mov    %ecx,0xdc(%rbx)
  0x000000011034d257: movabs $0x126fe3380,%rbx  ;   {metadata({method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034d261: and    $0x7ffff8,%ecx
  0x000000011034d267: cmp    $0x0,%ecx
  0x000000011034d26a: je     0x000000011034e359
  0x000000011034d270: movabs $0x76ab06e50,%rbx  ;   {oop(a 'java/lang/Object'[0] )}
  0x000000011034d27a: cmp    %rbx,%rsi
  0x000000011034d27d: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034d287: movabs $0x108,%rcx
  0x000000011034d291: jne    0x000000011034d2a1
  0x000000011034d297: movabs $0x118,%rcx
  0x000000011034d2a1: mov    (%rbx,%rcx,1),%r8
  0x000000011034d2a5: lea    0x1(%r8),%r8
  0x000000011034d2a9: mov    %r8,(%rbx,%rcx,1)
  0x000000011034d2ad: jne    0x000000011034d345  ;*if_acmpne
                                                ; - java.util.ArrayList::calculateCapacity@4 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d2b3: movabs $0x1271b8388,%rbx  ;   {metadata(method data for {method} {0x0000000126fe3380} 'calculateCapacity' '([Ljava/lang/Object;I)I' in 'java/util/ArrayList')}
  0x000000011034d2bd: addq   $0x1,0x128(%rbx)
  0x000000011034d2c5: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034d2cf: mov    0xdc(%rbx),%ecx
  0x000000011034d2d5: add    $0x8,%ecx
  0x000000011034d2d8: mov    %ecx,0xdc(%rbx)
  0x000000011034d2de: movabs $0x1270088c8,%rbx  ;   {metadata({method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034d2e8: and    $0x7ffff8,%ecx
  0x000000011034d2ee: cmp    $0x0,%ecx
  0x000000011034d2f1: je     0x000000011034e370
  0x000000011034d2f7: cmp    $0xa,%edx
  0x000000011034d2fa: movabs $0x1271323e0,%rbx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034d304: movabs $0x108,%rcx
  0x000000011034d30e: jg     0x000000011034d31e
  0x000000011034d314: movabs $0x118,%rcx
  0x000000011034d31e: mov    (%rbx,%rcx,1),%r8
  0x000000011034d322: lea    0x1(%r8),%r8
  0x000000011034d326: mov    %r8,(%rbx,%rcx,1)
  0x000000011034d32a: jg     0x000000011034d345  ;*if_icmplt
                                                ; - java.lang.Math::max@2 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d330: movabs $0x1271323e0,%rdx  ;   {metadata(method data for {method} {0x00000001270088c8} 'max' '(II)I' in 'java/lang/Math')}
  0x000000011034d33a: incl   0x128(%rdx)
  0x000000011034d340: mov    $0xa,%edx          ;*goto
                                                ; - java.lang.Math::max@6 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d345: mov    %rdi,%rbx
  0x000000011034d348: movabs $0x1271b8218,%rcx  ;   {metadata(method data for {method} {0x0000000126fe3420} 'ensureCapacityInternal' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d352: addq   $0x1,0x118(%rcx)
  0x000000011034d35a: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d364: mov    0xdc(%rbx),%ecx
  0x000000011034d36a: add    $0x8,%ecx
  0x000000011034d36d: mov    %ecx,0xdc(%rbx)
  0x000000011034d373: movabs $0x126fe34d0,%rbx  ;   {metadata({method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d37d: and    $0x7ffff8,%ecx
  0x000000011034d383: cmp    $0x0,%ecx
  0x000000011034d386: je     0x000000011034e387
  0x000000011034d38c: mov    0xc(%rdi),%ebx     ;*getfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@2 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d38f: inc    %ebx
  0x000000011034d391: mov    %ebx,0xc(%rdi)     ;*putfield modCount
                                                ; - java.util.ArrayList::ensureExplicitCapacity@7 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d394: mov    0xc(%rsi),%esi     ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ; implicit exception: dispatches to 0x000000011034e39e
  0x000000011034d397: mov    %rdx,%rbx
  0x000000011034d39a: sub    %esi,%ebx
  0x000000011034d39c: cmp    $0x0,%ebx
  0x000000011034d39f: movabs $0x1271b8508,%rsi  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d3a9: movabs $0x108,%rbx
  0x000000011034d3b3: jle    0x000000011034d3c3
  0x000000011034d3b9: movabs $0x118,%rbx
  0x000000011034d3c3: mov    (%rsi,%rbx,1),%rcx
  0x000000011034d3c7: lea    0x1(%rcx),%rcx
  0x000000011034d3cb: mov    %rcx,(%rsi,%rbx,1)
  0x000000011034d3cf: mov    %rax,0xe8(%rsp)
  0x000000011034d3d7: jle    0x000000011034d3fc  ;*ifle
                                                ; - java.util.ArrayList::ensureExplicitCapacity@17 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d3dd: mov    %rdi,%rsi
  0x000000011034d3e0: movabs $0x1271b8508,%rbx  ;   {metadata(method data for {method} {0x0000000126fe34d0} 'ensureExplicitCapacity' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d3ea: addq   $0x1,0x128(%rbx)
  0x000000011034d3f2: mov    %rdi,%rsi          ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d3f5: nop
  0x000000011034d3f6: nop
  0x000000011034d3f7: callq  0x000000010ff580a0  ; OopMap{[232]=Oop [200]=Oop off=6684}
                                                ;*invokespecial grow
                                                ; - java.util.ArrayList::ensureExplicitCapacity@22 (line 239)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {optimized virtual_call}
  0x000000011034d3fc: mov    0xe8(%rsp),%rbx
  0x000000011034d404: mov    0xc8(%rsp),%rax
  0x000000011034d40c: mov    0x14(%rax),%edx
  0x000000011034d40f: shl    $0x3,%rdx          ;*getfield elementData
                                                ; - java.util.ArrayList::add@11 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d413: mov    0x10(%rax),%esi    ;*getfield size
                                                ; - java.util.ArrayList::add@16 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d416: mov    %rsi,%rdi
  0x000000011034d419: inc    %edi
  0x000000011034d41b: mov    %edi,0x10(%rax)    ;*putfield size
                                                ; - java.util.ArrayList::add@22 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d41e: movslq %esi,%rdi
  0x000000011034d421: lea    0x10(%rdx,%rdi,4),%rdi
  0x000000011034d426: cmp    0xc(%rdx),%esi     ; implicit exception: dispatches to 0x000000011034e3a3
  0x000000011034d429: jae    0x000000011034e3ad
  0x000000011034d42f: cmp    $0x0,%rbx
  0x000000011034d433: jne    0x000000011034d44e
  0x000000011034d435: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d43f: orl    $0x100,0x110(%rsi)
  0x000000011034d449: jmpq   0x000000011034d532
  0x000000011034d44e: mov    0x8(%rdx),%edx     ; implicit exception: dispatches to 0x000000011034e3b6
  0x000000011034d451: shl    $0x3,%rdx
  0x000000011034d455: mov    0x8(%rbx),%esi
  0x000000011034d458: shl    $0x3,%rsi
  0x000000011034d45c: mov    0xe8(%rdx),%rdx
  0x000000011034d463: cmp    %rdx,%rsi
  0x000000011034d466: je     0x000000011034d494
  0x000000011034d46c: mov    0xc(%rdx),%ecx
  0x000000011034d46f: cmp    (%rsi,%rcx,1),%rdx
  0x000000011034d473: je     0x000000011034d494
  0x000000011034d479: cmp    $0x18,%ecx
  0x000000011034d47c: jne    0x000000011034d51b
  0x000000011034d482: push   %rsi
  0x000000011034d483: push   %rdx
  0x000000011034d484: callq  0x00000001100108a0  ;   {runtime_call}
  0x000000011034d489: pop    %rsi
  0x000000011034d48a: pop    %rdx
  0x000000011034d48b: cmp    $0x0,%edx
  0x000000011034d48e: je     0x000000011034d51b
  0x000000011034d494: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d49e: mov    0x8(%rbx),%edx
  0x000000011034d4a1: shl    $0x3,%rdx
  0x000000011034d4a5: cmp    0x120(%rsi),%rdx
  0x000000011034d4ac: jne    0x000000011034d4bb
  0x000000011034d4ae: addq   $0x1,0x128(%rsi)
  0x000000011034d4b6: jmpq   0x000000011034d532
  0x000000011034d4bb: cmp    0x130(%rsi),%rdx
  0x000000011034d4c2: jne    0x000000011034d4d1
  0x000000011034d4c4: addq   $0x1,0x138(%rsi)
  0x000000011034d4cc: jmpq   0x000000011034d532
  0x000000011034d4d1: cmpq   $0x0,0x120(%rsi)
  0x000000011034d4dc: jne    0x000000011034d4f5
  0x000000011034d4de: mov    %rdx,0x120(%rsi)
  0x000000011034d4e5: movq   $0x1,0x128(%rsi)
  0x000000011034d4f0: jmpq   0x000000011034d532
  0x000000011034d4f5: cmpq   $0x0,0x130(%rsi)
  0x000000011034d500: jne    0x000000011034d519
  0x000000011034d502: mov    %rdx,0x130(%rsi)
  0x000000011034d509: movq   $0x1,0x138(%rsi)
  0x000000011034d514: jmpq   0x000000011034d532
  0x000000011034d519: jmp    0x000000011034d532
  0x000000011034d51b: movabs $0x1271b8088,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3ea8} 'add' '(Ljava/lang/Object;)Z' in 'java/util/ArrayList')}
  0x000000011034d525: subq   $0x1,0x118(%rsi)
  0x000000011034d52d: jmpq   0x000000011034e3bb
  0x000000011034d532: mov    %rbx,%r10
  0x000000011034d535: shr    $0x3,%r10
  0x000000011034d539: mov    %r10d,(%rdi)
  0x000000011034d53c: shr    $0x9,%rdi
  0x000000011034d540: movabs $0x109ac3000,%rbx
  0x000000011034d54a: movb   $0x0,(%rdi,%rbx,1)  ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)

  0x000000011034d54e: mov    0xac(%rsp),%ecx
  0x000000011034d555: mov    %rax,%rbx
  0x000000011034d558: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d562: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034d56c: mov    %r10,0x638(%rdx)
  0x000000011034d573: addq   $0x1,0x640(%rdx)
  0x000000011034d57b: mov    0x10(%rax),%r8d    ;*getfield size
                                                ; - java.util.ArrayList::size@1 (line 282)
                                                ; - java.lang.String::split@252 (line 2371)

  0x000000011034d57f: cmp    $0x0,%ecx
  0x000000011034d582: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d58c: movabs $0x660,%rdx
  0x000000011034d596: jne    0x000000011034d5a6
  0x000000011034d59c: movabs $0x670,%rdx
  0x000000011034d5a6: mov    (%rbx,%rdx,1),%rsi
  0x000000011034d5aa: lea    0x1(%rsi),%rsi
  0x000000011034d5ae: mov    %rsi,(%rbx,%rdx,1)  ;*ifne
                                                ; - java.lang.String::split@258 (line 2372)

  0x000000011034d5b2: mov    %r8,%rdi           ;*iload
                                                ; - java.lang.String::split@290 (line 2377)

  0x000000011034d5b5: jne    0x000000011034d96e  ;*ifne
                                                ; - java.lang.String::split@258 (line 2372)

  0x000000011034d5bb: nopl   0x0(%rax,%rax,1)
  0x000000011034d5c0: cmp    $0x0,%edi
  0x000000011034d5c3: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d5cd: movabs $0x680,%rdx
  0x000000011034d5d7: jle    0x000000011034d5e7
  0x000000011034d5dd: movabs $0x690,%rdx
  0x000000011034d5e7: mov    (%rbx,%rdx,1),%rsi
  0x000000011034d5eb: lea    0x1(%rsi),%rsi
  0x000000011034d5ef: mov    %rsi,(%rbx,%rdx,1)
  0x000000011034d5f3: jle    0x000000011034d96e  ;*ifle
                                                ; - java.lang.String::split@263 (line 2373)

  0x000000011034d5f9: mov    %rdi,%rbx
  0x000000011034d5fc: dec    %ebx
  0x000000011034d5fe: mov    %rax,%rdx
  0x000000011034d601: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d60b: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034d615: mov    %r10,0x6a8(%rsi)
  0x000000011034d61c: addq   $0x1,0x6b0(%rsi)
  0x000000011034d624: movabs $0x1271e0ff8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3d50} 'get' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d62e: mov    0xdc(%rdx),%esi
  0x000000011034d634: add    $0x8,%esi
  0x000000011034d637: mov    %esi,0xdc(%rdx)
  0x000000011034d63d: movabs $0x126fe3d50,%rdx  ;   {metadata({method} {0x0000000126fe3d50} 'get' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d647: and    $0x7ffff8,%esi
  0x000000011034d64d: cmp    $0x0,%esi
  0x000000011034d650: je     0x000000011034e3c4
  0x000000011034d656: mov    %rax,%rdx
  0x000000011034d659: movabs $0x1271e0ff8,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3d50} 'get' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d663: addq   $0x1,0x108(%rsi)
  0x000000011034d66b: movabs $0x1271e1188,%rdx  ;   {metadata(method data for {method} {0x0000000126fe4630} 'rangeCheck' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d675: mov    0xdc(%rdx),%esi
  0x000000011034d67b: add    $0x8,%esi
  0x000000011034d67e: mov    %esi,0xdc(%rdx)
  0x000000011034d684: movabs $0x126fe4630,%rdx  ;   {metadata({method} {0x0000000126fe4630} 'rangeCheck' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d68e: and    $0x7ffff8,%esi
  0x000000011034d694: cmp    $0x0,%esi
  0x000000011034d697: je     0x000000011034e3db
  0x000000011034d69d: cmp    %r8d,%ebx
  0x000000011034d6a0: movabs $0x1271e1188,%rdx  ;   {metadata(method data for {method} {0x0000000126fe4630} 'rangeCheck' '(I)V' in 'java/util/ArrayList')}
  0x000000011034d6aa: movabs $0x108,%rsi
  0x000000011034d6b4: jl     0x000000011034d6c4
  0x000000011034d6ba: movabs $0x118,%rsi
  0x000000011034d6c4: mov    (%rdx,%rsi,1),%rcx
  0x000000011034d6c8: lea    0x1(%rcx),%rcx
  0x000000011034d6cc: mov    %rcx,(%rdx,%rsi,1)
  0x000000011034d6d0: jge    0x000000011034df13  ;*if_icmplt
                                                ; - java.util.ArrayList::rangeCheck@5 (line 656)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034d6d6: mov    %rax,%rdx
  0x000000011034d6d9: movabs $0x1271e0ff8,%rsi  ;   {metadata(method data for {method} {0x0000000126fe3d50} 'get' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d6e3: addq   $0x1,0x128(%rsi)
  0x000000011034d6eb: movabs $0x1271e1540,%rdx  ;   {metadata(method data for {method} {0x0000000126fe3cb0} 'elementData' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d6f5: mov    0xdc(%rdx),%esi
  0x000000011034d6fb: add    $0x8,%esi
  0x000000011034d6fe: mov    %esi,0xdc(%rdx)
  0x000000011034d704: movabs $0x126fe3cb0,%rdx  ;   {metadata({method} {0x0000000126fe3cb0} 'elementData' '(I)Ljava/lang/Object;' in 'java/util/ArrayList')}
  0x000000011034d70e: and    $0x7ffff8,%esi
  0x000000011034d714: cmp    $0x0,%esi
  0x000000011034d717: je     0x000000011034e3f2
  0x000000011034d71d: mov    0x14(%rax),%edx
  0x000000011034d720: shl    $0x3,%rdx          ;*getfield elementData
                                                ; - java.util.ArrayList::elementData@1 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034d724: movslq %ebx,%rsi
  0x000000011034d727: cmp    0xc(%rdx),%ebx     ; implicit exception: dispatches to 0x000000011034e409
  0x000000011034d72a: jae    0x000000011034e413
  0x000000011034d730: mov    0x10(%rdx,%rsi,4),%ebx
  0x000000011034d734: shl    $0x3,%rbx          ;*aaload
                                                ; - java.util.ArrayList::elementData@5 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034d738: cmp    $0x0,%rbx
  0x000000011034d73c: jne    0x000000011034d757
  0x000000011034d73e: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d748: orl    $0x100,0x6c8(%rsi)
  0x000000011034d752: jmpq   0x000000011034d817
  0x000000011034d757: movabs $0x7c00016d0,%rcx  ;   {metadata('java/lang/String')}
  0x000000011034d761: mov    0x8(%rbx),%edx
  0x000000011034d764: shl    $0x3,%rdx
  0x000000011034d768: cmp    %rdx,%rcx
  0x000000011034d76b: jne    0x000000011034d7fb
  0x000000011034d771: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d77b: mov    0x8(%rbx),%ecx
  0x000000011034d77e: shl    $0x3,%rcx
  0x000000011034d782: cmp    0x6d8(%rsi),%rcx
  0x000000011034d789: jne    0x000000011034d798
  0x000000011034d78b: addq   $0x1,0x6e0(%rsi)
  0x000000011034d793: jmpq   0x000000011034d817
  0x000000011034d798: cmp    0x6e8(%rsi),%rcx
  0x000000011034d79f: jne    0x000000011034d7ae
  0x000000011034d7a1: addq   $0x1,0x6f0(%rsi)
  0x000000011034d7a9: jmpq   0x000000011034d817
  0x000000011034d7ae: cmpq   $0x0,0x6d8(%rsi)
  0x000000011034d7b9: jne    0x000000011034d7d2
  0x000000011034d7bb: mov    %rcx,0x6d8(%rsi)
  0x000000011034d7c2: movq   $0x1,0x6e0(%rsi)
  0x000000011034d7cd: jmpq   0x000000011034d817
  0x000000011034d7d2: cmpq   $0x0,0x6e8(%rsi)
  0x000000011034d7dd: jne    0x000000011034d7f6
  0x000000011034d7df: mov    %rcx,0x6e8(%rsi)
  0x000000011034d7e6: movq   $0x1,0x6f0(%rsi)
  0x000000011034d7f1: jmpq   0x000000011034d817
  0x000000011034d7f6: jmpq   0x000000011034d817
  0x000000011034d7fb: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d805: subq   $0x1,0x6d0(%rsi)
  0x000000011034d80d: jmpq   0x000000011034e41c
  0x000000011034d812: jmpq   0x000000011034d817  ;*checkcast
                                                ; - java.lang.String::split@275 (line 2373)

  0x000000011034d817: cmp    (%rbx),%rax        ;*invokevirtual length
                                                ; - java.lang.String::split@278 (line 2373)
                                                ; implicit exception: dispatches to 0x000000011034e425
  0x000000011034d81a: mov    %rbx,%rdx
  0x000000011034d81d: movabs $0x127278e50,%rsi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d827: mov    0x8(%rdx),%edx
  0x000000011034d82a: shl    $0x3,%rdx
  0x000000011034d82e: cmp    0x708(%rsi),%rdx
  0x000000011034d835: jne    0x000000011034d844
  0x000000011034d837: addq   $0x1,0x710(%rsi)
  0x000000011034d83f: jmpq   0x000000011034d8aa
  0x000000011034d844: cmp    0x718(%rsi),%rdx
  0x000000011034d84b: jne    0x000000011034d85a
  0x000000011034d84d: addq   $0x1,0x720(%rsi)
  0x000000011034d855: jmpq   0x000000011034d8aa
  0x000000011034d85a: cmpq   $0x0,0x708(%rsi)
  0x000000011034d865: jne    0x000000011034d87e
  0x000000011034d867: mov    %rdx,0x708(%rsi)
  0x000000011034d86e: movq   $0x1,0x710(%rsi)
  0x000000011034d879: jmpq   0x000000011034d8aa
  0x000000011034d87e: cmpq   $0x0,0x718(%rsi)
  0x000000011034d889: jne    0x000000011034d8a2
  0x000000011034d88b: mov    %rdx,0x718(%rsi)
  0x000000011034d892: movq   $0x1,0x720(%rsi)
  0x000000011034d89d: jmpq   0x000000011034d8aa
  0x000000011034d8a2: addq   $0x1,0x700(%rsi)
  0x000000011034d8aa: movabs $0x1270e7600,%rdx  ;   {metadata(method data for {method} {0x0000000126f15c60} 'length' '()I' in 'java/lang/String')}
  0x000000011034d8b4: mov    0xdc(%rdx),%esi
  0x000000011034d8ba: add    $0x8,%esi
  0x000000011034d8bd: mov    %esi,0xdc(%rdx)
  0x000000011034d8c3: movabs $0x126f15c60,%rdx  ;   {metadata({method} {0x0000000126f15c60} 'length' '()I' in 'java/lang/String')}
  0x000000011034d8cd: and    $0x7ffff8,%esi
  0x000000011034d8d3: cmp    $0x0,%esi
  0x000000011034d8d6: je     0x000000011034e42a
  0x000000011034d8dc: mov    0xc(%rbx),%ebx
  0x000000011034d8df: shl    $0x3,%rbx          ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)
                                                ; - java.lang.String::split@278 (line 2373)

  0x000000011034d8e3: mov    0xc(%rbx),%ebx     ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@278 (line 2373)
                                                ; implicit exception: dispatches to 0x000000011034e441
  0x000000011034d8e6: cmp    $0x0,%ebx
  0x000000011034d8e9: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d8f3: movabs $0x730,%rdx
  0x000000011034d8fd: jne    0x000000011034d90d
  0x000000011034d903: movabs $0x740,%rdx
  0x000000011034d90d: mov    (%rbx,%rdx,1),%rsi
  0x000000011034d911: lea    0x1(%rsi),%rsi
  0x000000011034d915: mov    %rsi,(%rbx,%rdx,1)
  0x000000011034d919: jne    0x000000011034d96e  ;*ifne
                                                ; - java.lang.String::split@281 (line 2373)

  0x000000011034d91f: dec    %edi
  0x000000011034d921: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d92b: mov    0xe0(%rbx),%edx
  0x000000011034d931: add    $0x8,%edx
  0x000000011034d934: mov    %edx,0xe0(%rbx)
  0x000000011034d93a: movabs $0x126f18458,%rbx  ;   {metadata({method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d944: and    $0xfff8,%edx
  0x000000011034d94a: cmp    $0x0,%edx
  0x000000011034d94d: je     0x000000011034e446  ; OopMap{rax=Oop [200]=Oop off=8051}
                                                ;*goto
                                                ; - java.lang.String::split@287 (line 2374)

  0x000000011034d953: test   %eax,-0x3734859(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x000000011034d959: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d963: incl   0x750(%rbx)
  0x000000011034d969: jmpq   0x000000011034d5c0  ;*goto
                                                ; - java.lang.String::split@287 (line 2374)

  0x000000011034d96e: mov    %rdi,%rbx
  0x000000011034d971: movabs $0x7c001ba18,%rdx  ;   {metadata('java/lang/String'[])}
  0x000000011034d97b: mov    %rdi,%r11
  0x000000011034d97e: mov    %rax,%r9
  0x000000011034d981: movslq %ebx,%rbx
  0x000000011034d984: mov    %rbx,%rdi
  0x000000011034d987: cmp    $0xffffff,%rbx
  0x000000011034d98e: ja     0x000000011034e45d
  0x000000011034d994: movabs $0x17,%rsi
  0x000000011034d99e: lea    (%rsi,%rbx,4),%rsi
  0x000000011034d9a2: and    $0xfffffffffffffff8,%rsi
  0x000000011034d9a6: mov    0x60(%r15),%rax
  0x000000011034d9aa: lea    (%rax,%rsi,1),%rsi
  0x000000011034d9ae: cmp    0x70(%r15),%rsi
  0x000000011034d9b2: ja     0x000000011034e45d
  0x000000011034d9b8: mov    %rsi,0x60(%r15)
  0x000000011034d9bc: sub    %rax,%rsi
  0x000000011034d9bf: movq   $0x1,(%rax)
  0x000000011034d9c6: mov    %rdx,%rcx
  0x000000011034d9c9: shr    $0x3,%rcx
  0x000000011034d9cd: mov    %ecx,0x8(%rax)
  0x000000011034d9d0: mov    %ebx,0xc(%rax)
  0x000000011034d9d3: sub    $0x10,%rsi
  0x000000011034d9d7: je     0x000000011034d9ee
  0x000000011034d9dd: xor    %rbx,%rbx
  0x000000011034d9e0: shr    $0x3,%rsi
  0x000000011034d9e4: mov    %rbx,0x8(%rax,%rsi,8)
  0x000000011034d9e9: dec    %rsi
  0x000000011034d9ec: jne    0x000000011034d9e4  ;*anewarray
                                                ; - java.lang.String::split@292 (line 2377)

  0x000000011034d9ee: mov    %r9,%rsi
  0x000000011034d9f1: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034d9fb: movabs $0x7c0017bf0,%r10  ;   {metadata('java/util/ArrayList')}
  0x000000011034da05: mov    %r10,0x770(%rdx)
  0x000000011034da0c: addq   $0x1,0x778(%rdx)
  0x000000011034da14: movabs $0x12727c660,%rsi  ;   {metadata(method data for {method} {0x0000000126fe4f10} 'subList' '(II)Ljava/util/List;' in 'java/util/ArrayList')}
  0x000000011034da1e: mov    0xdc(%rsi),%edx
  0x000000011034da24: add    $0x8,%edx
  0x000000011034da27: mov    %edx,0xdc(%rsi)
  0x000000011034da2d: movabs $0x126fe4f10,%rsi  ;   {metadata({method} {0x0000000126fe4f10} 'subList' '(II)Ljava/util/List;' in 'java/util/ArrayList')}
  0x000000011034da37: and    $0x7ffff8,%edx
  0x000000011034da3d: cmp    $0x0,%edx
  0x000000011034da40: je     0x000000011034e467
  0x000000011034da46: movabs $0x12727c660,%rsi  ;   {metadata(method data for {method} {0x0000000126fe4f10} 'subList' '(II)Ljava/util/List;' in 'java/util/ArrayList')}
  0x000000011034da50: addq   $0x1,0x108(%rsi)
  0x000000011034da58: mov    $0x0,%esi
  0x000000011034da5d: mov    %r11,%rdx
  0x000000011034da60: mov    %r8,%rcx           ;*invokestatic subListRangeCheck
                                                ; - java.util.ArrayList::subList@6 (line 1004)
                                                ; - java.lang.String::split@302 (line 2378)

  0x000000011034da63: mov    %rax,0xf8(%rsp)
  0x000000011034da6b: mov    %r11d,0xf0(%rsp)
  0x000000011034da73: nop
  0x000000011034da74: nop
  0x000000011034da75: nop
  0x000000011034da76: nop
  0x000000011034da77: callq  0x000000010ff58520  ; OopMap{[248]=Oop [200]=Oop off=8348}
                                                ;*invokestatic subListRangeCheck
                                                ; - java.util.ArrayList::subList@6 (line 1004)
                                                ; - java.lang.String::split@302 (line 2378)
                                                ;   {static_call}
  0x000000011034da7c: nopl   0x0(%rax)
  0x000000011034da80: jmpq   0x000000011034e48d  ;   {no_reloc}
  0x000000011034da85: add    %al,(%rax)
  0x000000011034da87: add    %al,(%rax)
  0x000000011034da89: add    %ch,%cl
  0x000000011034da8b: or     %cl,(%rdx)
  0x000000011034da8d: add    %al,(%rax)         ;*new  ; - java.util.ArrayList::subList@9 (line 1005)
                                                ; - java.lang.String::split@302 (line 2378)

  0x000000011034da8f: mov    %rax,%rdx
  0x000000011034da92: movabs $0x12727c660,%rcx  ;   {metadata(method data for {method} {0x0000000126fe4f10} 'subList' '(II)Ljava/util/List;' in 'java/util/ArrayList')}
  0x000000011034da9c: addq   $0x1,0x118(%rcx)
  0x000000011034daa4: mov    0xc8(%rsp),%rdx
  0x000000011034daac: mov    0xc8(%rsp),%rcx
  0x000000011034dab4: mov    $0x0,%r8d
  0x000000011034daba: mov    $0x0,%r9d
  0x000000011034dac0: mov    0xf0(%rsp),%edi
  0x000000011034dac7: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList::subList@18 (line 1005)
                                                ; - java.lang.String::split@302 (line 2378)

  0x000000011034daca: mov    %rax,0x100(%rsp)
  0x000000011034dad2: nop
  0x000000011034dad3: nop
  0x000000011034dad4: nop
  0x000000011034dad5: nop
  0x000000011034dad6: nop
  0x000000011034dad7: callq  0x000000010ff580a0  ; OopMap{[248]=Oop [256]=Oop off=8444}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList::subList@18 (line 1005)
                                                ; - java.lang.String::split@302 (line 2378)
                                                ;   {optimized virtual_call}
  0x000000011034dadc: mov    0x100(%rsp),%rax
  0x000000011034dae4: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034daee: mov    0x8(%rax),%eax
  0x000000011034daf1: shl    $0x3,%rax
  0x000000011034daf5: cmp    0x7a0(%rdx),%rax
  0x000000011034dafc: jne    0x000000011034db0b
  0x000000011034dafe: addq   $0x1,0x7a8(%rdx)
  0x000000011034db06: jmpq   0x000000011034db71
  0x000000011034db0b: cmp    0x7b0(%rdx),%rax
  0x000000011034db12: jne    0x000000011034db21
  0x000000011034db14: addq   $0x1,0x7b8(%rdx)
  0x000000011034db1c: jmpq   0x000000011034db71
  0x000000011034db21: cmpq   $0x0,0x7a0(%rdx)
  0x000000011034db2c: jne    0x000000011034db45
  0x000000011034db2e: mov    %rax,0x7a0(%rdx)
  0x000000011034db35: movq   $0x1,0x7a8(%rdx)
  0x000000011034db40: jmpq   0x000000011034db71
  0x000000011034db45: cmpq   $0x0,0x7b0(%rdx)
  0x000000011034db50: jne    0x000000011034db69
  0x000000011034db52: mov    %rax,0x7b0(%rdx)
  0x000000011034db59: movq   $0x1,0x7b8(%rdx)
  0x000000011034db64: jmpq   0x000000011034db71
  0x000000011034db69: addq   $0x1,0x798(%rdx)
  0x000000011034db71: mov    0xf8(%rsp),%rdx
  0x000000011034db79: mov    0x100(%rsp),%rsi   ;*invokeinterface toArray
                                                ; - java.lang.String::split@307 (line 2378)

  0x000000011034db81: nop
  0x000000011034db82: nop
  0x000000011034db83: nop
  0x000000011034db84: nop
  0x000000011034db85: movabs $0xffffffffffffffff,%rax
  0x000000011034db8f: callq  0x000000010ff582e0  ; OopMap{off=8628}
                                                ;*invokeinterface toArray
                                                ; - java.lang.String::split@307 (line 2378)
                                                ;   {virtual_call}
  0x000000011034db94: cmp    $0x0,%rax
  0x000000011034db98: jne    0x000000011034dbb3
  0x000000011034db9a: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034dba4: orl    $0x100,0x7c0(%rdx)
  0x000000011034dbae: jmpq   0x000000011034dc74
  0x000000011034dbb3: movabs $0x7c001ba18,%rsi  ;   {metadata('java/lang/String'[])}
  0x000000011034dbbd: mov    0x8(%rax),%edx
  0x000000011034dbc0: shl    $0x3,%rdx
  0x000000011034dbc4: cmp    0x38(%rdx),%rsi
  0x000000011034dbc8: jne    0x000000011034dc58
  0x000000011034dbce: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034dbd8: mov    0x8(%rax),%esi
  0x000000011034dbdb: shl    $0x3,%rsi
  0x000000011034dbdf: cmp    0x7d0(%rdx),%rsi
  0x000000011034dbe6: jne    0x000000011034dbf5
  0x000000011034dbe8: addq   $0x1,0x7d8(%rdx)
  0x000000011034dbf0: jmpq   0x000000011034dc74
  0x000000011034dbf5: cmp    0x7e0(%rdx),%rsi
  0x000000011034dbfc: jne    0x000000011034dc0b
  0x000000011034dbfe: addq   $0x1,0x7e8(%rdx)
  0x000000011034dc06: jmpq   0x000000011034dc74
  0x000000011034dc0b: cmpq   $0x0,0x7d0(%rdx)
  0x000000011034dc16: jne    0x000000011034dc2f
  0x000000011034dc18: mov    %rsi,0x7d0(%rdx)
  0x000000011034dc1f: movq   $0x1,0x7d8(%rdx)
  0x000000011034dc2a: jmpq   0x000000011034dc74
  0x000000011034dc2f: cmpq   $0x0,0x7e0(%rdx)
  0x000000011034dc3a: jne    0x000000011034dc53
  0x000000011034dc3c: mov    %rsi,0x7e0(%rdx)
  0x000000011034dc43: movq   $0x1,0x7e8(%rdx)
  0x000000011034dc4e: jmpq   0x000000011034dc74
  0x000000011034dc53: jmpq   0x000000011034dc74
  0x000000011034dc58: movabs $0x127278e50,%rdx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034dc62: subq   $0x1,0x7c8(%rdx)
  0x000000011034dc6a: jmpq   0x000000011034e4a4
  0x000000011034dc6f: jmpq   0x000000011034dc74  ;*checkcast
                                                ; - java.lang.String::split@312 (line 2378)

  0x000000011034dc74: add    $0x140,%rsp
  0x000000011034dc7b: pop    %rbp
  0x000000011034dc7c: test   %eax,-0x3734b82(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011034dc82: retq                      ;*areturn
                                                ; - java.lang.String::split@315 (line 2378)

  0x000000011034dc83: mov    $0x1,%ebx
  0x000000011034dc88: movabs $0x7c001ba18,%rdx  ;   {metadata('java/lang/String'[])}
  0x000000011034dc92: mov    %rsi,%r8
  0x000000011034dc95: movslq %ebx,%rbx
  0x000000011034dc98: mov    %rbx,%rdi
  0x000000011034dc9b: cmp    $0xffffff,%rbx
  0x000000011034dca2: ja     0x000000011034e4ad
  0x000000011034dca8: movabs $0x17,%rsi
  0x000000011034dcb2: lea    (%rsi,%rbx,4),%rsi
  0x000000011034dcb6: and    $0xfffffffffffffff8,%rsi
  0x000000011034dcba: mov    0x60(%r15),%rax
  0x000000011034dcbe: lea    (%rax,%rsi,1),%rsi
  0x000000011034dcc2: cmp    0x70(%r15),%rsi
  0x000000011034dcc6: ja     0x000000011034e4ad
  0x000000011034dccc: mov    %rsi,0x60(%r15)
  0x000000011034dcd0: sub    %rax,%rsi
  0x000000011034dcd3: movq   $0x1,(%rax)
  0x000000011034dcda: mov    %rdx,%rcx
  0x000000011034dcdd: shr    $0x3,%rcx
  0x000000011034dce1: mov    %ecx,0x8(%rax)
  0x000000011034dce4: mov    %ebx,0xc(%rax)
  0x000000011034dce7: sub    $0x10,%rsi
  0x000000011034dceb: je     0x000000011034dd02
  0x000000011034dcf1: xor    %rbx,%rbx
  0x000000011034dcf4: shr    $0x3,%rsi
  0x000000011034dcf8: mov    %rbx,0x8(%rax,%rsi,8)
  0x000000011034dcfd: dec    %rsi
  0x000000011034dd00: jne    0x000000011034dcf8  ;*anewarray
                                                ; - java.lang.String::split@211 (line 2364)

  0x000000011034dd02: lea    0x10(%rax),%rsi
  0x000000011034dd06: cmp    $0x0,%r8
  0x000000011034dd0a: jne    0x000000011034dd25
  0x000000011034dd0c: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034dd16: orl    $0x100,0x528(%rbx)
  0x000000011034dd20: jmpq   0x000000011034de0b
  0x000000011034dd25: mov    0x8(%rax),%edi     ; implicit exception: dispatches to 0x000000011034e4b7
  0x000000011034dd28: shl    $0x3,%rdi
  0x000000011034dd2c: mov    0x8(%r8),%ebx
  0x000000011034dd30: shl    $0x3,%rbx
  0x000000011034dd34: mov    0xe8(%rdi),%rdi
  0x000000011034dd3b: cmp    %rdi,%rbx
  0x000000011034dd3e: je     0x000000011034dd6c
  0x000000011034dd44: mov    0xc(%rdi),%edx
  0x000000011034dd47: cmp    (%rbx,%rdx,1),%rdi
  0x000000011034dd4b: je     0x000000011034dd6c
  0x000000011034dd51: cmp    $0x18,%edx
  0x000000011034dd54: jne    0x000000011034ddf4
  0x000000011034dd5a: push   %rbx
  0x000000011034dd5b: push   %rdi
  0x000000011034dd5c: callq  0x00000001100108a0  ;   {runtime_call}
  0x000000011034dd61: pop    %rbx
  0x000000011034dd62: pop    %rdi
  0x000000011034dd63: cmp    $0x0,%edi
  0x000000011034dd66: je     0x000000011034ddf4
  0x000000011034dd6c: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034dd76: mov    0x8(%r8),%edi
  0x000000011034dd7a: shl    $0x3,%rdi
  0x000000011034dd7e: cmp    0x538(%rbx),%rdi
  0x000000011034dd85: jne    0x000000011034dd94
  0x000000011034dd87: addq   $0x1,0x540(%rbx)
  0x000000011034dd8f: jmpq   0x000000011034de0b
  0x000000011034dd94: cmp    0x548(%rbx),%rdi
  0x000000011034dd9b: jne    0x000000011034ddaa
  0x000000011034dd9d: addq   $0x1,0x550(%rbx)
  0x000000011034dda5: jmpq   0x000000011034de0b
  0x000000011034ddaa: cmpq   $0x0,0x538(%rbx)
  0x000000011034ddb5: jne    0x000000011034ddce
  0x000000011034ddb7: mov    %rdi,0x538(%rbx)
  0x000000011034ddbe: movq   $0x1,0x540(%rbx)
  0x000000011034ddc9: jmpq   0x000000011034de0b
  0x000000011034ddce: cmpq   $0x0,0x548(%rbx)
  0x000000011034ddd9: jne    0x000000011034ddf2
  0x000000011034dddb: mov    %rdi,0x548(%rbx)
  0x000000011034dde2: movq   $0x1,0x550(%rbx)
  0x000000011034dded: jmpq   0x000000011034de0b
  0x000000011034ddf2: jmp    0x000000011034de0b
  0x000000011034ddf4: movabs $0x127278e50,%rbx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034ddfe: subq   $0x1,0x530(%rbx)
  0x000000011034de06: jmpq   0x000000011034e4bc
  0x000000011034de0b: mov    %r8,%r10
  0x000000011034de0e: shr    $0x3,%r10
  0x000000011034de12: mov    %r10d,(%rsi)
  0x000000011034de15: shr    $0x9,%rsi
  0x000000011034de19: movabs $0x109ac3000,%rdi
  0x000000011034de23: movb   $0x0,(%rsi,%rdi,1)  ;*aastore
                                                ; - java.lang.String::split@217 (line 2364)

  0x000000011034de27: add    $0x140,%rsp
  0x000000011034de2e: pop    %rbp
  0x000000011034de2f: test   %eax,-0x3734d35(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011034de35: retq                      ;*areturn
                                                ; - java.lang.String::split@218 (line 2364)

  0x000000011034de36: movabs $0x127278e50,%rdi  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034de40: addq   $0x1,0x7f8(%rdi)
  0x000000011034de48: mov    %rdx,%rsi          ;*invokestatic compile
                                                ; - java.lang.String::split@317 (line 2380)

  0x000000011034de4b: nop
  0x000000011034de4c: nop
  0x000000011034de4d: nop
  0x000000011034de4e: nop
  0x000000011034de4f: callq  0x000000010ff58520  ; OopMap{[184]=Oop off=9332}
                                                ;*invokestatic compile
                                                ; - java.lang.String::split@317 (line 2380)
                                                ;   {static_call}
  0x000000011034de54: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000011034e4c5
  0x000000011034de57: mov    %rax,%rdx
  0x000000011034de5a: movabs $0x127278e50,%rcx  ;   {metadata(method data for {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String')}
  0x000000011034de64: mov    0x8(%rdx),%edx
  0x000000011034de67: shl    $0x3,%rdx
  0x000000011034de6b: cmp    0x810(%rcx),%rdx
  0x000000011034de72: jne    0x000000011034de81
  0x000000011034de74: addq   $0x1,0x818(%rcx)
  0x000000011034de7c: jmpq   0x000000011034dee7
  0x000000011034de81: cmp    0x820(%rcx),%rdx
  0x000000011034de88: jne    0x000000011034de97
  0x000000011034de8a: addq   $0x1,0x828(%rcx)
  0x000000011034de92: jmpq   0x000000011034dee7
  0x000000011034de97: cmpq   $0x0,0x810(%rcx)
  0x000000011034dea2: jne    0x000000011034debb
  0x000000011034dea4: mov    %rdx,0x810(%rcx)
  0x000000011034deab: movq   $0x1,0x818(%rcx)
  0x000000011034deb6: jmpq   0x000000011034dee7
  0x000000011034debb: cmpq   $0x0,0x820(%rcx)
  0x000000011034dec6: jne    0x000000011034dedf
  0x000000011034dec8: mov    %rdx,0x820(%rcx)
  0x000000011034decf: movq   $0x1,0x828(%rcx)
  0x000000011034deda: jmpq   0x000000011034dee7
  0x000000011034dedf: addq   $0x1,0x808(%rcx)
  0x000000011034dee7: mov    0xb8(%rsp),%rdx
  0x000000011034deef: mov    0xac(%rsp),%ecx
  0x000000011034def6: mov    %rax,%rsi          ;*invokevirtual split
                                                ; - java.lang.String::split@322 (line 2380)

  0x000000011034def9: nop
  0x000000011034defa: nop
  0x000000011034defb: nop
  0x000000011034defc: nop
  0x000000011034defd: nop
  0x000000011034defe: nop
  0x000000011034deff: callq  0x000000010ff580a0  ; OopMap{off=9508}
                                                ;*invokevirtual split
                                                ; - java.lang.String::split@322 (line 2380)
                                                ;   {optimized virtual_call}
  0x000000011034df04: add    $0x140,%rsp
  0x000000011034df0b: pop    %rbp
  0x000000011034df0c: test   %eax,-0x3734e12(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011034df12: retq                      ;*areturn
                                                ; - java.lang.String::split@325 (line 2380)

  0x000000011034df13: mov    %edi,0xf4(%rsp)
  0x000000011034df1a: nopw   0x0(%rax,%rax,1)
  0x000000011034df20: jmpq   0x000000011034e4d9  ;   {no_reloc}
  0x000000011034df25: add    %al,(%rax)
  0x000000011034df27: add    %al,(%rax)
  0x000000011034df29: add    %cl,-0x75(%rax)
  0x000000011034df2c: enterq $0xb1e9,$0x5
  0x000000011034df30: add    %al,(%rax)         ;*new  ; - java.util.ArrayList::rangeCheck@8 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034df32: mov    %rcx,%rdx
  0x000000011034df35: movabs $0x1271e1188,%rsi  ;   {metadata(method data for {method} {0x0000000126fe4630} 'rangeCheck' '(I)V' in 'java/util/ArrayList')}
  0x000000011034df3f: addq   $0x1,0x128(%rsi)
  0x000000011034df47: mov    %rbx,%rdx
  0x000000011034df4a: mov    %rcx,%rsi          ;*invokespecial outOfBoundsMsg
                                                ; - java.util.ArrayList::rangeCheck@14 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034df4d: mov    %ebx,0x110(%rsp)
  0x000000011034df54: mov    %rax,0x108(%rsp)
  0x000000011034df5c: nop
  0x000000011034df5d: nop
  0x000000011034df5e: nop
  0x000000011034df5f: callq  0x000000010ff580a0  ; OopMap{[264]=Oop [200]=Oop off=9604}
                                                ;*invokespecial outOfBoundsMsg
                                                ; - java.util.ArrayList::rangeCheck@14 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {optimized virtual_call}
  0x000000011034df64: mov    0x108(%rsp),%rdx
  0x000000011034df6c: movabs $0x1271e1188,%rsi  ;   {metadata(method data for {method} {0x0000000126fe4630} 'rangeCheck' '(I)V' in 'java/util/ArrayList')}
  0x000000011034df76: addq   $0x1,0x138(%rsi)
  0x000000011034df7e: mov    %rax,%rdx
  0x000000011034df81: mov    0x108(%rsp),%rsi   ;*invokespecial <init>
                                                ; - java.util.ArrayList::rangeCheck@17 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034df89: nop
  0x000000011034df8a: nop
  0x000000011034df8b: nop
  0x000000011034df8c: nop
  0x000000011034df8d: nop
  0x000000011034df8e: nop
  0x000000011034df8f: callq  0x000000010ff580a0  ; OopMap{[264]=Oop [200]=Oop off=9652}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList::rangeCheck@17 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {optimized virtual_call}
  0x000000011034df94: mov    0x108(%rsp),%rax
  0x000000011034df9c: jmpq   0x000000011034e58d  ;*athrow
                                                ; - java.util.ArrayList::rangeCheck@20 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)

  0x000000011034dfa1: nopl   0x0(%rax)
  0x000000011034dfa8: jmpq   0x000000011034e4ff  ;   {no_reloc}
  0x000000011034dfad: add    %al,(%rax)
  0x000000011034dfaf: add    %al,(%rax)
  0x000000011034dfb1: add    %ch,%cl
  0x000000011034dfb3: push   %rdx
  0x000000011034dfb4: add    $0x8b480000,%eax   ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034dfb9: rorb   -0x42(%rax)        ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034dfbc: fmuls  0x12709(%rcx)
  0x000000011034dfc2: add    %al,(%rax)
  0x000000011034dfc4: addq   $0x1,0x148(%rsi)
  0x000000011034dfcc: mov    $0x1,%edx
  0x000000011034dfd1: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034dfd4: mov    %rax,0x118(%rsp)
  0x000000011034dfdc: nop
  0x000000011034dfdd: nop
  0x000000011034dfde: nop
  0x000000011034dfdf: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [280]=Oop [176]=Oop off=9732}
                                                ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {optimized virtual_call}
  0x000000011034dfe4: mov    0x118(%rsp),%rax
  0x000000011034dfec: jmpq   0x000000011034e58d  ;*athrow
                                                ; - java.lang.String::charAt@21 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)

  0x000000011034dff1: nopl   0x0(%rax)
  0x000000011034dff8: jmpq   0x000000011034e525  ;   {no_reloc}
  0x000000011034dffd: add    %al,(%rax)
  0x000000011034dfff: add    %al,(%rax)
  0x000000011034e001: add    %ch,%cl
  0x000000011034e003: sub    %al,-0x74b80000(%rip)        # 0x000000009b7ce009
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034e009: rorb   -0x42(%rax)        ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034e00c: fmuls  0x12709(%rcx)
  0x000000011034e012: add    %al,(%rax)
  0x000000011034e014: addq   $0x1,0x148(%rsi)
  0x000000011034e01c: mov    $0x0,%edx
  0x000000011034e021: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034e024: mov    %rax,0x120(%rsp)
  0x000000011034e02c: nop
  0x000000011034e02d: nop
  0x000000011034e02e: nop
  0x000000011034e02f: callq  0x000000010ff580a0  ; OopMap{[176]=Oop [184]=Oop [288]=Oop off=9812}
                                                ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {optimized virtual_call}
  0x000000011034e034: mov    0x120(%rsp),%rax
  0x000000011034e03c: jmpq   0x000000011034e58d  ;*athrow
                                                ; - java.lang.String::charAt@21 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)

  0x000000011034e041: nopl   0x0(%rax)
  0x000000011034e048: jmpq   0x000000011034e54b  ;   {no_reloc}
  0x000000011034e04d: add    %al,(%rax)
  0x000000011034e04f: add    %al,(%rax)
  0x000000011034e051: add    %ch,%cl
  0x000000011034e053: incb   (%rax,%rax,1)
  0x000000011034e056: add    %cl,-0x75(%rax)    ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@15 (line 2338)

  0x000000011034e059: rorb   -0x45(%rax)        ;   {metadata(method data for {method} {0x0000000126f15db0} 'charAt' '(I)C' in 'java/lang/String')}
  0x000000011034e05c: fmuls  0x12709(%rcx)
  0x000000011034e062: add    %al,(%rax)
  0x000000011034e064: addq   $0x1,0x148(%rbx)
  0x000000011034e06c: mov    $0x0,%edx
  0x000000011034e071: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@15 (line 2338)

  0x000000011034e074: mov    %rax,0x128(%rsp)
  0x000000011034e07c: nop
  0x000000011034e07d: nop
  0x000000011034e07e: nop
  0x000000011034e07f: callq  0x000000010ff580a0  ; OopMap{[184]=Oop [176]=Oop [296]=Oop off=9892}
                                                ;*invokespecial <init>
                                                ; - java.lang.String::charAt@18 (line 658)
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {optimized virtual_call}
  0x000000011034e084: mov    0x128(%rsp),%rax
  0x000000011034e08c: jmpq   0x000000011034e58d
  0x000000011034e091: mov    %rdi,0x8(%rsp)
  0x000000011034e096: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e09e: callq  0x00000001100129e0  ; OopMap{rsi=Oop [184]=Oop rdx=Oop [176]=Oop off=9923}
                                                ;*synchronization entry
                                                ; - java.lang.String::split@-1 (line 2336)
                                                ;   {runtime_call}
  0x000000011034e0a3: jmpq   0x000000011034ba55
  0x000000011034e0a8: callq  0x000000011000e080  ; OopMap{rsi=Oop [184]=Oop rdx=Oop [176]=Oop off=9933}
                                                ;*getfield value
                                                ; - java.lang.String::split@3 (line 2337)
                                                ;   {runtime_call}
  0x000000011034e0ad: callq  0x000000011000e080  ; OopMap{rsi=Oop [184]=Oop rdx=Oop [176]=Oop rdi=Oop off=9938}
                                                ;*arraylength
                                                ; - java.lang.String::split@6 (line 2337)
                                                ;   {runtime_call}
  0x000000011034e0b2: mov    %rax,0x8(%rsp)
  0x000000011034e0b7: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e0bf: callq  0x00000001100129e0  ; OopMap{rsi=Oop [184]=Oop rdx=Oop [176]=Oop rdi=Oop off=9956}
                                                ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {runtime_call}
  0x000000011034e0c4: jmpq   0x000000011034bb5f
  0x000000011034e0c9: movq   $0x0,(%rsp)
  0x000000011034e0d1: callq  0x000000010ff80440  ; OopMap{rsi=Oop [184]=Oop rdx=Oop [176]=Oop rdi=Oop off=9974}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {runtime_call}
  0x000000011034e0d6: mov    %rax,0x8(%rsp)
  0x000000011034e0db: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e0e3: callq  0x00000001100129e0  ; OopMap{[176]=Oop [184]=Oop rbx=Oop off=9992}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1503)
                                                ; - java.lang.String::split@20 (line 2338)
                                                ;   {runtime_call}
  0x000000011034e0e8: jmpq   0x000000011034bc90
  0x000000011034e0ed: mov    %rsi,0x8(%rsp)
  0x000000011034e0f2: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e0fa: callq  0x00000001100129e0  ; OopMap{[184]=Oop rdx=Oop [176]=Oop off=10015}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)
                                                ;   {runtime_call}
  0x000000011034e0ff: jmpq   0x000000011034be58
  0x000000011034e104: callq  0x000000011000e080  ; OopMap{[184]=Oop rdx=Oop [176]=Oop rsi=Oop off=10025}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)
                                                ;   {runtime_call}
  0x000000011034e109: mov    %rax,0x8(%rsp)
  0x000000011034e10e: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e116: callq  0x00000001100129e0  ; OopMap{[184]=Oop rdx=Oop [176]=Oop rsi=Oop off=10043}
                                                ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {runtime_call}
  0x000000011034e11b: jmpq   0x000000011034bf5d
  0x000000011034e120: movq   $0x0,(%rsp)
  0x000000011034e128: callq  0x000000010ff80440  ; OopMap{[184]=Oop rdx=Oop [176]=Oop rsi=Oop off=10061}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {runtime_call}
  0x000000011034e12d: mov    %rax,0x8(%rsp)
  0x000000011034e132: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e13a: callq  0x00000001100129e0  ; OopMap{[184]=Oop rdx=Oop [176]=Oop rsi=Oop off=10079}
                                                ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {runtime_call}
  0x000000011034e13f: jmpq   0x000000011034c0b8
  0x000000011034e144: movq   $0x1,(%rsp)
  0x000000011034e14c: callq  0x000000010ff80440  ; OopMap{[184]=Oop rdx=Oop [176]=Oop rsi=Oop off=10097}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {runtime_call}
  0x000000011034e151: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e15b: mov    $0xa050f00,%eax
  0x000000011034e160: callq  0x00000001100118a0  ; OopMap{[184]=Oop off=10117}
                                                ;*new  ; - java.lang.String::split@116 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e165: jmpq   0x000000011034c2d0
  0x000000011034e16a: mov    %rdx,%rdx
  0x000000011034e16d: callq  0x000000011000e7e0  ; OopMap{[184]=Oop off=10130}
                                                ;*new  ; - java.lang.String::split@116 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e172: jmpq   0x000000011034c314
  0x000000011034e177: mov    %rdx,0x8(%rsp)
  0x000000011034e17c: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e184: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=10153}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::<init>@-1 (line 165)
                                                ; - java.lang.String::split@120 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e189: jmpq   0x000000011034c363
  0x000000011034e18e: mov    %rdx,0x8(%rsp)
  0x000000011034e193: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e19b: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=10176}
                                                ;*synchronization entry
                                                ; - java.util.AbstractList::<init>@-1 (line 76)
                                                ; - java.util.ArrayList::<init>@1 (line 165)
                                                ; - java.lang.String::split@120 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e1a0: jmpq   0x000000011034c3aa
  0x000000011034e1a5: mov    %rdx,0x8(%rsp)
  0x000000011034e1aa: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e1b2: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=10199}
                                                ;*synchronization entry
                                                ; - java.util.AbstractCollection::<init>@-1 (line 66)
                                                ; - java.util.AbstractList::<init>@1 (line 76)
                                                ; - java.util.ArrayList::<init>@1 (line 165)
                                                ; - java.lang.String::split@120 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e1b7: jmpq   0x000000011034c3f1
  0x000000011034e1bc: mov    %rdx,0x8(%rsp)
  0x000000011034e1c1: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e1c9: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=10222}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.util.AbstractCollection::<init>@1 (line 66)
                                                ; - java.util.AbstractList::<init>@1 (line 76)
                                                ; - java.util.ArrayList::<init>@1 (line 165)
                                                ; - java.lang.String::split@120 (line 2350)
                                                ;   {runtime_call}
  0x000000011034e1ce: jmpq   0x000000011034c438
  0x000000011034e1d3: mov    %rdx,0x8(%rsp)
  0x000000011034e1d8: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e1e0: callq  0x00000001100129e0  ; OopMap{[184]=Oop [200]=Oop rax=Oop off=10245}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::add@-1 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e1e5: jmpq   0x000000011034c739
  0x000000011034e1ea: mov    %rsi,0x8(%rsp)
  0x000000011034e1ef: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e1f7: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop off=10268}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureCapacityInternal@-1 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e1fc: jmpq   0x000000011034c78d
  0x000000011034e201: mov    %rbx,0x8(%rsp)
  0x000000011034e206: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e20e: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10291}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::calculateCapacity@-1 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e213: jmpq   0x000000011034c7d8
  0x000000011034e218: mov    %rbx,0x8(%rsp)
  0x000000011034e21d: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e225: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10314}
                                                ;*synchronization entry
                                                ; - java.lang.Math::max@-1 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e22a: jmpq   0x000000011034c85f
  0x000000011034e22f: mov    %rbx,0x8(%rsp)
  0x000000011034e234: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e23c: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10337}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureExplicitCapacity@-1 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e241: jmpq   0x000000011034c8f4
  0x000000011034e246: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop off=10347}
                                                ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e24b: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10352}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e250: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10357}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e255: mov    %rsi,(%rsp)
  0x000000011034e259: callq  0x000000010ff80440  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10366}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e25e: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop off=10371}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e263: mov    %rdx,(%rsp)
  0x000000011034e267: callq  0x0000000110010200  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop off=10380}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@165 (line 2353)
                                                ;   {runtime_call}
  0x000000011034e26c: mov    %rcx,0x8(%rsp)
  0x000000011034e271: movq   $0xaf,(%rsp)
  0x000000011034e279: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop [200]=Oop off=10398}
                                                ;*goto
                                                ; - java.lang.String::split@175 (line 2354)
                                                ;   {runtime_call}
  0x000000011034e27e: jmpq   0x000000011034caf1
  0x000000011034e283: callq  0x000000011000e080  ; OopMap{rsi=Oop [184]=Oop [200]=Oop off=10408}
                                                ;*arraylength
                                                ; - java.lang.String::split@187 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e288: mov    %rdx,0x8(%rsp)
  0x000000011034e28d: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e295: callq  0x00000001100129e0  ; OopMap{[184]=Oop [200]=Oop rax=Oop off=10426}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::add@-1 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e29a: jmpq   0x000000011034cc51
  0x000000011034e29f: mov    %rsi,0x8(%rsp)
  0x000000011034e2a4: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e2ac: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop off=10449}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureCapacityInternal@-1 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e2b1: jmpq   0x000000011034cca5
  0x000000011034e2b6: mov    %rbx,0x8(%rsp)
  0x000000011034e2bb: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e2c3: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10472}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::calculateCapacity@-1 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e2c8: jmpq   0x000000011034ccf0
  0x000000011034e2cd: mov    %rbx,0x8(%rsp)
  0x000000011034e2d2: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e2da: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10495}
                                                ;*synchronization entry
                                                ; - java.lang.Math::max@-1 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e2df: jmpq   0x000000011034cd77
  0x000000011034e2e4: mov    %rbx,0x8(%rsp)
  0x000000011034e2e9: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e2f1: callq  0x00000001100129e0  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10518}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureExplicitCapacity@-1 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e2f6: jmpq   0x000000011034ce0c
  0x000000011034e2fb: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop rdi=Oop [200]=Oop off=10528}
                                                ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e300: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10533}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e305: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10538}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e30a: mov    %rsi,(%rsp)
  0x000000011034e30e: callq  0x000000010ff80440  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop rcx=Oop off=10547}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e313: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop off=10552}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e318: mov    %rdx,(%rsp)
  0x000000011034e31c: callq  0x0000000110010200  ; OopMap{[184]=Oop rax=Oop [200]=Oop rdx=Oop off=10561}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@191 (line 2357)
                                                ;   {runtime_call}
  0x000000011034e321: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rsi=Oop [184]=Oop off=10566}
                                                ;*arraylength
                                                ; - java.lang.String::split@199 (line 2358)
                                                ;   {runtime_call}
  0x000000011034e326: callq  0x000000011000e080  ; OopMap{[200]=Oop rsi=Oop [184]=Oop off=10571}
                                                ;*arraylength
                                                ; - java.lang.String::split@242 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e32b: mov    %rdx,0x8(%rsp)
  0x000000011034e330: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e338: callq  0x00000001100129e0  ; OopMap{[200]=Oop rax=Oop off=10589}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::add@-1 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e33d: jmpq   0x000000011034d1d1
  0x000000011034e342: mov    %rsi,0x8(%rsp)
  0x000000011034e347: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e34f: callq  0x00000001100129e0  ; OopMap{rax=Oop rdi=Oop [200]=Oop off=10612}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureCapacityInternal@-1 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e354: jmpq   0x000000011034d225
  0x000000011034e359: mov    %rbx,0x8(%rsp)
  0x000000011034e35e: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e366: callq  0x00000001100129e0  ; OopMap{rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10635}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::calculateCapacity@-1 (line 224)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e36b: jmpq   0x000000011034d270
  0x000000011034e370: mov    %rbx,0x8(%rsp)
  0x000000011034e375: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e37d: callq  0x00000001100129e0  ; OopMap{rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10658}
                                                ;*synchronization entry
                                                ; - java.lang.Math::max@-1 (line 1252)
                                                ; - java.util.ArrayList::calculateCapacity@10 (line 225)
                                                ; - java.util.ArrayList::ensureCapacityInternal@6 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e382: jmpq   0x000000011034d2f7
  0x000000011034e387: mov    %rbx,0x8(%rsp)
  0x000000011034e38c: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e394: callq  0x00000001100129e0  ; OopMap{rax=Oop rdi=Oop [200]=Oop rsi=Oop off=10681}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::ensureExplicitCapacity@-1 (line 235)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e399: jmpq   0x000000011034d38c
  0x000000011034e39e: callq  0x000000011000e080  ; OopMap{rax=Oop rdi=Oop [200]=Oop off=10691}
                                                ;*arraylength
                                                ; - java.util.ArrayList::ensureExplicitCapacity@15 (line 238)
                                                ; - java.util.ArrayList::ensureCapacityInternal@9 (line 231)
                                                ; - java.util.ArrayList::add@7 (line 462)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3a3: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rbx=Oop rdx=Oop off=10696}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3a8: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rbx=Oop rdx=Oop off=10701}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3ad: mov    %rsi,(%rsp)
  0x000000011034e3b1: callq  0x000000010ff80440  ; OopMap{rax=Oop [200]=Oop rbx=Oop rdx=Oop off=10710}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3b6: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rbx=Oop off=10715}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3bb: mov    %rbx,(%rsp)
  0x000000011034e3bf: callq  0x0000000110010200  ; OopMap{rax=Oop [200]=Oop rbx=Oop off=10724}
                                                ;*aastore
                                                ; - java.util.ArrayList::add@26 (line 463)
                                                ; - java.lang.String::split@246 (line 2368)
                                                ;   {runtime_call}
  0x000000011034e3c4: mov    %rdx,0x8(%rsp)
  0x000000011034e3c9: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e3d1: callq  0x00000001100129e0  ; OopMap{rax=Oop [200]=Oop off=10742}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::get@-1 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e3d6: jmpq   0x000000011034d656
  0x000000011034e3db: mov    %rdx,0x8(%rsp)
  0x000000011034e3e0: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e3e8: callq  0x00000001100129e0  ; OopMap{rax=Oop [200]=Oop off=10765}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::rangeCheck@-1 (line 656)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e3ed: jmpq   0x000000011034d69d
  0x000000011034e3f2: mov    %rdx,0x8(%rsp)
  0x000000011034e3f7: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e3ff: callq  0x00000001100129e0  ; OopMap{rax=Oop [200]=Oop off=10788}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::elementData@-1 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e404: jmpq   0x000000011034d71d
  0x000000011034e409: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rdx=Oop off=10798}
                                                ;*aaload
                                                ; - java.util.ArrayList::elementData@5 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e40e: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rdx=Oop off=10803}
                                                ;*aaload
                                                ; - java.util.ArrayList::elementData@5 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e413: mov    %rbx,(%rsp)
  0x000000011034e417: callq  0x000000010ff80440  ; OopMap{rax=Oop [200]=Oop rdx=Oop off=10812}
                                                ;*aaload
                                                ; - java.util.ArrayList::elementData@5 (line 422)
                                                ; - java.util.ArrayList::get@7 (line 435)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e41c: mov    %rbx,(%rsp)
  0x000000011034e420: callq  0x0000000110010440  ; OopMap{rax=Oop [200]=Oop off=10821}
                                                ;*checkcast
                                                ; - java.lang.String::split@275 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e425: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop rbx=Oop off=10826}
                                                ;*invokevirtual length
                                                ; - java.lang.String::split@278 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e42a: mov    %rdx,0x8(%rsp)
  0x000000011034e42f: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e437: callq  0x00000001100129e0  ; OopMap{rax=Oop [200]=Oop rbx=Oop off=10844}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 623)
                                                ; - java.lang.String::split@278 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e43c: jmpq   0x000000011034d8dc
  0x000000011034e441: callq  0x000000011000e080  ; OopMap{rax=Oop [200]=Oop off=10854}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@278 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e446: mov    %rbx,0x8(%rsp)
  0x000000011034e44b: movq   $0x11f,(%rsp)
  0x000000011034e453: callq  0x00000001100129e0  ; OopMap{rax=Oop [200]=Oop off=10872}
                                                ;*goto
                                                ; - java.lang.String::split@287 (line 2374)
                                                ;   {runtime_call}
  0x000000011034e458: jmpq   0x000000011034d953
  0x000000011034e45d: callq  0x000000011000f5a0  ; OopMap{r9=Oop [200]=Oop off=10882}
                                                ;*anewarray
                                                ; - java.lang.String::split@292 (line 2377)
                                                ;   {runtime_call}
  0x000000011034e462: jmpq   0x000000011034d9ee
  0x000000011034e467: mov    %rsi,0x8(%rsp)
  0x000000011034e46c: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034e474: callq  0x00000001100129e0  ; OopMap{r9=Oop [200]=Oop rax=Oop off=10905}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::subList@-1 (line 1004)
                                                ; - java.lang.String::split@302 (line 2378)
                                                ;   {runtime_call}
  0x000000011034e479: jmpq   0x000000011034da46
  0x000000011034e47e: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e488: mov    $0xa050f00,%eax
  0x000000011034e48d: callq  0x00000001100118a0  ; OopMap{[248]=Oop [200]=Oop off=10930}
                                                ;*new  ; - java.util.ArrayList::subList@9 (line 1005)
                                                ; - java.lang.String::split@302 (line 2378)
                                                ;   {runtime_call}
  0x000000011034e492: jmpq   0x000000011034da80
  0x000000011034e497: mov    %rdx,%rdx
  0x000000011034e49a: callq  0x000000011000e520  ; OopMap{[248]=Oop [200]=Oop off=10943}
                                                ;*new  ; - java.util.ArrayList::subList@9 (line 1005)
                                                ; - java.lang.String::split@302 (line 2378)
                                                ;   {runtime_call}
  0x000000011034e49f: jmpq   0x000000011034da8f
  0x000000011034e4a4: mov    %rax,(%rsp)
  0x000000011034e4a8: callq  0x0000000110010440  ; OopMap{off=10957}
                                                ;*checkcast
                                                ; - java.lang.String::split@312 (line 2378)
                                                ;   {runtime_call}
  0x000000011034e4ad: callq  0x000000011000f5a0  ; OopMap{r8=Oop [184]=Oop off=10962}
                                                ;*anewarray
                                                ; - java.lang.String::split@211 (line 2364)
                                                ;   {runtime_call}
  0x000000011034e4b2: jmpq   0x000000011034dd02
  0x000000011034e4b7: callq  0x000000011000e080  ; OopMap{r8=Oop [184]=Oop rax=Oop off=10972}
                                                ;*aastore
                                                ; - java.lang.String::split@217 (line 2364)
                                                ;   {runtime_call}
  0x000000011034e4bc: mov    %r8,(%rsp)
  0x000000011034e4c0: callq  0x0000000110010200  ; OopMap{r8=Oop [184]=Oop rax=Oop off=10981}
                                                ;*aastore
                                                ; - java.lang.String::split@217 (line 2364)
                                                ;   {runtime_call}
  0x000000011034e4c5: callq  0x000000011000e080  ; OopMap{[184]=Oop rax=Oop off=10986}
                                                ;*invokevirtual split
                                                ; - java.lang.String::split@322 (line 2380)
                                                ;   {runtime_call}
  0x000000011034e4ca: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e4d4: mov    $0xa050f00,%eax
  0x000000011034e4d9: callq  0x00000001100118a0  ; OopMap{rax=Oop [200]=Oop off=11006}
                                                ;*new  ; - java.util.ArrayList::rangeCheck@8 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e4de: jmpq   0x000000011034df20
  0x000000011034e4e3: mov    %rdx,%rdx
  0x000000011034e4e6: callq  0x000000011000e520  ; OopMap{rcx=Oop [200]=Oop off=11019}
                                                ;*new  ; - java.util.ArrayList::rangeCheck@8 (line 657)
                                                ; - java.util.ArrayList::get@2 (line 433)
                                                ; - java.lang.String::split@272 (line 2373)
                                                ;   {runtime_call}
  0x000000011034e4eb: jmpq   0x000000011034df32
  0x000000011034e4f0: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e4fa: mov    $0xa050f00,%eax
  0x000000011034e4ff: callq  0x00000001100118a0  ; OopMap{[184]=Oop [176]=Oop off=11044}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {runtime_call}
  0x000000011034e504: jmpq   0x000000011034dfa8
  0x000000011034e509: mov    %rdx,%rdx
  0x000000011034e50c: callq  0x000000011000e520  ; OopMap{[184]=Oop [176]=Oop off=11057}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {runtime_call}
  0x000000011034e511: jmpq   0x000000011034dfb7
  0x000000011034e516: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e520: mov    $0xa050f00,%eax
  0x000000011034e525: callq  0x00000001100118a0  ; OopMap{[176]=Oop [184]=Oop off=11082}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {runtime_call}
  0x000000011034e52a: jmpq   0x000000011034dff8
  0x000000011034e52f: mov    %rdx,%rdx
  0x000000011034e532: callq  0x000000011000e520  ; OopMap{[176]=Oop [184]=Oop off=11095}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {runtime_call}
  0x000000011034e537: jmpq   0x000000011034e007
  0x000000011034e53c: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034e546: mov    $0xa050f00,%eax
  0x000000011034e54b: callq  0x00000001100118a0  ; OopMap{[184]=Oop [176]=Oop off=11120}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {runtime_call}
  0x000000011034e550: jmpq   0x000000011034e048
  0x000000011034e555: mov    %rdx,%rdx
  0x000000011034e558: callq  0x000000011000e520  ; OopMap{[184]=Oop [176]=Oop off=11133}
                                                ;*new  ; - java.lang.String::charAt@13 (line 658)
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {runtime_call}
  0x000000011034e55d: jmpq   0x000000011034e057
  0x000000011034e562: nop
  0x000000011034e563: nop
  0x000000011034e564: mov    0x2a8(%r15),%rax
  0x000000011034e56b: movabs $0x0,%r10
  0x000000011034e575: mov    %r10,0x2a8(%r15)
  0x000000011034e57c: movabs $0x0,%r10
  0x000000011034e586: mov    %r10,0x2b0(%r15)
  0x000000011034e58d: add    $0x140,%rsp
  0x000000011034e594: pop    %rbp
  0x000000011034e595: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011034e59a: hlt
  0x000000011034e59b: hlt
  0x000000011034e59c: hlt
  0x000000011034e59d: hlt
  0x000000011034e59e: hlt
  0x000000011034e59f: hlt
[Stub Code]
  0x000000011034e5a0: nop                       ;   {no_reloc}
  0x000000011034e5a1: nop
  0x000000011034e5a2: nop
  0x000000011034e5a3: nop
  0x000000011034e5a4: nop
  0x000000011034e5a5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5af: jmpq   0x000000011034e5af  ;   {runtime_call}
  0x000000011034e5b4: nop
  0x000000011034e5b5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5bf: jmpq   0x000000011034e5bf  ;   {runtime_call}
  0x000000011034e5c4: nop
  0x000000011034e5c5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5cf: jmpq   0x000000011034e5cf  ;   {runtime_call}
  0x000000011034e5d4: nop
  0x000000011034e5d5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5df: jmpq   0x000000011034e5df  ;   {runtime_call}
  0x000000011034e5e4: nop
  0x000000011034e5e5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5ef: jmpq   0x000000011034e5ef  ;   {runtime_call}
  0x000000011034e5f4: nop
  0x000000011034e5f5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e5ff: jmpq   0x000000011034e5ff  ;   {runtime_call}
  0x000000011034e604: nop
  0x000000011034e605: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e60f: jmpq   0x000000011034e60f  ;   {runtime_call}
  0x000000011034e614: nop
  0x000000011034e615: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e61f: jmpq   0x000000011034e61f  ;   {runtime_call}
  0x000000011034e624: nop
  0x000000011034e625: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e62f: jmpq   0x000000011034e62f  ;   {runtime_call}
  0x000000011034e634: nop
  0x000000011034e635: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e63f: jmpq   0x000000011034e63f  ;   {runtime_call}
  0x000000011034e644: nop
  0x000000011034e645: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e64f: jmpq   0x000000011034e64f  ;   {runtime_call}
  0x000000011034e654: nop
  0x000000011034e655: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e65f: jmpq   0x000000011034e65f  ;   {runtime_call}
  0x000000011034e664: nop
  0x000000011034e665: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e66f: jmpq   0x000000011034e66f  ;   {runtime_call}
  0x000000011034e674: nop
  0x000000011034e675: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e67f: jmpq   0x000000011034e67f  ;   {runtime_call}
  0x000000011034e684: nop
  0x000000011034e685: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e68f: jmpq   0x000000011034e68f  ;   {runtime_call}
  0x000000011034e694: nop
  0x000000011034e695: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e69f: jmpq   0x000000011034e69f  ;   {runtime_call}
  0x000000011034e6a4: nop
  0x000000011034e6a5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e6af: jmpq   0x000000011034e6af  ;   {runtime_call}
  0x000000011034e6b4: nop
  0x000000011034e6b5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034e6bf: jmpq   0x000000011034e6bf  ;   {runtime_call}
[Exception Handler]
  0x000000011034e6c4: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011034e6c9: mov    %rsp,-0x28(%rsp)
  0x000000011034e6ce: sub    $0x80,%rsp
  0x000000011034e6d5: mov    %rax,0x78(%rsp)
  0x000000011034e6da: mov    %rcx,0x70(%rsp)
  0x000000011034e6df: mov    %rdx,0x68(%rsp)
  0x000000011034e6e4: mov    %rbx,0x60(%rsp)
  0x000000011034e6e9: mov    %rbp,0x50(%rsp)
  0x000000011034e6ee: mov    %rsi,0x48(%rsp)
  0x000000011034e6f3: mov    %rdi,0x40(%rsp)
  0x000000011034e6f8: mov    %r8,0x38(%rsp)
  0x000000011034e6fd: mov    %r9,0x30(%rsp)
  0x000000011034e702: mov    %r10,0x28(%rsp)
  0x000000011034e707: mov    %r11,0x20(%rsp)
  0x000000011034e70c: mov    %r12,0x18(%rsp)
  0x000000011034e711: mov    %r13,0x10(%rsp)
  0x000000011034e716: mov    %r14,0x8(%rsp)
  0x000000011034e71b: mov    %r15,(%rsp)
  0x000000011034e71f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011034e729: movabs $0x11034e6c9,%rsi  ;   {internal_word}
  0x000000011034e733: mov    %rsp,%rdx
  0x000000011034e736: and    $0xfffffffffffffff0,%rsp
  0x000000011034e73a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011034e73f: hlt
[Deopt Handler Code]
  0x000000011034e740: movabs $0x11034e740,%r10  ;   {section_word}
  0x000000011034e74a: push   %r10
  0x000000011034e74c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011034e751: hlt
  0x000000011034e752: hlt
  0x000000011034e753: hlt
  0x000000011034e754: hlt
  0x000000011034e755: hlt
  0x000000011034e756: hlt
  0x000000011034e757: hlt
Decoding compiled method 0x0000000110345350:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup'
  # this:     rsi:rsi   = 'java/lang/ThreadGroup'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x50]  (sp of caller)
  0x00000001103454e0: mov    0x8(%rsi),%r10d
  0x00000001103454e4: shl    $0x3,%r10
  0x00000001103454e8: cmp    %rax,%r10
  0x00000001103454eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103454f1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x00000001103454fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110345500: mov    %eax,-0x14000(%rsp)
  0x0000000110345507: push   %rbp
  0x0000000110345508: sub    $0x40,%rsp
  0x000000011034550c: mov    %rsi,0x20(%rsp)
  0x0000000110345511: movabs $0x12727b618,%rax  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x000000011034551b: mov    0xdc(%rax),%edi
  0x0000000110345521: add    $0x8,%edi
  0x0000000110345524: mov    %edi,0xdc(%rax)
  0x000000011034552a: movabs $0x126f45680,%rax  ;   {metadata({method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110345534: and    $0x0,%edi
  0x0000000110345537: cmp    $0x0,%edi
  0x000000011034553a: je     0x0000000110345948  ;*aload_0
                                                ; - java.lang.ThreadGroup::threadTerminated@0 (line 941)

  0x0000000110345540: lea    0x28(%rsp),%rdi
  0x0000000110345545: mov    %rsi,0x8(%rdi)
  0x0000000110345549: mov    (%rsi),%rax
  0x000000011034554c: mov    %rax,%rbx
  0x000000011034554f: and    $0x7,%rbx
  0x0000000110345553: cmp    $0x5,%rbx
  0x0000000110345557: jne    0x00000001103455de
  0x000000011034555d: mov    0x8(%rsi),%ebx
  0x0000000110345560: shl    $0x3,%rbx
  0x0000000110345564: mov    0xa8(%rbx),%rbx
  0x000000011034556b: or     %r15,%rbx
  0x000000011034556e: xor    %rax,%rbx
  0x0000000110345571: and    $0xffffffffffffff87,%rbx
  0x0000000110345575: je     0x0000000110345606
  0x000000011034557b: test   $0x7,%rbx
  0x0000000110345582: jne    0x00000001103455cb
  0x0000000110345584: test   $0x300,%rbx
  0x000000011034558b: jne    0x00000001103455aa
  0x000000011034558d: and    $0x37f,%rax
  0x0000000110345594: mov    %rax,%rbx
  0x0000000110345597: or     %r15,%rbx
  0x000000011034559a: lock cmpxchg %rbx,(%rsi)
  0x000000011034559f: jne    0x000000011034595f
  0x00000001103455a5: jmpq   0x0000000110345606
  0x00000001103455aa: mov    0x8(%rsi),%ebx
  0x00000001103455ad: shl    $0x3,%rbx
  0x00000001103455b1: mov    0xa8(%rbx),%rbx
  0x00000001103455b8: or     %r15,%rbx
  0x00000001103455bb: lock cmpxchg %rbx,(%rsi)
  0x00000001103455c0: jne    0x000000011034595f
  0x00000001103455c6: jmpq   0x0000000110345606
  0x00000001103455cb: mov    0x8(%rsi),%ebx
  0x00000001103455ce: shl    $0x3,%rbx
  0x00000001103455d2: mov    0xa8(%rbx),%rbx
  0x00000001103455d9: lock cmpxchg %rbx,(%rsi)
  0x00000001103455de: mov    (%rsi),%rax
  0x00000001103455e1: or     $0x1,%rax
  0x00000001103455e5: mov    %rax,(%rdi)
  0x00000001103455e8: lock cmpxchg %rdi,(%rsi)
  0x00000001103455ed: je     0x0000000110345606
  0x00000001103455f3: sub    %rsp,%rax
  0x00000001103455f6: and    $0xfffffffffffff007,%rax
  0x00000001103455fd: mov    %rax,(%rdi)
  0x0000000110345600: jne    0x000000011034595f  ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)

  0x0000000110345606: mov    %rsi,%rdi
  0x0000000110345609: movabs $0x12727b618,%rbx  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110345613: addq   $0x1,0x108(%rbx)
  0x000000011034561b: mov    %rsi,%rdi
  0x000000011034561e: mov    %rdi,%rsi          ;*invokespecial remove
                                                ; - java.lang.ThreadGroup::threadTerminated@6 (line 942)

  0x0000000110345621: nop
  0x0000000110345622: nop
  0x0000000110345623: nop
  0x0000000110345624: nop
  0x0000000110345625: nop
  0x0000000110345626: nop
  0x0000000110345627: callq  0x000000010ff580a0  ; OopMap{[32]=Oop [48]=Oop off=332}
                                                ;*invokespecial remove
                                                ; - java.lang.ThreadGroup::threadTerminated@6 (line 942)
                                                ;   {optimized virtual_call}
  0x000000011034562c: mov    0x20(%rsp),%rsi
  0x0000000110345631: mov    0x14(%rsi),%edi    ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::threadTerminated@10 (line 944)

  0x0000000110345634: cmp    $0x0,%edi
  0x0000000110345637: movabs $0x12727b618,%rdi  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110345641: movabs $0x118,%rbx
  0x000000011034564b: jne    0x000000011034565b
  0x0000000110345651: movabs $0x128,%rbx
  0x000000011034565b: mov    (%rdi,%rbx,1),%rax
  0x000000011034565f: lea    0x1(%rax),%rax
  0x0000000110345663: mov    %rax,(%rdi,%rbx,1)
  0x0000000110345667: jne    0x0000000110345711  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@13 (line 944)

  0x000000011034566d: mov    %rsi,%rdi
  0x0000000110345670: movabs $0x12727b618,%rbx  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x000000011034567a: mov    0x8(%rdi),%edi
  0x000000011034567d: shl    $0x3,%rdi
  0x0000000110345681: cmp    0x140(%rbx),%rdi
  0x0000000110345688: jne    0x0000000110345697
  0x000000011034568a: addq   $0x1,0x148(%rbx)
  0x0000000110345692: jmpq   0x00000001103456fd
  0x0000000110345697: cmp    0x150(%rbx),%rdi
  0x000000011034569e: jne    0x00000001103456ad
  0x00000001103456a0: addq   $0x1,0x158(%rbx)
  0x00000001103456a8: jmpq   0x00000001103456fd
  0x00000001103456ad: cmpq   $0x0,0x140(%rbx)
  0x00000001103456b8: jne    0x00000001103456d1
  0x00000001103456ba: mov    %rdi,0x140(%rbx)
  0x00000001103456c1: movq   $0x1,0x148(%rbx)
  0x00000001103456cc: jmpq   0x00000001103456fd
  0x00000001103456d1: cmpq   $0x0,0x150(%rbx)
  0x00000001103456dc: jne    0x00000001103456f5
  0x00000001103456de: mov    %rdi,0x150(%rbx)
  0x00000001103456e5: movq   $0x1,0x158(%rbx)
  0x00000001103456f0: jmpq   0x00000001103456fd
  0x00000001103456f5: addq   $0x1,0x138(%rbx)
  0x00000001103456fd: mov    %rsi,%rdi
  0x0000000110345700: mov    %rdi,%rsi          ;*invokevirtual notifyAll
                                                ; - java.lang.ThreadGroup::threadTerminated@17 (line 945)

  0x0000000110345703: nop
  0x0000000110345704: nop
  0x0000000110345705: nop
  0x0000000110345706: nop
  0x0000000110345707: callq  0x000000010ff580a0  ; OopMap{[32]=Oop [48]=Oop off=556}
                                                ;*invokevirtual notifyAll
                                                ; - java.lang.ThreadGroup::threadTerminated@17 (line 945)
                                                ;   {optimized virtual_call}
  0x000000011034570c: mov    0x20(%rsp),%rsi
  0x0000000110345711: movsbl 0x1d(%rsi),%edi    ;*getfield daemon
                                                ; - java.lang.ThreadGroup::threadTerminated@21 (line 947)

  0x0000000110345715: cmp    $0x0,%edi
  0x0000000110345718: movabs $0x12727b618,%rdi  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110345722: movabs $0x168,%rbx
  0x000000011034572c: je     0x000000011034573c
  0x0000000110345732: movabs $0x178,%rbx
  0x000000011034573c: mov    (%rdi,%rbx,1),%rax
  0x0000000110345740: lea    0x1(%rax),%rax
  0x0000000110345744: mov    %rax,(%rdi,%rbx,1)
  0x0000000110345748: je     0x00000001103458a4  ;*ifeq
                                                ; - java.lang.ThreadGroup::threadTerminated@24 (line 947)

  0x000000011034574e: mov    0x14(%rsi),%edi    ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::threadTerminated@28 (line 947)

  0x0000000110345751: cmp    $0x0,%edi
  0x0000000110345754: movabs $0x12727b618,%rdi  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x000000011034575e: movabs $0x188,%rbx
  0x0000000110345768: jne    0x0000000110345778
  0x000000011034576e: movabs $0x198,%rbx
  0x0000000110345778: mov    (%rdi,%rbx,1),%rax
  0x000000011034577c: lea    0x1(%rax),%rax
  0x0000000110345780: mov    %rax,(%rdi,%rbx,1)
  0x0000000110345784: jne    0x00000001103458a4  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@31 (line 947)

  0x000000011034578a: mov    0x10(%rsi),%edi    ;*getfield nUnstartedThreads
                                                ; - java.lang.ThreadGroup::threadTerminated@35 (line 947)

  0x000000011034578d: cmp    $0x0,%edi
  0x0000000110345790: movabs $0x12727b618,%rdi  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x000000011034579a: movabs $0x1a8,%rbx
  0x00000001103457a4: jne    0x00000001103457b4
  0x00000001103457aa: movabs $0x1b8,%rbx
  0x00000001103457b4: mov    (%rdi,%rbx,1),%rax
  0x00000001103457b8: lea    0x1(%rax),%rax
  0x00000001103457bc: mov    %rax,(%rdi,%rbx,1)
  0x00000001103457c0: jne    0x00000001103458a4  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@38 (line 947)

  0x00000001103457c6: mov    0x18(%rsi),%edi    ;*getfield ngroups
                                                ; - java.lang.ThreadGroup::threadTerminated@42 (line 947)

  0x00000001103457c9: cmp    $0x0,%edi
  0x00000001103457cc: movabs $0x12727b618,%rdi  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x00000001103457d6: movabs $0x1c8,%rbx
  0x00000001103457e0: jne    0x00000001103457f0
  0x00000001103457e6: movabs $0x1d8,%rbx
  0x00000001103457f0: mov    (%rdi,%rbx,1),%rax
  0x00000001103457f4: lea    0x1(%rax),%rax
  0x00000001103457f8: mov    %rax,(%rdi,%rbx,1)
  0x00000001103457fc: jne    0x00000001103458a4  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@45 (line 947)

  0x0000000110345802: mov    %rsi,%rdi
  0x0000000110345805: movabs $0x12727b618,%rbx  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x000000011034580f: mov    0x8(%rdi),%edi
  0x0000000110345812: shl    $0x3,%rdi
  0x0000000110345816: cmp    0x1f0(%rbx),%rdi
  0x000000011034581d: jne    0x000000011034582c
  0x000000011034581f: addq   $0x1,0x1f8(%rbx)
  0x0000000110345827: jmpq   0x0000000110345892
  0x000000011034582c: cmp    0x200(%rbx),%rdi
  0x0000000110345833: jne    0x0000000110345842
  0x0000000110345835: addq   $0x1,0x208(%rbx)
  0x000000011034583d: jmpq   0x0000000110345892
  0x0000000110345842: cmpq   $0x0,0x1f0(%rbx)
  0x000000011034584d: jne    0x0000000110345866
  0x000000011034584f: mov    %rdi,0x1f0(%rbx)
  0x0000000110345856: movq   $0x1,0x1f8(%rbx)
  0x0000000110345861: jmpq   0x0000000110345892
  0x0000000110345866: cmpq   $0x0,0x200(%rbx)
  0x0000000110345871: jne    0x000000011034588a
  0x0000000110345873: mov    %rdi,0x200(%rbx)
  0x000000011034587a: movq   $0x1,0x208(%rbx)
  0x0000000110345885: jmpq   0x0000000110345892
  0x000000011034588a: addq   $0x1,0x1e8(%rbx)
  0x0000000110345892: mov    %rsi,%rdi
  0x0000000110345895: mov    %rdi,%rsi          ;*invokevirtual destroy
                                                ; - java.lang.ThreadGroup::threadTerminated@49 (line 950)

  0x0000000110345898: nop
  0x0000000110345899: nop
  0x000000011034589a: nop
  0x000000011034589b: nop
  0x000000011034589c: nop
  0x000000011034589d: nop
  0x000000011034589e: nop
  0x000000011034589f: callq  0x000000010ff580a0  ; OopMap{[32]=Oop [48]=Oop off=964}
                                                ;*invokevirtual destroy
                                                ; - java.lang.ThreadGroup::threadTerminated@49 (line 950)
                                                ;   {optimized virtual_call}
  0x00000001103458a4: lea    0x28(%rsp),%rax
  0x00000001103458a9: mov    0x8(%rax),%rdi
  0x00000001103458ad: mov    (%rdi),%rsi
  0x00000001103458b0: and    $0x7,%rsi
  0x00000001103458b4: cmp    $0x5,%rsi
  0x00000001103458b8: je     0x00000001103458d5
  0x00000001103458be: mov    (%rax),%rsi
  0x00000001103458c1: test   %rsi,%rsi
  0x00000001103458c4: je     0x00000001103458d5
  0x00000001103458ca: lock cmpxchg %rsi,(%rdi)
  0x00000001103458cf: jne    0x0000000110345972  ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@53 (line 952)

  0x00000001103458d5: movabs $0x12727b618,%rax  ;   {metadata(method data for {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x00000001103458df: incl   0x218(%rax)        ;*goto
                                                ; - java.lang.ThreadGroup::threadTerminated@54 (line 952)

  0x00000001103458e5: add    $0x40,%rsp
  0x00000001103458e9: pop    %rbp
  0x00000001103458ea: test   %eax,-0x372c7f0(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103458f0: retq                      ;*return
                                                ; - java.lang.ThreadGroup::threadTerminated@62 (line 953)

  0x00000001103458f1: mov    0x2a8(%r15),%rax
  0x00000001103458f8: xor    %r10,%r10
  0x00000001103458fb: mov    %r10,0x2a8(%r15)
  0x0000000110345902: xor    %r10,%r10
  0x0000000110345905: mov    %r10,0x2b0(%r15)
  0x000000011034590c: mov    %rax,%rsi
  0x000000011034590f: lea    0x28(%rsp),%rax
  0x0000000110345914: mov    0x8(%rax),%rbx
  0x0000000110345918: mov    (%rbx),%rdi
  0x000000011034591b: and    $0x7,%rdi
  0x000000011034591f: cmp    $0x5,%rdi
  0x0000000110345923: je     0x0000000110345940
  0x0000000110345929: mov    (%rax),%rdi
  0x000000011034592c: test   %rdi,%rdi
  0x000000011034592f: je     0x0000000110345940
  0x0000000110345935: lock cmpxchg %rdi,(%rbx)
  0x000000011034593a: jne    0x0000000110345985  ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@59 (line 952)

  0x0000000110345940: mov    %rsi,%rax
  0x0000000110345943: jmpq   0x00000001103459c0
  0x0000000110345948: mov    %rax,0x8(%rsp)
  0x000000011034594d: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110345955: callq  0x00000001100129e0  ; OopMap{rsi=Oop [32]=Oop rdx=Oop off=1146}
                                                ;*synchronization entry
                                                ; - java.lang.ThreadGroup::threadTerminated@-1 (line 941)
                                                ;   {runtime_call}
  0x000000011034595a: jmpq   0x0000000110345540
  0x000000011034595f: mov    %rsi,0x8(%rsp)
  0x0000000110345964: mov    %rdi,(%rsp)
  0x0000000110345968: callq  0x0000000110010c20  ; OopMap{rsi=Oop [32]=Oop rdx=Oop [48]=Oop off=1165}
                                                ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)
                                                ;   {runtime_call}
  0x000000011034596d: jmpq   0x0000000110345606
  0x0000000110345972: lea    0x28(%rsp),%rax
  0x0000000110345977: mov    %rax,(%rsp)
  0x000000011034597b: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110345980: jmpq   0x00000001103458d5
  0x0000000110345985: lea    0x28(%rsp),%rax
  0x000000011034598a: mov    %rax,(%rsp)
  0x000000011034598e: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110345993: jmp    0x0000000110345940
  0x0000000110345995: nop
  0x0000000110345996: nop
  0x0000000110345997: mov    0x2a8(%r15),%rax
  0x000000011034599e: movabs $0x0,%r10
  0x00000001103459a8: mov    %r10,0x2a8(%r15)
  0x00000001103459af: movabs $0x0,%r10
  0x00000001103459b9: mov    %r10,0x2b0(%r15)
  0x00000001103459c0: add    $0x40,%rsp
  0x00000001103459c4: pop    %rbp
  0x00000001103459c5: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103459ca: hlt
  0x00000001103459cb: hlt
  0x00000001103459cc: hlt
  0x00000001103459cd: hlt
  0x00000001103459ce: hlt
  0x00000001103459cf: hlt
  0x00000001103459d0: hlt
  0x00000001103459d1: hlt
  0x00000001103459d2: hlt
  0x00000001103459d3: hlt
  0x00000001103459d4: hlt
  0x00000001103459d5: hlt
  0x00000001103459d6: hlt
  0x00000001103459d7: hlt
  0x00000001103459d8: hlt
  0x00000001103459d9: hlt
  0x00000001103459da: hlt
  0x00000001103459db: hlt
  0x00000001103459dc: hlt
  0x00000001103459dd: hlt
  0x00000001103459de: hlt
  0x00000001103459df: hlt
[Stub Code]
  0x00000001103459e0: nop                       ;   {no_reloc}
  0x00000001103459e1: nop
  0x00000001103459e2: nop
  0x00000001103459e3: nop
  0x00000001103459e4: nop
  0x00000001103459e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103459ef: jmpq   0x00000001103459ef  ;   {runtime_call}
  0x00000001103459f4: nop
  0x00000001103459f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103459ff: jmpq   0x00000001103459ff  ;   {runtime_call}
  0x0000000110345a04: nop
  0x0000000110345a05: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110345a0f: jmpq   0x0000000110345a0f  ;   {runtime_call}
[Exception Handler]
  0x0000000110345a14: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110345a19: mov    %rsp,-0x28(%rsp)
  0x0000000110345a1e: sub    $0x80,%rsp
  0x0000000110345a25: mov    %rax,0x78(%rsp)
  0x0000000110345a2a: mov    %rcx,0x70(%rsp)
  0x0000000110345a2f: mov    %rdx,0x68(%rsp)
  0x0000000110345a34: mov    %rbx,0x60(%rsp)
  0x0000000110345a39: mov    %rbp,0x50(%rsp)
  0x0000000110345a3e: mov    %rsi,0x48(%rsp)
  0x0000000110345a43: mov    %rdi,0x40(%rsp)
  0x0000000110345a48: mov    %r8,0x38(%rsp)
  0x0000000110345a4d: mov    %r9,0x30(%rsp)
  0x0000000110345a52: mov    %r10,0x28(%rsp)
  0x0000000110345a57: mov    %r11,0x20(%rsp)
  0x0000000110345a5c: mov    %r12,0x18(%rsp)
  0x0000000110345a61: mov    %r13,0x10(%rsp)
  0x0000000110345a66: mov    %r14,0x8(%rsp)
  0x0000000110345a6b: mov    %r15,(%rsp)
  0x0000000110345a6f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110345a79: movabs $0x110345a19,%rsi  ;   {internal_word}
  0x0000000110345a83: mov    %rsp,%rdx
  0x0000000110345a86: and    $0xfffffffffffffff0,%rsp
  0x0000000110345a8a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110345a8f: hlt
[Deopt Handler Code]
  0x0000000110345a90: movabs $0x110345a90,%r10  ;   {section_word}
  0x0000000110345a9a: push   %r10
  0x0000000110345a9c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110345aa1: hlt
  0x0000000110345aa2: hlt
  0x0000000110345aa3: hlt
  0x0000000110345aa4: hlt
  0x0000000110345aa5: hlt
  0x0000000110345aa6: hlt
  0x0000000110345aa7: hlt
Decoding compiled method 0x0000000110344b90:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f18458} 'split' '(Ljava/lang/String;I)[Ljava/lang/String;' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/String'
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x0000000110344d20: mov    0x8(%rsi),%r10d
  0x0000000110344d24: shl    $0x3,%r10
  0x0000000110344d28: cmp    %r10,%rax
  0x0000000110344d2b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110344d31: data32 xchg %ax,%ax
  0x0000000110344d34: nopl   0x0(%rax,%rax,1)
  0x0000000110344d3c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110344d40: mov    %eax,-0x14000(%rsp)
  0x0000000110344d47: push   %rbp
  0x0000000110344d48: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - java.lang.String::split@-1 (line 2336)

  0x0000000110344d4c: mov    %ecx,0x8(%rsp)
  0x0000000110344d50: mov    %rsi,(%rsp)
  0x0000000110344d54: mov    %rdx,%rbp
  0x0000000110344d57: mov    0xc(%rdx),%r10d    ;*getfield value
                                                ; - java.lang.String::split@3 (line 2337)
                                                ; implicit exception: dispatches to 0x0000000110344e85
  0x0000000110344d5b: mov    0xc(%r12,%r10,8),%r8d  ; implicit exception: dispatches to 0x0000000110344e95
  0x0000000110344d60: cmp    $0x1,%r8d
  0x0000000110344d64: je     0x0000000110344e0d  ;*aload_1
                                                ; - java.lang.String::split@27 (line 2338)

  0x0000000110344d6a: mov    0xc(%r12,%r10,8),%r10d
  0x0000000110344d6f: cmp    $0x2,%r10d
  0x0000000110344d73: jne    0x0000000110344dfc  ;*if_icmpne
                                                ; - java.lang.String::split@32 (line 2339)

  0x0000000110344d79: mov    %rbp,0x10(%rsp)
  0x0000000110344d7e: mov    %rbp,%rsi
  0x0000000110344d81: xor    %edx,%edx
  0x0000000110344d83: callq  0x000000010ff580a0  ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=104}
                                                ;*invokevirtual charAt
                                                ; - java.lang.String::split@37 (line 2340)
                                                ;   {optimized virtual_call}
  0x0000000110344d88: cmp    $0x5c,%eax
  0x0000000110344d8b: jne    0x0000000110344dfc  ;*if_icmpne
                                                ; - java.lang.String::split@42 (line 2340)

  0x0000000110344d8d: mov    %rbp,%rsi
  0x0000000110344d90: mov    $0x1,%edx
  0x0000000110344d95: xchg   %ax,%ax
  0x0000000110344d97: callq  0x000000010ff580a0  ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=124}
                                                ;*invokevirtual charAt
                                                ; - java.lang.String::split@47 (line 2341)
                                                ;   {optimized virtual_call}
  0x0000000110344d9c: mov    %eax,%r10d
  0x0000000110344d9f: add    $0xffffffffffffffd0,%r10d
  0x0000000110344da3: mov    $0x39,%r11d
  0x0000000110344da9: sub    %eax,%r11d
  0x0000000110344dac: or     %r11d,%r10d
  0x0000000110344daf: test   %r10d,%r10d
  0x0000000110344db2: jge    0x0000000110344dfc  ;*ifge
                                                ; - java.lang.String::split@60 (line 2341)

  0x0000000110344db4: mov    %eax,%r10d
  0x0000000110344db7: add    $0xffffffffffffff9f,%r10d
  0x0000000110344dbb: mov    $0x7a,%r11d
  0x0000000110344dc1: sub    %eax,%r11d
  0x0000000110344dc4: or     %r11d,%r10d
  0x0000000110344dc7: test   %r10d,%r10d
  0x0000000110344dca: jge    0x0000000110344dfc  ;*ifge
                                                ; - java.lang.String::split@72 (line 2341)

  0x0000000110344dcc: mov    %eax,%r10d
  0x0000000110344dcf: add    $0xffffffffffffffbf,%r10d
  0x0000000110344dd3: mov    $0x5a,%r11d
  0x0000000110344dd9: sub    %eax,%r11d
  0x0000000110344ddc: or     %r11d,%r10d
  0x0000000110344ddf: test   %r10d,%r10d
  0x0000000110344de2: jge    0x0000000110344dfc  ;*iload_3
                                                ; - java.lang.String::split@87 (line 2341)

  0x0000000110344de4: mov    %eax,%r11d
  0x0000000110344de7: add    $0xffff2800,%r11d
  0x0000000110344dee: cmp    $0x800,%r11d
  0x0000000110344df5: jae    0x0000000110344e5d  ;*if_icmple
                                                ; - java.lang.String::split@96 (line 2341)

  0x0000000110344df7: mov    0x10(%rsp),%rbp    ;*if_icmpne
                                                ; - java.lang.String::split@42 (line 2340)

  0x0000000110344dfc: mov    $0x54,%esi
  0x0000000110344e01: xchg   %ax,%ax
  0x0000000110344e03: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop off=232}
                                                ;*invokestatic compile
                                                ; - java.lang.String::split@317 (line 2380)
                                                ;   {runtime_call}
  0x0000000110344e08: callq  0x000000010e0276f4  ;*invokestatic compile
                                                ; - java.lang.String::split@317 (line 2380)
                                                ;   {runtime_call}
  0x0000000110344e0d: mov    %rdx,%rsi
  0x0000000110344e10: xor    %edx,%edx
  0x0000000110344e12: nop
  0x0000000110344e13: callq  0x000000010ff580a0  ; OopMap{rbp=Oop [0]=Oop off=248}
                                                ;*invokevirtual charAt
                                                ; - java.lang.String::split@15 (line 2338)
                                                ;   {optimized virtual_call}
  0x0000000110344e18: mov    %rbp,0x10(%rsp)
  0x0000000110344e1d: mov    %eax,%ebp
  0x0000000110344e1f: movabs $0x76ad95ef0,%rsi  ;   {oop(".$|()[{^?*+\")}
  0x0000000110344e29: mov    %eax,%edx
  0x0000000110344e2b: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=272}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::split@20 (line 2338)
                                                ;   {optimized virtual_call}
  0x0000000110344e30: cmp    $0xffffffffffffffff,%eax
  0x0000000110344e33: je     0x0000000110344e59  ;*if_icmpeq
                                                ; - java.lang.String::split@24 (line 2338)

  0x0000000110344e35: mov    0x10(%rsp),%rbp
  0x0000000110344e3a: mov    0xc(%rbp),%r10d    ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)

  0x0000000110344e3e: test   %r10d,%r10d
  0x0000000110344e41: jne    0x0000000110344d6a
  0x0000000110344e47: mov    $0xfffffff6,%esi
  0x0000000110344e4c: data32 xchg %ax,%ax
  0x0000000110344e4f: callq  0x000000010ff576a0  ; OopMap{off=308}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)
                                                ;   {runtime_call}
  0x0000000110344e54: callq  0x000000010e0276f4  ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; - java.lang.String::split@28 (line 2339)
                                                ;   {runtime_call}
  0x0000000110344e59: mov    %ebp,%eax
  0x0000000110344e5b: jmp    0x0000000110344de4
  0x0000000110344e5d: mov    0x8(%rsp),%r8d
  0x0000000110344e62: mov    $0x1,%ebp
  0x0000000110344e67: xor    %r10d,%r10d
  0x0000000110344e6a: test   %r8d,%r8d
  0x0000000110344e6d: cmovle %r10d,%ebp         ;*istore
                                                ; - java.lang.String::split@114 (line 2349)

  0x0000000110344e71: mov    $0x5c,%esi
  0x0000000110344e76: mov    %eax,0xc(%rsp)
  0x0000000110344e7a: nop
  0x0000000110344e7b: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=352}
                                                ;*new  ; - java.lang.String::split@116 (line 2350)
                                                ;   {runtime_call}
  0x0000000110344e80: callq  0x000000010e0276f4  ;*new
                                                ; - java.lang.String::split@116 (line 2350)
                                                ;   {runtime_call}
  0x0000000110344e85: mov    $0xfffffff6,%esi
  0x0000000110344e8a: nop
  0x0000000110344e8b: callq  0x000000010ff576a0  ; OopMap{off=368}
                                                ;*getfield value
                                                ; - java.lang.String::split@3 (line 2337)
                                                ;   {runtime_call}
  0x0000000110344e90: callq  0x000000010e0276f4  ;*getfield value
                                                ; - java.lang.String::split@3 (line 2337)
                                                ;   {runtime_call}
  0x0000000110344e95: mov    $0xfffffff6,%esi
  0x0000000110344e9a: nop
  0x0000000110344e9b: callq  0x000000010ff576a0  ; OopMap{off=384}
                                                ;*arraylength
                                                ; - java.lang.String::split@6 (line 2337)
                                                ;   {runtime_call}
  0x0000000110344ea0: callq  0x000000010e0276f4  ;*invokevirtual indexOf
                                                ; - java.lang.String::split@20 (line 2338)
                                                ;   {runtime_call}
  0x0000000110344ea5: mov    %rax,%rsi
  0x0000000110344ea8: jmp    0x0000000110344eb7  ;*invokevirtual charAt
                                                ; - java.lang.String::split@15 (line 2338)

  0x0000000110344eaa: mov    %rax,%rsi
  0x0000000110344ead: jmp    0x0000000110344eb7  ;*invokevirtual charAt
                                                ; - java.lang.String::split@37 (line 2340)

  0x0000000110344eaf: mov    %rax,%rsi
  0x0000000110344eb2: jmp    0x0000000110344eb7  ;*invokevirtual charAt
                                                ; - java.lang.String::split@47 (line 2341)

  0x0000000110344eb4: mov    %rax,%rsi          ;*invokevirtual indexOf
                                                ; - java.lang.String::split@20 (line 2338)

  0x0000000110344eb7: add    $0x30,%rsp
  0x0000000110344ebb: pop    %rbp
  0x0000000110344ebc: jmpq   0x0000000110019060  ;   {runtime_call}
  0x0000000110344ec1: hlt
  0x0000000110344ec2: hlt
  0x0000000110344ec3: hlt
  0x0000000110344ec4: hlt
  0x0000000110344ec5: hlt
  0x0000000110344ec6: hlt
  0x0000000110344ec7: hlt
  0x0000000110344ec8: hlt
  0x0000000110344ec9: hlt
  0x0000000110344eca: hlt
  0x0000000110344ecb: hlt
  0x0000000110344ecc: hlt
  0x0000000110344ecd: hlt
  0x0000000110344ece: hlt
  0x0000000110344ecf: hlt
  0x0000000110344ed0: hlt
  0x0000000110344ed1: hlt
  0x0000000110344ed2: hlt
  0x0000000110344ed3: hlt
  0x0000000110344ed4: hlt
  0x0000000110344ed5: hlt
  0x0000000110344ed6: hlt
  0x0000000110344ed7: hlt
  0x0000000110344ed8: hlt
  0x0000000110344ed9: hlt
  0x0000000110344eda: hlt
  0x0000000110344edb: hlt
  0x0000000110344edc: hlt
  0x0000000110344edd: hlt
  0x0000000110344ede: hlt
  0x0000000110344edf: hlt
[Stub Code]
  0x0000000110344ee0: movabs $0x0,%rbx          ;   {no_reloc}
  0x0000000110344eea: jmpq   0x0000000110344eea  ;   {runtime_call}
  0x0000000110344eef: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110344ef9: jmpq   0x0000000110344ef9  ;   {runtime_call}
  0x0000000110344efe: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110344f08: jmpq   0x0000000110344f08  ;   {runtime_call}
  0x0000000110344f0d: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110344f17: jmpq   0x0000000110344f17  ;   {runtime_call}
[Exception Handler]
  0x0000000110344f1c: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110344f21: callq  0x0000000110344f26
  0x0000000110344f26: subq   $0x5,(%rsp)
  0x0000000110344f2b: jmpq   0x000000010ff59500  ;   {runtime_call}
Decoding compiled method 0x00000001103517d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127219e10} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/BaseCalendar$Date'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar$Date'
  # parm0:    rdx:rdx   = 'java/util/TimeZone'
  #           [sp+0x70]  (sp of caller)
  0x0000000110351940: mov    0x8(%rsi),%r10d
  0x0000000110351944: shl    $0x3,%r10
  0x0000000110351948: cmp    %rax,%r10
  0x000000011035194b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110351951: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035195c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110351960: mov    %eax,-0x14000(%rsp)
  0x0000000110351967: push   %rbp
  0x0000000110351968: sub    $0x60,%rsp
  0x000000011035196c: movabs $0x12727d9c0,%rdi  ;   {metadata(method data for {method} {0x0000000127219e10} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/BaseCalendar$Date')}
  0x0000000110351976: mov    0xdc(%rdi),%ebx
  0x000000011035197c: add    $0x8,%ebx
  0x000000011035197f: mov    %ebx,0xdc(%rdi)
  0x0000000110351985: movabs $0x127219e10,%rdi  ;   {metadata({method} {0x0000000127219e10} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035198f: and    $0x0,%ebx
  0x0000000110351992: cmp    $0x0,%ebx
  0x0000000110351995: je     0x0000000110351a7f  ;*aload_0
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@0 (line 148)

  0x000000011035199b: mov    %rsi,%rdi
  0x000000011035199e: movabs $0x12727d9c0,%rbx  ;   {metadata(method data for {method} {0x0000000127219e10} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/BaseCalendar$Date')}
  0x00000001103519a8: addq   $0x1,0x108(%rbx)
  0x00000001103519b0: movabs $0x12727daf8,%rdi  ;   {metadata(method data for {method} {0x000000012721b018} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/CalendarDate')}
  0x00000001103519ba: mov    0xdc(%rdi),%ebx
  0x00000001103519c0: add    $0x8,%ebx
  0x00000001103519c3: mov    %ebx,0xdc(%rdi)
  0x00000001103519c9: movabs $0x12721b018,%rdi  ;   {metadata({method} {0x000000012721b018} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/CalendarDate')}
  0x00000001103519d3: and    $0x7ffff8,%ebx
  0x00000001103519d9: cmp    $0x0,%ebx
  0x00000001103519dc: je     0x0000000110351a96
  0x00000001103519e2: mov    %rsi,%rdi
  0x00000001103519e5: movabs $0x12727daf8,%rbx  ;   {metadata(method data for {method} {0x000000012721b018} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/CalendarDate')}
  0x00000001103519ef: addq   $0x1,0x108(%rbx)
  0x00000001103519f7: movabs $0x12708aa48,%rdi  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110351a01: mov    0xdc(%rdi),%ebx
  0x0000000110351a07: add    $0x8,%ebx
  0x0000000110351a0a: mov    %ebx,0xdc(%rdi)
  0x0000000110351a10: movabs $0x126f12480,%rdi  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110351a1a: and    $0x7ffff8,%ebx
  0x0000000110351a20: cmp    $0x0,%ebx
  0x0000000110351a23: je     0x0000000110351aad
  0x0000000110351a29: movl   $0x80000000,0x20(%rsi)  ;*putfield dayOfWeek
                                                ; - sun.util.calendar.CalendarDate::<init>@7 (line 71)
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)

  0x0000000110351a30: mov    %rdx,%r10
  0x0000000110351a33: shr    $0x3,%r10
  0x0000000110351a37: mov    %r10d,0x44(%rsi)
  0x0000000110351a3b: mov    %rsi,%rdi
  0x0000000110351a3e: shr    $0x9,%rdi
  0x0000000110351a42: movabs $0x109ac3000,%rbx
  0x0000000110351a4c: movb   $0x0,(%rdi,%rbx,1)  ;*putfield zoneinfo
                                                ; - sun.util.calendar.CalendarDate::<init>@12 (line 94)
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)

  0x0000000110351a50: movl   $0x7d4,0x4c(%rsi)  ;*putfield cachedYear
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@9 (line 164)

  0x0000000110351a57: movabs $0xb29bd,%r10
  0x0000000110351a61: mov    %r10,0x50(%rsi)    ;*putfield cachedFixedDateJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@16 (line 165)

  0x0000000110351a65: movabs $0xb2b2b,%r10
  0x0000000110351a6f: mov    %r10,0x58(%rsi)    ;*putfield cachedFixedDateNextJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@28 (line 166)

  0x0000000110351a73: add    $0x60,%rsp
  0x0000000110351a77: pop    %rbp
  0x0000000110351a78: test   %eax,-0x373897e(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110351a7e: retq
  0x0000000110351a7f: mov    %rdi,0x8(%rsp)
  0x0000000110351a84: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110351a8c: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=337}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@-1 (line 148)
                                                ;   {runtime_call}
  0x0000000110351a91: jmpq   0x000000011035199b
  0x0000000110351a96: mov    %rdi,0x8(%rsp)
  0x0000000110351a9b: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110351aa3: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=360}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarDate::<init>@-1 (line 93)
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)
                                                ;   {runtime_call}
  0x0000000110351aa8: jmpq   0x00000001103519e2
  0x0000000110351aad: mov    %rdi,0x8(%rsp)
  0x0000000110351ab2: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110351aba: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=383}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - sun.util.calendar.CalendarDate::<init>@1 (line 93)
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)
                                                ;   {runtime_call}
  0x0000000110351abf: jmpq   0x0000000110351a29
  0x0000000110351ac4: nop
  0x0000000110351ac5: nop
  0x0000000110351ac6: mov    0x2a8(%r15),%rax
  0x0000000110351acd: movabs $0x0,%r10
  0x0000000110351ad7: mov    %r10,0x2a8(%r15)
  0x0000000110351ade: movabs $0x0,%r10
  0x0000000110351ae8: mov    %r10,0x2b0(%r15)
  0x0000000110351aef: add    $0x60,%rsp
  0x0000000110351af3: pop    %rbp
  0x0000000110351af4: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110351af9: hlt
  0x0000000110351afa: hlt
  0x0000000110351afb: hlt
  0x0000000110351afc: hlt
  0x0000000110351afd: hlt
  0x0000000110351afe: hlt
  0x0000000110351aff: hlt
[Exception Handler]
[Stub Code]
  0x0000000110351b00: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110351b05: mov    %rsp,-0x28(%rsp)
  0x0000000110351b0a: sub    $0x80,%rsp
  0x0000000110351b11: mov    %rax,0x78(%rsp)
  0x0000000110351b16: mov    %rcx,0x70(%rsp)
  0x0000000110351b1b: mov    %rdx,0x68(%rsp)
  0x0000000110351b20: mov    %rbx,0x60(%rsp)
  0x0000000110351b25: mov    %rbp,0x50(%rsp)
  0x0000000110351b2a: mov    %rsi,0x48(%rsp)
  0x0000000110351b2f: mov    %rdi,0x40(%rsp)
  0x0000000110351b34: mov    %r8,0x38(%rsp)
  0x0000000110351b39: mov    %r9,0x30(%rsp)
  0x0000000110351b3e: mov    %r10,0x28(%rsp)
  0x0000000110351b43: mov    %r11,0x20(%rsp)
  0x0000000110351b48: mov    %r12,0x18(%rsp)
  0x0000000110351b4d: mov    %r13,0x10(%rsp)
  0x0000000110351b52: mov    %r14,0x8(%rsp)
  0x0000000110351b57: mov    %r15,(%rsp)
  0x0000000110351b5b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110351b65: movabs $0x110351b05,%rsi  ;   {internal_word}
  0x0000000110351b6f: mov    %rsp,%rdx
  0x0000000110351b72: and    $0xfffffffffffffff0,%rsp
  0x0000000110351b76: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110351b7b: hlt
[Deopt Handler Code]
  0x0000000110351b7c: movabs $0x110351b7c,%r10  ;   {section_word}
  0x0000000110351b86: push   %r10
  0x0000000110351b88: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110351b8d: hlt
  0x0000000110351b8e: hlt
  0x0000000110351b8f: hlt
Decoding compiled method 0x0000000110344890:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127219e10} '<init>' '(Ljava/util/TimeZone;)V' in 'sun/util/calendar/BaseCalendar$Date'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar$Date'
  # parm0:    rdx:rdx   = 'java/util/TimeZone'
  #           [sp+0x20]  (sp of caller)
  0x00000001103449e0: mov    0x8(%rsi),%r10d
  0x00000001103449e4: shl    $0x3,%r10
  0x00000001103449e8: cmp    %r10,%rax
  0x00000001103449eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103449f1: data32 xchg %ax,%ax
  0x00000001103449f4: nopl   0x0(%rax,%rax,1)
  0x00000001103449fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110344a00: mov    %eax,-0x14000(%rsp)
  0x0000000110344a07: push   %rbp
  0x0000000110344a08: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@-1 (line 148)

  0x0000000110344a0c: mov    %rsi,%rbp
  0x0000000110344a0f: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=52}
                                                ;*invokespecial <init>
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)
                                                ;   {optimized virtual_call}
  0x0000000110344a14: movl   $0x7d4,0x4c(%rbp)  ;*putfield cachedYear
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@9 (line 164)

  0x0000000110344a1b: movq   $0xb2b2b,0x58(%rbp)  ;*putfield cachedFixedDateNextJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@28 (line 166)

  0x0000000110344a23: movq   $0xb29bd,0x50(%rbp)  ;*putfield cachedFixedDateJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@16 (line 165)

  0x0000000110344a2b: add    $0x10,%rsp
  0x0000000110344a2f: pop    %rbp
  0x0000000110344a30: test   %eax,-0x372ba36(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110344a36: retq                      ;*invokespecial <init>
                                                ; - sun.util.calendar.BaseCalendar$Date::<init>@2 (line 148)

  0x0000000110344a37: mov    %rax,%rsi
  0x0000000110344a3a: add    $0x10,%rsp
  0x0000000110344a3e: pop    %rbp
  0x0000000110344a3f: jmpq   0x0000000110019060  ;   {runtime_call}
  0x0000000110344a44: hlt
  0x0000000110344a45: hlt
  0x0000000110344a46: hlt
  0x0000000110344a47: hlt
  0x0000000110344a48: hlt
  0x0000000110344a49: hlt
  0x0000000110344a4a: hlt
  0x0000000110344a4b: hlt
  0x0000000110344a4c: hlt
  0x0000000110344a4d: hlt
  0x0000000110344a4e: hlt
  0x0000000110344a4f: hlt
  0x0000000110344a50: hlt
  0x0000000110344a51: hlt
  0x0000000110344a52: hlt
  0x0000000110344a53: hlt
  0x0000000110344a54: hlt
  0x0000000110344a55: hlt
  0x0000000110344a56: hlt
  0x0000000110344a57: hlt
  0x0000000110344a58: hlt
  0x0000000110344a59: hlt
  0x0000000110344a5a: hlt
  0x0000000110344a5b: hlt
  0x0000000110344a5c: hlt
  0x0000000110344a5d: hlt
  0x0000000110344a5e: hlt
  0x0000000110344a5f: hlt
[Stub Code]
  0x0000000110344a60: movabs $0x0,%rbx          ;   {no_reloc}
  0x0000000110344a6a: jmpq   0x0000000110344a6a  ;   {runtime_call}
[Exception Handler]
  0x0000000110344a6f: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110344a74: callq  0x0000000110344a79
  0x0000000110344a79: subq   $0x5,(%rsp)
  0x0000000110344a7e: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110344a83: hlt
  0x0000000110344a84: hlt
  0x0000000110344a85: hlt
  0x0000000110344a86: hlt
  0x0000000110344a87: hlt
Decoding compiled method 0x0000000110348890:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0xd0]  (sp of caller)
  0x0000000110348bc0: mov    %eax,-0x14000(%rsp)
  0x0000000110348bc7: push   %rbp
  0x0000000110348bc8: sub    $0xc0,%rsp
  0x0000000110348bcf: mov    %esi,0x68(%rsp)
  0x0000000110348bd3: mov    %edx,0x6c(%rsp)
  0x0000000110348bd7: movabs $0x12727c7d8,%rdi  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348be1: mov    0xdc(%rdi),%eax
  0x0000000110348be7: add    $0x8,%eax
  0x0000000110348bea: mov    %eax,0xdc(%rdi)
  0x0000000110348bf0: movabs $0x126fe5018,%rdi  ;   {metadata({method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348bfa: and    $0x0,%eax
  0x0000000110348bfd: cmp    $0x0,%eax
  0x0000000110348c00: je     0x0000000110349f71  ;*iload_0
                                                ; - java.util.ArrayList::subListRangeCheck@0 (line 1009)

  0x0000000110348c06: cmp    $0x0,%esi
  0x0000000110348c09: movabs $0x12727c7d8,%rdi  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348c13: movabs $0x108,%rax
  0x0000000110348c1d: jge    0x0000000110348c2d
  0x0000000110348c23: movabs $0x118,%rax
  0x0000000110348c2d: mov    (%rdi,%rax,1),%rbx
  0x0000000110348c31: lea    0x1(%rbx),%rbx
  0x0000000110348c35: mov    %rbx,(%rdi,%rax,1)
  0x0000000110348c39: jl     0x0000000110349a29  ;*ifge
                                                ; - java.util.ArrayList::subListRangeCheck@1 (line 1009)

  0x0000000110348c3f: cmp    %ecx,%edx
  0x0000000110348c41: movabs $0x12727c7d8,%rdi  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348c4b: movabs $0x1d8,%rax
  0x0000000110348c55: jle    0x0000000110348c65
  0x0000000110348c5b: movabs $0x1e8,%rax
  0x0000000110348c65: mov    (%rdi,%rax,1),%rcx
  0x0000000110348c69: lea    0x1(%rcx),%rcx
  0x0000000110348c6d: mov    %rcx,(%rdi,%rax,1)
  0x0000000110348c71: jg     0x00000001103494e6  ;*if_icmple
                                                ; - java.util.ArrayList::subListRangeCheck@33 (line 1011)

  0x0000000110348c77: cmp    %edx,%esi
  0x0000000110348c79: movabs $0x12727c7d8,%rdi  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348c83: movabs $0x2a8,%rax
  0x0000000110348c8d: jle    0x0000000110348c9d
  0x0000000110348c93: movabs $0x2b8,%rax
  0x0000000110348c9d: mov    (%rdi,%rax,1),%rcx
  0x0000000110348ca1: lea    0x1(%rcx),%rcx
  0x0000000110348ca5: mov    %rcx,(%rdi,%rax,1)
  0x0000000110348ca9: jg     0x0000000110348cbe  ;*if_icmple
                                                ; - java.util.ArrayList::subListRangeCheck@65 (line 1013)

  0x0000000110348caf: add    $0xc0,%rsp
  0x0000000110348cb6: pop    %rbp
  0x0000000110348cb7: test   %eax,-0x372fbbd(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110348cbd: retq                      ;*return
                                                ; - java.util.ArrayList::subListRangeCheck@109 (line 1016)

  0x0000000110348cbe: xchg   %ax,%ax
  0x0000000110348cc0: jmpq   0x0000000110349f97  ;   {no_reloc}
  0x0000000110348cc5: add    %al,(%rax)
  0x0000000110348cc7: add    %al,(%rax)
  0x0000000110348cc9: add    %cl,-0x75(%rcx)
  0x0000000110348ccc: rex.RXB (bad)
  0x0000000110348cce: lea    0x20(%rax),%rdi
  0x0000000110348cd2: cmp    0x70(%r15),%rdi
  0x0000000110348cd6: ja     0x0000000110349fa1
  0x0000000110348cdc: mov    %rdi,0x60(%r15)
  0x0000000110348ce0: mov    0xa8(%rdx),%rcx
  0x0000000110348ce7: mov    %rcx,(%rax)
  0x0000000110348cea: mov    %rdx,%rcx
  0x0000000110348ced: shr    $0x3,%rcx
  0x0000000110348cf1: mov    %ecx,0x8(%rax)
  0x0000000110348cf4: xor    %rcx,%rcx
  0x0000000110348cf7: mov    %ecx,0xc(%rax)
  0x0000000110348cfa: xor    %rcx,%rcx
  0x0000000110348cfd: mov    %rcx,0x10(%rax)
  0x0000000110348d01: mov    %rcx,0x18(%rax)    ;*new  ; - java.util.ArrayList::subListRangeCheck@68 (line 1014)

  0x0000000110348d05: data32 xchg %ax,%ax
  0x0000000110348d08: jmpq   0x0000000110349fbd  ;   {no_reloc}
  0x0000000110348d0d: add    %al,(%rax)
  0x0000000110348d0f: add    %al,(%rax)
  0x0000000110348d11: add    %cl,-0x77(%rax)
  0x0000000110348d14: rex.R and $0x70,%al
  0x0000000110348d17: mov    0x60(%r15),%rax
  0x0000000110348d1b: lea    0x18(%rax),%rdi
  0x0000000110348d1f: cmp    0x70(%r15),%rdi
  0x0000000110348d23: ja     0x0000000110349fc7
  0x0000000110348d29: mov    %rdi,0x60(%r15)
  0x0000000110348d2d: mov    0xa8(%rdx),%rcx
  0x0000000110348d34: mov    %rcx,(%rax)
  0x0000000110348d37: mov    %rdx,%rcx
  0x0000000110348d3a: shr    $0x3,%rcx
  0x0000000110348d3e: mov    %ecx,0x8(%rax)
  0x0000000110348d41: xor    %rcx,%rcx
  0x0000000110348d44: mov    %ecx,0xc(%rax)
  0x0000000110348d47: xor    %rcx,%rcx
  0x0000000110348d4a: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.ArrayList::subListRangeCheck@72 (line 1014)

  0x0000000110348d4e: mov    %rax,%rbx
  0x0000000110348d51: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348d5b: addq   $0x1,0x2c8(%rdx)
  0x0000000110348d63: movabs $0x127171f68,%rbx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110348d6d: mov    0xdc(%rbx),%edx
  0x0000000110348d73: add    $0x8,%edx
  0x0000000110348d76: mov    %edx,0xdc(%rbx)
  0x0000000110348d7c: movabs $0x126f8b060,%rbx  ;   {metadata({method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110348d86: and    $0x7ffff8,%edx
  0x0000000110348d8c: cmp    $0x0,%edx
  0x0000000110348d8f: je     0x0000000110349fd4
  0x0000000110348d95: mov    %rax,%rbx
  0x0000000110348d98: movabs $0x127171f68,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110348da2: addq   $0x1,0x108(%rdx)
  0x0000000110348daa: movabs $0x127172098,%rbx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110348db4: mov    0xdc(%rbx),%edx
  0x0000000110348dba: add    $0x8,%edx
  0x0000000110348dbd: mov    %edx,0xdc(%rbx)
  0x0000000110348dc3: movabs $0x126f87390,%rbx  ;   {metadata({method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110348dcd: and    $0x7ffff8,%edx
  0x0000000110348dd3: cmp    $0x0,%edx
  0x0000000110348dd6: je     0x0000000110349feb
  0x0000000110348ddc: mov    %rax,%rbx
  0x0000000110348ddf: movabs $0x127172098,%rdx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110348de9: addq   $0x1,0x108(%rdx)
  0x0000000110348df1: movabs $0x12708aa48,%rbx  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110348dfb: mov    0xdc(%rbx),%edx
  0x0000000110348e01: add    $0x8,%edx
  0x0000000110348e04: mov    %edx,0xdc(%rbx)
  0x0000000110348e0a: movabs $0x126f12480,%rbx  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110348e14: and    $0x7ffff8,%edx
  0x0000000110348e1a: cmp    $0x0,%edx
  0x0000000110348e1d: je     0x000000011034a002
  0x0000000110348e23: mov    $0x10,%ebx
  0x0000000110348e28: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x0000000110348e32: mov    %rax,%r13
  0x0000000110348e35: movslq %ebx,%rbx
  0x0000000110348e38: mov    %rbx,%rdi
  0x0000000110348e3b: cmp    $0xffffff,%rbx
  0x0000000110348e42: ja     0x000000011034a019
  0x0000000110348e48: movabs $0x17,%rsi
  0x0000000110348e52: lea    (%rsi,%rbx,2),%rsi
  0x0000000110348e56: and    $0xfffffffffffffff8,%rsi
  0x0000000110348e5a: mov    0x60(%r15),%rax
  0x0000000110348e5e: lea    (%rax,%rsi,1),%rsi
  0x0000000110348e62: cmp    0x70(%r15),%rsi
  0x0000000110348e66: ja     0x000000011034a019
  0x0000000110348e6c: mov    %rsi,0x60(%r15)
  0x0000000110348e70: sub    %rax,%rsi
  0x0000000110348e73: movq   $0x1,(%rax)
  0x0000000110348e7a: mov    %rdx,%rcx
  0x0000000110348e7d: shr    $0x3,%rcx
  0x0000000110348e81: mov    %ecx,0x8(%rax)
  0x0000000110348e84: mov    %ebx,0xc(%rax)
  0x0000000110348e87: sub    $0x10,%rsi
  0x0000000110348e8b: je     0x0000000110348ea2
  0x0000000110348e91: xor    %rbx,%rbx
  0x0000000110348e94: shr    $0x3,%rsi
  0x0000000110348e98: mov    %rbx,0x8(%rax,%rsi,8)
  0x0000000110348e9d: dec    %rsi
  0x0000000110348ea0: jne    0x0000000110348e98  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)

  0x0000000110348ea2: mov    %rax,%r10
  0x0000000110348ea5: shr    $0x3,%r10
  0x0000000110348ea9: mov    %r10d,0x10(%r13)
  0x0000000110348ead: mov    %r13,%rax
  0x0000000110348eb0: shr    $0x9,%rax
  0x0000000110348eb4: movabs $0x109ac3000,%rdx
  0x0000000110348ebe: movb   $0x0,(%rax,%rdx,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)

  0x0000000110348ec2: mov    %r13,%rax
  0x0000000110348ec5: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348ecf: mov    0x8(%rax),%eax
  0x0000000110348ed2: shl    $0x3,%rax
  0x0000000110348ed6: cmp    0x2e0(%rdx),%rax
  0x0000000110348edd: jne    0x0000000110348eec
  0x0000000110348edf: addq   $0x1,0x2e8(%rdx)
  0x0000000110348ee7: jmpq   0x0000000110348f52
  0x0000000110348eec: cmp    0x2f0(%rdx),%rax
  0x0000000110348ef3: jne    0x0000000110348f02
  0x0000000110348ef5: addq   $0x1,0x2f8(%rdx)
  0x0000000110348efd: jmpq   0x0000000110348f52
  0x0000000110348f02: cmpq   $0x0,0x2e0(%rdx)
  0x0000000110348f0d: jne    0x0000000110348f26
  0x0000000110348f0f: mov    %rax,0x2e0(%rdx)
  0x0000000110348f16: movq   $0x1,0x2e8(%rdx)
  0x0000000110348f21: jmpq   0x0000000110348f52
  0x0000000110348f26: cmpq   $0x0,0x2f0(%rdx)
  0x0000000110348f31: jne    0x0000000110348f4a
  0x0000000110348f33: mov    %rax,0x2f0(%rdx)
  0x0000000110348f3a: movq   $0x1,0x2f8(%rdx)
  0x0000000110348f45: jmpq   0x0000000110348f52
  0x0000000110348f4a: addq   $0x1,0x2d8(%rdx)
  0x0000000110348f52: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110348f5c: mov    0xdc(%rdx),%esi
  0x0000000110348f62: add    $0x8,%esi
  0x0000000110348f65: mov    %esi,0xdc(%rdx)
  0x0000000110348f6b: movabs $0x126f8b378,%rdx  ;   {metadata({method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110348f75: and    $0x7ffff8,%esi
  0x0000000110348f7b: cmp    $0x0,%esi
  0x0000000110348f7e: je     0x000000011034a023
  0x0000000110348f84: mov    %r13,%rax
  0x0000000110348f87: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110348f91: addq   $0x1,0x108(%rdx)
  0x0000000110348f99: movabs $0x76ada17e0,%rdx  ;   {oop("fromIndex(")}
  0x0000000110348fa3: mov    %r13,%rsi          ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@81 (line 1014)

  0x0000000110348fa6: mov    %r13,0x60(%rsp)
  0x0000000110348fab: nop
  0x0000000110348fac: nop
  0x0000000110348fad: nop
  0x0000000110348fae: nop
  0x0000000110348faf: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [112]=Oop off=1012}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@81 (line 1014)
                                                ;   {optimized virtual_call}
  0x0000000110348fb4: mov    0x60(%rsp),%rax
  0x0000000110348fb9: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110348fc3: mov    0x8(%rax),%eax
  0x0000000110348fc6: shl    $0x3,%rax
  0x0000000110348fca: cmp    0x310(%rdx),%rax
  0x0000000110348fd1: jne    0x0000000110348fe0
  0x0000000110348fd3: addq   $0x1,0x318(%rdx)
  0x0000000110348fdb: jmpq   0x0000000110349046
  0x0000000110348fe0: cmp    0x320(%rdx),%rax
  0x0000000110348fe7: jne    0x0000000110348ff6
  0x0000000110348fe9: addq   $0x1,0x328(%rdx)
  0x0000000110348ff1: jmpq   0x0000000110349046
  0x0000000110348ff6: cmpq   $0x0,0x310(%rdx)
  0x0000000110349001: jne    0x000000011034901a
  0x0000000110349003: mov    %rax,0x310(%rdx)
  0x000000011034900a: movq   $0x1,0x318(%rdx)
  0x0000000110349015: jmpq   0x0000000110349046
  0x000000011034901a: cmpq   $0x0,0x320(%rdx)
  0x0000000110349025: jne    0x000000011034903e
  0x0000000110349027: mov    %rax,0x320(%rdx)
  0x000000011034902e: movq   $0x1,0x328(%rdx)
  0x0000000110349039: jmpq   0x0000000110349046
  0x000000011034903e: addq   $0x1,0x308(%rdx)
  0x0000000110349046: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349050: mov    0xdc(%rdx),%esi
  0x0000000110349056: add    $0x8,%esi
  0x0000000110349059: mov    %esi,0xdc(%rdx)
  0x000000011034905f: movabs $0x126f8b838,%rdx  ;   {metadata({method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349069: and    $0x7ffff8,%esi
  0x000000011034906f: cmp    $0x0,%esi
  0x0000000110349072: je     0x000000011034a03a
  0x0000000110349078: mov    0x60(%rsp),%rax
  0x000000011034907d: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349087: addq   $0x1,0x108(%rdx)
  0x000000011034908f: mov    0x68(%rsp),%edx
  0x0000000110349093: mov    0x60(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@85 (line 1014)

  0x0000000110349098: nop
  0x0000000110349099: nop
  0x000000011034909a: nop
  0x000000011034909b: nop
  0x000000011034909c: nop
  0x000000011034909d: nop
  0x000000011034909e: nop
  0x000000011034909f: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [112]=Oop off=1252}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@85 (line 1014)
                                                ;   {optimized virtual_call}
  0x00000001103490a4: mov    0x60(%rsp),%rax
  0x00000001103490a9: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103490b3: mov    0x8(%rax),%eax
  0x00000001103490b6: shl    $0x3,%rax
  0x00000001103490ba: cmp    0x340(%rdx),%rax
  0x00000001103490c1: jne    0x00000001103490d0
  0x00000001103490c3: addq   $0x1,0x348(%rdx)
  0x00000001103490cb: jmpq   0x0000000110349136
  0x00000001103490d0: cmp    0x350(%rdx),%rax
  0x00000001103490d7: jne    0x00000001103490e6
  0x00000001103490d9: addq   $0x1,0x358(%rdx)
  0x00000001103490e1: jmpq   0x0000000110349136
  0x00000001103490e6: cmpq   $0x0,0x340(%rdx)
  0x00000001103490f1: jne    0x000000011034910a
  0x00000001103490f3: mov    %rax,0x340(%rdx)
  0x00000001103490fa: movq   $0x1,0x348(%rdx)
  0x0000000110349105: jmpq   0x0000000110349136
  0x000000011034910a: cmpq   $0x0,0x350(%rdx)
  0x0000000110349115: jne    0x000000011034912e
  0x0000000110349117: mov    %rax,0x350(%rdx)
  0x000000011034911e: movq   $0x1,0x358(%rdx)
  0x0000000110349129: jmpq   0x0000000110349136
  0x000000011034912e: addq   $0x1,0x338(%rdx)
  0x0000000110349136: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349140: mov    0xdc(%rdx),%esi
  0x0000000110349146: add    $0x8,%esi
  0x0000000110349149: mov    %esi,0xdc(%rdx)
  0x000000011034914f: movabs $0x126f8b378,%rdx  ;   {metadata({method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349159: and    $0x7ffff8,%esi
  0x000000011034915f: cmp    $0x0,%esi
  0x0000000110349162: je     0x000000011034a051
  0x0000000110349168: mov    0x60(%rsp),%rax
  0x000000011034916d: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349177: addq   $0x1,0x108(%rdx)
  0x000000011034917f: movabs $0x76ada1820,%rdx  ;   {oop(") > toIndex(")}
  0x0000000110349189: mov    0x60(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@90 (line 1014)

  0x000000011034918e: nop
  0x000000011034918f: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [112]=Oop off=1492}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@90 (line 1014)
                                                ;   {optimized virtual_call}
  0x0000000110349194: mov    0x60(%rsp),%rax
  0x0000000110349199: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103491a3: mov    0x8(%rax),%eax
  0x00000001103491a6: shl    $0x3,%rax
  0x00000001103491aa: cmp    0x370(%rdx),%rax
  0x00000001103491b1: jne    0x00000001103491c0
  0x00000001103491b3: addq   $0x1,0x378(%rdx)
  0x00000001103491bb: jmpq   0x0000000110349226
  0x00000001103491c0: cmp    0x380(%rdx),%rax
  0x00000001103491c7: jne    0x00000001103491d6
  0x00000001103491c9: addq   $0x1,0x388(%rdx)
  0x00000001103491d1: jmpq   0x0000000110349226
  0x00000001103491d6: cmpq   $0x0,0x370(%rdx)
  0x00000001103491e1: jne    0x00000001103491fa
  0x00000001103491e3: mov    %rax,0x370(%rdx)
  0x00000001103491ea: movq   $0x1,0x378(%rdx)
  0x00000001103491f5: jmpq   0x0000000110349226
  0x00000001103491fa: cmpq   $0x0,0x380(%rdx)
  0x0000000110349205: jne    0x000000011034921e
  0x0000000110349207: mov    %rax,0x380(%rdx)
  0x000000011034920e: movq   $0x1,0x388(%rdx)
  0x0000000110349219: jmpq   0x0000000110349226
  0x000000011034921e: addq   $0x1,0x368(%rdx)
  0x0000000110349226: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349230: mov    0xdc(%rdx),%esi
  0x0000000110349236: add    $0x8,%esi
  0x0000000110349239: mov    %esi,0xdc(%rdx)
  0x000000011034923f: movabs $0x126f8b838,%rdx  ;   {metadata({method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349249: and    $0x7ffff8,%esi
  0x000000011034924f: cmp    $0x0,%esi
  0x0000000110349252: je     0x000000011034a068
  0x0000000110349258: mov    0x60(%rsp),%rax
  0x000000011034925d: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349267: addq   $0x1,0x108(%rdx)
  0x000000011034926f: mov    0x6c(%rsp),%edx
  0x0000000110349273: mov    0x60(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@94 (line 1014)

  0x0000000110349278: nop
  0x0000000110349279: nop
  0x000000011034927a: nop
  0x000000011034927b: nop
  0x000000011034927c: nop
  0x000000011034927d: nop
  0x000000011034927e: nop
  0x000000011034927f: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [112]=Oop off=1732}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@94 (line 1014)
                                                ;   {optimized virtual_call}
  0x0000000110349284: mov    0x60(%rsp),%rax
  0x0000000110349289: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349293: mov    0x8(%rax),%eax
  0x0000000110349296: shl    $0x3,%rax
  0x000000011034929a: cmp    0x3a0(%rdx),%rax
  0x00000001103492a1: jne    0x00000001103492b0
  0x00000001103492a3: addq   $0x1,0x3a8(%rdx)
  0x00000001103492ab: jmpq   0x0000000110349316
  0x00000001103492b0: cmp    0x3b0(%rdx),%rax
  0x00000001103492b7: jne    0x00000001103492c6
  0x00000001103492b9: addq   $0x1,0x3b8(%rdx)
  0x00000001103492c1: jmpq   0x0000000110349316
  0x00000001103492c6: cmpq   $0x0,0x3a0(%rdx)
  0x00000001103492d1: jne    0x00000001103492ea
  0x00000001103492d3: mov    %rax,0x3a0(%rdx)
  0x00000001103492da: movq   $0x1,0x3a8(%rdx)
  0x00000001103492e5: jmpq   0x0000000110349316
  0x00000001103492ea: cmpq   $0x0,0x3b0(%rdx)
  0x00000001103492f5: jne    0x000000011034930e
  0x00000001103492f7: mov    %rax,0x3b0(%rdx)
  0x00000001103492fe: movq   $0x1,0x3b8(%rdx)
  0x0000000110349309: jmpq   0x0000000110349316
  0x000000011034930e: addq   $0x1,0x398(%rdx)
  0x0000000110349316: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349320: mov    0xdc(%rdx),%esi
  0x0000000110349326: add    $0x8,%esi
  0x0000000110349329: mov    %esi,0xdc(%rdx)
  0x000000011034932f: movabs $0x126f8b378,%rdx  ;   {metadata({method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349339: and    $0x7ffff8,%esi
  0x000000011034933f: cmp    $0x0,%esi
  0x0000000110349342: je     0x000000011034a07f
  0x0000000110349348: mov    0x60(%rsp),%rax
  0x000000011034934d: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349357: addq   $0x1,0x108(%rdx)
  0x000000011034935f: movabs $0x76aca41e8,%rdx  ;   {oop(")")}
  0x0000000110349369: mov    0x60(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@99 (line 1014)

  0x000000011034936e: nop
  0x000000011034936f: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [112]=Oop off=1972}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@99 (line 1014)
                                                ;   {optimized virtual_call}
  0x0000000110349374: mov    0x60(%rsp),%rax
  0x0000000110349379: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349383: mov    0x8(%rax),%eax
  0x0000000110349386: shl    $0x3,%rax
  0x000000011034938a: cmp    0x3d0(%rdx),%rax
  0x0000000110349391: jne    0x00000001103493a0
  0x0000000110349393: addq   $0x1,0x3d8(%rdx)
  0x000000011034939b: jmpq   0x0000000110349406
  0x00000001103493a0: cmp    0x3e0(%rdx),%rax
  0x00000001103493a7: jne    0x00000001103493b6
  0x00000001103493a9: addq   $0x1,0x3e8(%rdx)
  0x00000001103493b1: jmpq   0x0000000110349406
  0x00000001103493b6: cmpq   $0x0,0x3d0(%rdx)
  0x00000001103493c1: jne    0x00000001103493da
  0x00000001103493c3: mov    %rax,0x3d0(%rdx)
  0x00000001103493ca: movq   $0x1,0x3d8(%rdx)
  0x00000001103493d5: jmpq   0x0000000110349406
  0x00000001103493da: cmpq   $0x0,0x3e0(%rdx)
  0x00000001103493e5: jne    0x00000001103493fe
  0x00000001103493e7: mov    %rax,0x3e0(%rdx)
  0x00000001103493ee: movq   $0x1,0x3e8(%rdx)
  0x00000001103493f9: jmpq   0x0000000110349406
  0x00000001103493fe: addq   $0x1,0x3c8(%rdx)
  0x0000000110349406: movabs $0x1271730f8,%rdx  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349410: mov    0xdc(%rdx),%esi
  0x0000000110349416: add    $0x8,%esi
  0x0000000110349419: mov    %esi,0xdc(%rdx)
  0x000000011034941f: movabs $0x126f8c728,%rdx  ;   {metadata({method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349429: and    $0x7ffff8,%esi
  0x000000011034942f: cmp    $0x0,%esi
  0x0000000110349432: je     0x000000011034a096
  0x0000000110349438: movabs $0x7c00016d0,%rdx  ;   {metadata('java/lang/String')}
  0x0000000110349442: mov    0x60(%r15),%rax
  0x0000000110349446: lea    0x18(%rax),%rdi
  0x000000011034944a: cmp    0x70(%r15),%rdi
  0x000000011034944e: ja     0x000000011034a0ad
  0x0000000110349454: mov    %rdi,0x60(%r15)
  0x0000000110349458: mov    0xa8(%rdx),%rcx
  0x000000011034945f: mov    %rcx,(%rax)
  0x0000000110349462: mov    %rdx,%rcx
  0x0000000110349465: shr    $0x3,%rcx
  0x0000000110349469: mov    %ecx,0x8(%rax)
  0x000000011034946c: xor    %rcx,%rcx
  0x000000011034946f: mov    %ecx,0xc(%rax)
  0x0000000110349472: xor    %rcx,%rcx
  0x0000000110349475: mov    %rcx,0x10(%rax)    ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)

  0x0000000110349479: mov    0x60(%rsp),%rdx
  0x000000011034947e: mov    0x10(%rdx),%ecx
  0x0000000110349481: shl    $0x3,%rcx          ;*getfield value
                                                ; - java.lang.StringBuilder::toString@5 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)

  0x0000000110349485: mov    0xc(%rdx),%r8d     ;*getfield count
                                                ; - java.lang.StringBuilder::toString@10 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)

  0x0000000110349489: mov    %rax,%rdx
  0x000000011034948c: movabs $0x1271730f8,%rsi  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349496: addq   $0x1,0x108(%rsi)
  0x000000011034949e: mov    %rcx,%rdx
  0x00000001103494a1: mov    $0x0,%ecx
  0x00000001103494a6: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)

  0x00000001103494a9: mov    %rax,0x78(%rsp)
  0x00000001103494ae: nop
  0x00000001103494af: callq  0x000000010ff580a0  ; OopMap{[112]=Oop [120]=Oop off=2292}
                                                ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)
                                                ;   {optimized virtual_call}
  0x00000001103494b4: mov    0x70(%rsp),%rax
  0x00000001103494b9: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103494c3: addq   $0x1,0x3f8(%rdx)
  0x00000001103494cb: mov    0x78(%rsp),%rdx
  0x00000001103494d0: mov    0x70(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@105 (line 1014)

  0x00000001103494d5: nop
  0x00000001103494d6: nop
  0x00000001103494d7: callq  0x000000010ff580a0  ; OopMap{[112]=Oop off=2332}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@105 (line 1014)
                                                ;   {optimized virtual_call}
  0x00000001103494dc: mov    0x70(%rsp),%rax
  0x00000001103494e1: jmpq   0x000000011034a2bf  ;*athrow
                                                ; - java.util.ArrayList::subListRangeCheck@108 (line 1014)

  0x00000001103494e6: xchg   %ax,%ax
  0x00000001103494e8: jmpq   0x000000011034a0c9  ;   {no_reloc}
  0x00000001103494ed: add    %al,(%rax)
  0x00000001103494ef: add    %al,(%rax)
  0x00000001103494f1: add    %ch,%cl
  0x00000001103494f3: fmull  (%rbx)
  0x00000001103494f5: add    %al,(%rax)         ;*new  ; - java.util.ArrayList::subListRangeCheck@36 (line 1012)

  0x00000001103494f7: nop
  0x00000001103494f8: jmpq   0x000000011034a0ef  ;   {no_reloc}
  0x00000001103494fd: add    %al,(%rax)
  0x00000001103494ff: add    %al,(%rax)
  0x0000000110349501: add    %cl,-0x77(%rax)
  0x0000000110349504: test   %ah,(%rax,%rcx,4)
  0x0000000110349507: add    %al,(%rax)
  0x0000000110349509: add    %cl,-0x75(%rcx)
  0x000000011034950c: rex.RXB (bad)
  0x000000011034950e: lea    0x18(%rax),%rdi
  0x0000000110349512: cmp    0x70(%r15),%rdi
  0x0000000110349516: ja     0x000000011034a0f9
  0x000000011034951c: mov    %rdi,0x60(%r15)
  0x0000000110349520: mov    0xa8(%rdx),%rcx
  0x0000000110349527: mov    %rcx,(%rax)
  0x000000011034952a: mov    %rdx,%rcx
  0x000000011034952d: shr    $0x3,%rcx
  0x0000000110349531: mov    %ecx,0x8(%rax)
  0x0000000110349534: xor    %rcx,%rcx
  0x0000000110349537: mov    %ecx,0xc(%rax)
  0x000000011034953a: xor    %rcx,%rcx
  0x000000011034953d: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.ArrayList::subListRangeCheck@40 (line 1012)

  0x0000000110349541: mov    %rax,%rbx
  0x0000000110349544: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x000000011034954e: addq   $0x1,0x1f8(%rdx)
  0x0000000110349556: movabs $0x127171f68,%rbx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349560: mov    0xdc(%rbx),%edx
  0x0000000110349566: add    $0x8,%edx
  0x0000000110349569: mov    %edx,0xdc(%rbx)
  0x000000011034956f: movabs $0x126f8b060,%rbx  ;   {metadata({method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349579: and    $0x7ffff8,%edx
  0x000000011034957f: cmp    $0x0,%edx
  0x0000000110349582: je     0x000000011034a106
  0x0000000110349588: mov    %rax,%rbx
  0x000000011034958b: movabs $0x127171f68,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349595: addq   $0x1,0x108(%rdx)
  0x000000011034959d: movabs $0x127172098,%rbx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00000001103495a7: mov    0xdc(%rbx),%edx
  0x00000001103495ad: add    $0x8,%edx
  0x00000001103495b0: mov    %edx,0xdc(%rbx)
  0x00000001103495b6: movabs $0x126f87390,%rbx  ;   {metadata({method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00000001103495c0: and    $0x7ffff8,%edx
  0x00000001103495c6: cmp    $0x0,%edx
  0x00000001103495c9: je     0x000000011034a11d
  0x00000001103495cf: mov    %rax,%rbx
  0x00000001103495d2: movabs $0x127172098,%rdx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00000001103495dc: addq   $0x1,0x108(%rdx)
  0x00000001103495e4: movabs $0x12708aa48,%rbx  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x00000001103495ee: mov    0xdc(%rbx),%edx
  0x00000001103495f4: add    $0x8,%edx
  0x00000001103495f7: mov    %edx,0xdc(%rbx)
  0x00000001103495fd: movabs $0x126f12480,%rbx  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110349607: and    $0x7ffff8,%edx
  0x000000011034960d: cmp    $0x0,%edx
  0x0000000110349610: je     0x000000011034a134
  0x0000000110349616: mov    $0x10,%ebx
  0x000000011034961b: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x0000000110349625: mov    %rax,%r11
  0x0000000110349628: movslq %ebx,%rbx
  0x000000011034962b: mov    %rbx,%rdi
  0x000000011034962e: cmp    $0xffffff,%rbx
  0x0000000110349635: ja     0x000000011034a14b
  0x000000011034963b: movabs $0x17,%rsi
  0x0000000110349645: lea    (%rsi,%rbx,2),%rsi
  0x0000000110349649: and    $0xfffffffffffffff8,%rsi
  0x000000011034964d: mov    0x60(%r15),%rax
  0x0000000110349651: lea    (%rax,%rsi,1),%rsi
  0x0000000110349655: cmp    0x70(%r15),%rsi
  0x0000000110349659: ja     0x000000011034a14b
  0x000000011034965f: mov    %rsi,0x60(%r15)
  0x0000000110349663: sub    %rax,%rsi
  0x0000000110349666: movq   $0x1,(%rax)
  0x000000011034966d: mov    %rdx,%rcx
  0x0000000110349670: shr    $0x3,%rcx
  0x0000000110349674: mov    %ecx,0x8(%rax)
  0x0000000110349677: mov    %ebx,0xc(%rax)
  0x000000011034967a: sub    $0x10,%rsi
  0x000000011034967e: je     0x0000000110349695
  0x0000000110349684: xor    %rbx,%rbx
  0x0000000110349687: shr    $0x3,%rsi
  0x000000011034968b: mov    %rbx,0x8(%rax,%rsi,8)
  0x0000000110349690: dec    %rsi
  0x0000000110349693: jne    0x000000011034968b  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)

  0x0000000110349695: mov    %rax,%r10
  0x0000000110349698: shr    $0x3,%r10
  0x000000011034969c: mov    %r10d,0x10(%r11)
  0x00000001103496a0: mov    %r11,%rax
  0x00000001103496a3: shr    $0x9,%rax
  0x00000001103496a7: movabs $0x109ac3000,%rdx
  0x00000001103496b1: movb   $0x0,(%rax,%rdx,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)

  0x00000001103496b5: mov    %r11,%rax
  0x00000001103496b8: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103496c2: mov    0x8(%rax),%eax
  0x00000001103496c5: shl    $0x3,%rax
  0x00000001103496c9: cmp    0x210(%rdx),%rax
  0x00000001103496d0: jne    0x00000001103496df
  0x00000001103496d2: addq   $0x1,0x218(%rdx)
  0x00000001103496da: jmpq   0x0000000110349745
  0x00000001103496df: cmp    0x220(%rdx),%rax
  0x00000001103496e6: jne    0x00000001103496f5
  0x00000001103496e8: addq   $0x1,0x228(%rdx)
  0x00000001103496f0: jmpq   0x0000000110349745
  0x00000001103496f5: cmpq   $0x0,0x210(%rdx)
  0x0000000110349700: jne    0x0000000110349719
  0x0000000110349702: mov    %rax,0x210(%rdx)
  0x0000000110349709: movq   $0x1,0x218(%rdx)
  0x0000000110349714: jmpq   0x0000000110349745
  0x0000000110349719: cmpq   $0x0,0x220(%rdx)
  0x0000000110349724: jne    0x000000011034973d
  0x0000000110349726: mov    %rax,0x220(%rdx)
  0x000000011034972d: movq   $0x1,0x228(%rdx)
  0x0000000110349738: jmpq   0x0000000110349745
  0x000000011034973d: addq   $0x1,0x208(%rdx)
  0x0000000110349745: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x000000011034974f: mov    0xdc(%rdx),%esi
  0x0000000110349755: add    $0x8,%esi
  0x0000000110349758: mov    %esi,0xdc(%rdx)
  0x000000011034975e: movabs $0x126f8b378,%rdx  ;   {metadata({method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349768: and    $0x7ffff8,%esi
  0x000000011034976e: cmp    $0x0,%esi
  0x0000000110349771: je     0x000000011034a155
  0x0000000110349777: mov    %r11,%rax
  0x000000011034977a: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349784: addq   $0x1,0x108(%rdx)
  0x000000011034978c: movabs $0x76ada17a0,%rdx  ;   {oop("toIndex = ")}
  0x0000000110349796: mov    %r11,%rsi          ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@49 (line 1012)

  0x0000000110349799: mov    %r11,0x80(%rsp)
  0x00000001103497a1: nop
  0x00000001103497a2: nop
  0x00000001103497a3: nop
  0x00000001103497a4: nop
  0x00000001103497a5: nop
  0x00000001103497a6: nop
  0x00000001103497a7: callq  0x000000010ff580a0  ; OopMap{[128]=Oop [136]=Oop off=3052}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@49 (line 1012)
                                                ;   {optimized virtual_call}
  0x00000001103497ac: mov    0x80(%rsp),%rax
  0x00000001103497b4: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103497be: mov    0x8(%rax),%eax
  0x00000001103497c1: shl    $0x3,%rax
  0x00000001103497c5: cmp    0x240(%rdx),%rax
  0x00000001103497cc: jne    0x00000001103497db
  0x00000001103497ce: addq   $0x1,0x248(%rdx)
  0x00000001103497d6: jmpq   0x0000000110349841
  0x00000001103497db: cmp    0x250(%rdx),%rax
  0x00000001103497e2: jne    0x00000001103497f1
  0x00000001103497e4: addq   $0x1,0x258(%rdx)
  0x00000001103497ec: jmpq   0x0000000110349841
  0x00000001103497f1: cmpq   $0x0,0x240(%rdx)
  0x00000001103497fc: jne    0x0000000110349815
  0x00000001103497fe: mov    %rax,0x240(%rdx)
  0x0000000110349805: movq   $0x1,0x248(%rdx)
  0x0000000110349810: jmpq   0x0000000110349841
  0x0000000110349815: cmpq   $0x0,0x250(%rdx)
  0x0000000110349820: jne    0x0000000110349839
  0x0000000110349822: mov    %rax,0x250(%rdx)
  0x0000000110349829: movq   $0x1,0x258(%rdx)
  0x0000000110349834: jmpq   0x0000000110349841
  0x0000000110349839: addq   $0x1,0x238(%rdx)
  0x0000000110349841: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x000000011034984b: mov    0xdc(%rdx),%esi
  0x0000000110349851: add    $0x8,%esi
  0x0000000110349854: mov    %esi,0xdc(%rdx)
  0x000000011034985a: movabs $0x126f8b838,%rdx  ;   {metadata({method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349864: and    $0x7ffff8,%esi
  0x000000011034986a: cmp    $0x0,%esi
  0x000000011034986d: je     0x000000011034a16c
  0x0000000110349873: mov    0x80(%rsp),%rax
  0x000000011034987b: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349885: addq   $0x1,0x108(%rdx)
  0x000000011034988d: mov    0x6c(%rsp),%edx
  0x0000000110349891: mov    0x80(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@53 (line 1012)

  0x0000000110349899: nop
  0x000000011034989a: nop
  0x000000011034989b: nop
  0x000000011034989c: nop
  0x000000011034989d: nop
  0x000000011034989e: nop
  0x000000011034989f: callq  0x000000010ff580a0  ; OopMap{[128]=Oop [136]=Oop off=3300}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@53 (line 1012)
                                                ;   {optimized virtual_call}
  0x00000001103498a4: mov    0x80(%rsp),%rax
  0x00000001103498ac: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103498b6: mov    0x8(%rax),%eax
  0x00000001103498b9: shl    $0x3,%rax
  0x00000001103498bd: cmp    0x270(%rdx),%rax
  0x00000001103498c4: jne    0x00000001103498d3
  0x00000001103498c6: addq   $0x1,0x278(%rdx)
  0x00000001103498ce: jmpq   0x0000000110349939
  0x00000001103498d3: cmp    0x280(%rdx),%rax
  0x00000001103498da: jne    0x00000001103498e9
  0x00000001103498dc: addq   $0x1,0x288(%rdx)
  0x00000001103498e4: jmpq   0x0000000110349939
  0x00000001103498e9: cmpq   $0x0,0x270(%rdx)
  0x00000001103498f4: jne    0x000000011034990d
  0x00000001103498f6: mov    %rax,0x270(%rdx)
  0x00000001103498fd: movq   $0x1,0x278(%rdx)
  0x0000000110349908: jmpq   0x0000000110349939
  0x000000011034990d: cmpq   $0x0,0x280(%rdx)
  0x0000000110349918: jne    0x0000000110349931
  0x000000011034991a: mov    %rax,0x280(%rdx)
  0x0000000110349921: movq   $0x1,0x288(%rdx)
  0x000000011034992c: jmpq   0x0000000110349939
  0x0000000110349931: addq   $0x1,0x268(%rdx)
  0x0000000110349939: movabs $0x1271730f8,%rdx  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349943: mov    0xdc(%rdx),%esi
  0x0000000110349949: add    $0x8,%esi
  0x000000011034994c: mov    %esi,0xdc(%rdx)
  0x0000000110349952: movabs $0x126f8c728,%rdx  ;   {metadata({method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x000000011034995c: and    $0x7ffff8,%esi
  0x0000000110349962: cmp    $0x0,%esi
  0x0000000110349965: je     0x000000011034a183
  0x000000011034996b: movabs $0x7c00016d0,%rdx  ;   {metadata('java/lang/String')}
  0x0000000110349975: mov    0x60(%r15),%rax
  0x0000000110349979: lea    0x18(%rax),%rdi
  0x000000011034997d: cmp    0x70(%r15),%rdi
  0x0000000110349981: ja     0x000000011034a19a
  0x0000000110349987: mov    %rdi,0x60(%r15)
  0x000000011034998b: mov    0xa8(%rdx),%rcx
  0x0000000110349992: mov    %rcx,(%rax)
  0x0000000110349995: mov    %rdx,%rcx
  0x0000000110349998: shr    $0x3,%rcx
  0x000000011034999c: mov    %ecx,0x8(%rax)
  0x000000011034999f: xor    %rcx,%rcx
  0x00000001103499a2: mov    %ecx,0xc(%rax)
  0x00000001103499a5: xor    %rcx,%rcx
  0x00000001103499a8: mov    %rcx,0x10(%rax)    ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)

  0x00000001103499ac: mov    0x80(%rsp),%rdx
  0x00000001103499b4: mov    0x10(%rdx),%ecx
  0x00000001103499b7: shl    $0x3,%rcx          ;*getfield value
                                                ; - java.lang.StringBuilder::toString@5 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)

  0x00000001103499bb: mov    0xc(%rdx),%r8d     ;*getfield count
                                                ; - java.lang.StringBuilder::toString@10 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)

  0x00000001103499bf: mov    %rax,%rdx
  0x00000001103499c2: movabs $0x1271730f8,%rsi  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x00000001103499cc: addq   $0x1,0x108(%rsi)
  0x00000001103499d4: mov    %rcx,%rdx
  0x00000001103499d7: mov    $0x0,%ecx
  0x00000001103499dc: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)

  0x00000001103499df: mov    %rax,0x90(%rsp)
  0x00000001103499e7: callq  0x000000010ff580a0  ; OopMap{[136]=Oop [144]=Oop off=3628}
                                                ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)
                                                ;   {optimized virtual_call}
  0x00000001103499ec: mov    0x88(%rsp),%rax
  0x00000001103499f4: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x00000001103499fe: addq   $0x1,0x298(%rdx)
  0x0000000110349a06: mov    0x90(%rsp),%rdx
  0x0000000110349a0e: mov    0x88(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@59 (line 1012)

  0x0000000110349a16: nop
  0x0000000110349a17: callq  0x000000010ff580a0  ; OopMap{[136]=Oop off=3676}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@59 (line 1012)
                                                ;   {optimized virtual_call}
  0x0000000110349a1c: mov    0x88(%rsp),%rax
  0x0000000110349a24: jmpq   0x000000011034a2bf  ;*athrow
                                                ; - java.util.ArrayList::subListRangeCheck@62 (line 1012)

  0x0000000110349a29: nopl   0x0(%rax)
  0x0000000110349a30: jmpq   0x000000011034a1b6  ;   {no_reloc}
  0x0000000110349a35: add    %al,(%rax)
  0x0000000110349a37: add    %al,(%rax)
  0x0000000110349a39: add    %ch,%cl
  0x0000000110349a3b: addl   $0xe9900000,(%rdi)  ;*new
                                                ; - java.util.ArrayList::subListRangeCheck@4 (line 1010)
                                                ;   {no_reloc}
  0x0000000110349a41: xchg   %eax,%edi
  0x0000000110349a42: (bad)
  0x0000000110349a43: add    %al,(%rax)
  0x0000000110349a45: add    %al,(%rax)
  0x0000000110349a47: add    %al,(%rax)
  0x0000000110349a49: add    %cl,-0x77(%rax)
  0x0000000110349a4c: test   %ah,(%rax,%riz,4)
  0x0000000110349a4f: add    %al,(%rax)
  0x0000000110349a51: add    %cl,-0x75(%rcx)
  0x0000000110349a54: rex.RXB (bad)
  0x0000000110349a56: lea    0x18(%rax),%rdi
  0x0000000110349a5a: cmp    0x70(%r15),%rdi
  0x0000000110349a5e: ja     0x000000011034a1e6
  0x0000000110349a64: mov    %rdi,0x60(%r15)
  0x0000000110349a68: mov    0xa8(%rdx),%rcx
  0x0000000110349a6f: mov    %rcx,(%rax)
  0x0000000110349a72: mov    %rdx,%rcx
  0x0000000110349a75: shr    $0x3,%rcx
  0x0000000110349a79: mov    %ecx,0x8(%rax)
  0x0000000110349a7c: xor    %rcx,%rcx
  0x0000000110349a7f: mov    %ecx,0xc(%rax)
  0x0000000110349a82: xor    %rcx,%rcx
  0x0000000110349a85: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.ArrayList::subListRangeCheck@8 (line 1010)

  0x0000000110349a89: mov    %rax,%rbx
  0x0000000110349a8c: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349a96: addq   $0x1,0x128(%rdx)
  0x0000000110349a9e: movabs $0x127171f68,%rbx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349aa8: mov    0xdc(%rbx),%edx
  0x0000000110349aae: add    $0x8,%edx
  0x0000000110349ab1: mov    %edx,0xdc(%rbx)
  0x0000000110349ab7: movabs $0x126f8b060,%rbx  ;   {metadata({method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349ac1: and    $0x7ffff8,%edx
  0x0000000110349ac7: cmp    $0x0,%edx
  0x0000000110349aca: je     0x000000011034a1f3
  0x0000000110349ad0: mov    %rax,%rbx
  0x0000000110349ad3: movabs $0x127171f68,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b060} '<init>' '()V' in 'java/lang/StringBuilder')}
  0x0000000110349add: addq   $0x1,0x108(%rdx)
  0x0000000110349ae5: movabs $0x127172098,%rbx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110349aef: mov    0xdc(%rbx),%edx
  0x0000000110349af5: add    $0x8,%edx
  0x0000000110349af8: mov    %edx,0xdc(%rbx)
  0x0000000110349afe: movabs $0x126f87390,%rbx  ;   {metadata({method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110349b08: and    $0x7ffff8,%edx
  0x0000000110349b0e: cmp    $0x0,%edx
  0x0000000110349b11: je     0x000000011034a20a
  0x0000000110349b17: mov    %rax,%rbx
  0x0000000110349b1a: movabs $0x127172098,%rdx  ;   {metadata(method data for {method} {0x0000000126f87390} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x0000000110349b24: addq   $0x1,0x108(%rdx)
  0x0000000110349b2c: movabs $0x12708aa48,%rbx  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110349b36: mov    0xdc(%rbx),%edx
  0x0000000110349b3c: add    $0x8,%edx
  0x0000000110349b3f: mov    %edx,0xdc(%rbx)
  0x0000000110349b45: movabs $0x126f12480,%rbx  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110349b4f: and    $0x7ffff8,%edx
  0x0000000110349b55: cmp    $0x0,%edx
  0x0000000110349b58: je     0x000000011034a221
  0x0000000110349b5e: mov    $0x10,%ebx
  0x0000000110349b63: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x0000000110349b6d: mov    %rax,%r11
  0x0000000110349b70: movslq %ebx,%rbx
  0x0000000110349b73: mov    %rbx,%rdi
  0x0000000110349b76: cmp    $0xffffff,%rbx
  0x0000000110349b7d: ja     0x000000011034a238
  0x0000000110349b83: movabs $0x17,%rsi
  0x0000000110349b8d: lea    (%rsi,%rbx,2),%rsi
  0x0000000110349b91: and    $0xfffffffffffffff8,%rsi
  0x0000000110349b95: mov    0x60(%r15),%rax
  0x0000000110349b99: lea    (%rax,%rsi,1),%rsi
  0x0000000110349b9d: cmp    0x70(%r15),%rsi
  0x0000000110349ba1: ja     0x000000011034a238
  0x0000000110349ba7: mov    %rsi,0x60(%r15)
  0x0000000110349bab: sub    %rax,%rsi
  0x0000000110349bae: movq   $0x1,(%rax)
  0x0000000110349bb5: mov    %rdx,%rcx
  0x0000000110349bb8: shr    $0x3,%rcx
  0x0000000110349bbc: mov    %ecx,0x8(%rax)
  0x0000000110349bbf: mov    %ebx,0xc(%rax)
  0x0000000110349bc2: sub    $0x10,%rsi
  0x0000000110349bc6: je     0x0000000110349bdd
  0x0000000110349bcc: xor    %rbx,%rbx
  0x0000000110349bcf: shr    $0x3,%rsi
  0x0000000110349bd3: mov    %rbx,0x8(%rax,%rsi,8)
  0x0000000110349bd8: dec    %rsi
  0x0000000110349bdb: jne    0x0000000110349bd3  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)

  0x0000000110349bdd: mov    %rax,%r10
  0x0000000110349be0: shr    $0x3,%r10
  0x0000000110349be4: mov    %r10d,0x10(%r11)
  0x0000000110349be8: mov    %r11,%rax
  0x0000000110349beb: shr    $0x9,%rax
  0x0000000110349bef: movabs $0x109ac3000,%rdx
  0x0000000110349bf9: movb   $0x0,(%rax,%rdx,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)

  0x0000000110349bfd: mov    %r11,%rax
  0x0000000110349c00: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349c0a: mov    0x8(%rax),%eax
  0x0000000110349c0d: shl    $0x3,%rax
  0x0000000110349c11: cmp    0x140(%rdx),%rax
  0x0000000110349c18: jne    0x0000000110349c27
  0x0000000110349c1a: addq   $0x1,0x148(%rdx)
  0x0000000110349c22: jmpq   0x0000000110349c8d
  0x0000000110349c27: cmp    0x150(%rdx),%rax
  0x0000000110349c2e: jne    0x0000000110349c3d
  0x0000000110349c30: addq   $0x1,0x158(%rdx)
  0x0000000110349c38: jmpq   0x0000000110349c8d
  0x0000000110349c3d: cmpq   $0x0,0x140(%rdx)
  0x0000000110349c48: jne    0x0000000110349c61
  0x0000000110349c4a: mov    %rax,0x140(%rdx)
  0x0000000110349c51: movq   $0x1,0x148(%rdx)
  0x0000000110349c5c: jmpq   0x0000000110349c8d
  0x0000000110349c61: cmpq   $0x0,0x150(%rdx)
  0x0000000110349c6c: jne    0x0000000110349c85
  0x0000000110349c6e: mov    %rax,0x150(%rdx)
  0x0000000110349c75: movq   $0x1,0x158(%rdx)
  0x0000000110349c80: jmpq   0x0000000110349c8d
  0x0000000110349c85: addq   $0x1,0x138(%rdx)
  0x0000000110349c8d: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349c97: mov    0xdc(%rdx),%esi
  0x0000000110349c9d: add    $0x8,%esi
  0x0000000110349ca0: mov    %esi,0xdc(%rdx)
  0x0000000110349ca6: movabs $0x126f8b378,%rdx  ;   {metadata({method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349cb0: and    $0x7ffff8,%esi
  0x0000000110349cb6: cmp    $0x0,%esi
  0x0000000110349cb9: je     0x000000011034a242
  0x0000000110349cbf: mov    %r11,%rax
  0x0000000110349cc2: movabs $0x127132540,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b378} 'append' '(Ljava/lang/String;)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349ccc: addq   $0x1,0x108(%rdx)
  0x0000000110349cd4: movabs $0x76ada1760,%rdx  ;   {oop("fromIndex = ")}
  0x0000000110349cde: mov    %r11,%rsi          ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@17 (line 1010)

  0x0000000110349ce1: mov    %r11,0x98(%rsp)
  0x0000000110349ce9: nop
  0x0000000110349cea: nop
  0x0000000110349ceb: nop
  0x0000000110349cec: nop
  0x0000000110349ced: nop
  0x0000000110349cee: nop
  0x0000000110349cef: callq  0x000000010ff580a0  ; OopMap{[152]=Oop [160]=Oop off=4404}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@17 (line 1010)
                                                ;   {optimized virtual_call}
  0x0000000110349cf4: mov    0x98(%rsp),%rax
  0x0000000110349cfc: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349d06: mov    0x8(%rax),%eax
  0x0000000110349d09: shl    $0x3,%rax
  0x0000000110349d0d: cmp    0x170(%rdx),%rax
  0x0000000110349d14: jne    0x0000000110349d23
  0x0000000110349d16: addq   $0x1,0x178(%rdx)
  0x0000000110349d1e: jmpq   0x0000000110349d89
  0x0000000110349d23: cmp    0x180(%rdx),%rax
  0x0000000110349d2a: jne    0x0000000110349d39
  0x0000000110349d2c: addq   $0x1,0x188(%rdx)
  0x0000000110349d34: jmpq   0x0000000110349d89
  0x0000000110349d39: cmpq   $0x0,0x170(%rdx)
  0x0000000110349d44: jne    0x0000000110349d5d
  0x0000000110349d46: mov    %rax,0x170(%rdx)
  0x0000000110349d4d: movq   $0x1,0x178(%rdx)
  0x0000000110349d58: jmpq   0x0000000110349d89
  0x0000000110349d5d: cmpq   $0x0,0x180(%rdx)
  0x0000000110349d68: jne    0x0000000110349d81
  0x0000000110349d6a: mov    %rax,0x180(%rdx)
  0x0000000110349d71: movq   $0x1,0x188(%rdx)
  0x0000000110349d7c: jmpq   0x0000000110349d89
  0x0000000110349d81: addq   $0x1,0x168(%rdx)
  0x0000000110349d89: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349d93: mov    0xdc(%rdx),%esi
  0x0000000110349d99: add    $0x8,%esi
  0x0000000110349d9c: mov    %esi,0xdc(%rdx)
  0x0000000110349da2: movabs $0x126f8b838,%rdx  ;   {metadata({method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349dac: and    $0x7ffff8,%esi
  0x0000000110349db2: cmp    $0x0,%esi
  0x0000000110349db5: je     0x000000011034a259
  0x0000000110349dbb: mov    0x98(%rsp),%rax
  0x0000000110349dc3: movabs $0x127174fa0,%rdx  ;   {metadata(method data for {method} {0x0000000126f8b838} 'append' '(I)Ljava/lang/StringBuilder;' in 'java/lang/StringBuilder')}
  0x0000000110349dcd: addq   $0x1,0x108(%rdx)
  0x0000000110349dd5: mov    0x68(%rsp),%edx
  0x0000000110349dd9: mov    0x98(%rsp),%rsi    ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@21 (line 1010)

  0x0000000110349de1: nop
  0x0000000110349de2: nop
  0x0000000110349de3: nop
  0x0000000110349de4: nop
  0x0000000110349de5: nop
  0x0000000110349de6: nop
  0x0000000110349de7: callq  0x000000010ff580a0  ; OopMap{[152]=Oop [160]=Oop off=4652}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@21 (line 1010)
                                                ;   {optimized virtual_call}
  0x0000000110349dec: mov    0x98(%rsp),%rax
  0x0000000110349df4: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349dfe: mov    0x8(%rax),%eax
  0x0000000110349e01: shl    $0x3,%rax
  0x0000000110349e05: cmp    0x1a0(%rdx),%rax
  0x0000000110349e0c: jne    0x0000000110349e1b
  0x0000000110349e0e: addq   $0x1,0x1a8(%rdx)
  0x0000000110349e16: jmpq   0x0000000110349e81
  0x0000000110349e1b: cmp    0x1b0(%rdx),%rax
  0x0000000110349e22: jne    0x0000000110349e31
  0x0000000110349e24: addq   $0x1,0x1b8(%rdx)
  0x0000000110349e2c: jmpq   0x0000000110349e81
  0x0000000110349e31: cmpq   $0x0,0x1a0(%rdx)
  0x0000000110349e3c: jne    0x0000000110349e55
  0x0000000110349e3e: mov    %rax,0x1a0(%rdx)
  0x0000000110349e45: movq   $0x1,0x1a8(%rdx)
  0x0000000110349e50: jmpq   0x0000000110349e81
  0x0000000110349e55: cmpq   $0x0,0x1b0(%rdx)
  0x0000000110349e60: jne    0x0000000110349e79
  0x0000000110349e62: mov    %rax,0x1b0(%rdx)
  0x0000000110349e69: movq   $0x1,0x1b8(%rdx)
  0x0000000110349e74: jmpq   0x0000000110349e81
  0x0000000110349e79: addq   $0x1,0x198(%rdx)
  0x0000000110349e81: movabs $0x1271730f8,%rdx  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349e8b: mov    0xdc(%rdx),%esi
  0x0000000110349e91: add    $0x8,%esi
  0x0000000110349e94: mov    %esi,0xdc(%rdx)
  0x0000000110349e9a: movabs $0x126f8c728,%rdx  ;   {metadata({method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349ea4: and    $0x7ffff8,%esi
  0x0000000110349eaa: cmp    $0x0,%esi
  0x0000000110349ead: je     0x000000011034a270
  0x0000000110349eb3: movabs $0x7c00016d0,%rdx  ;   {metadata('java/lang/String')}
  0x0000000110349ebd: mov    0x60(%r15),%rax
  0x0000000110349ec1: lea    0x18(%rax),%rdi
  0x0000000110349ec5: cmp    0x70(%r15),%rdi
  0x0000000110349ec9: ja     0x000000011034a287
  0x0000000110349ecf: mov    %rdi,0x60(%r15)
  0x0000000110349ed3: mov    0xa8(%rdx),%rcx
  0x0000000110349eda: mov    %rcx,(%rax)
  0x0000000110349edd: mov    %rdx,%rcx
  0x0000000110349ee0: shr    $0x3,%rcx
  0x0000000110349ee4: mov    %ecx,0x8(%rax)
  0x0000000110349ee7: xor    %rcx,%rcx
  0x0000000110349eea: mov    %ecx,0xc(%rax)
  0x0000000110349eed: xor    %rcx,%rcx
  0x0000000110349ef0: mov    %rcx,0x10(%rax)    ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)

  0x0000000110349ef4: mov    0x98(%rsp),%rdx
  0x0000000110349efc: mov    0x10(%rdx),%ecx
  0x0000000110349eff: shl    $0x3,%rcx          ;*getfield value
                                                ; - java.lang.StringBuilder::toString@5 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)

  0x0000000110349f03: mov    0xc(%rdx),%r8d     ;*getfield count
                                                ; - java.lang.StringBuilder::toString@10 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)

  0x0000000110349f07: mov    %rax,%rdx
  0x0000000110349f0a: movabs $0x1271730f8,%rsi  ;   {metadata(method data for {method} {0x0000000126f8c728} 'toString' '()Ljava/lang/String;' in 'java/lang/StringBuilder')}
  0x0000000110349f14: addq   $0x1,0x108(%rsi)
  0x0000000110349f1c: mov    %rcx,%rdx
  0x0000000110349f1f: mov    $0x0,%ecx
  0x0000000110349f24: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)

  0x0000000110349f27: mov    %rax,0xa8(%rsp)
  0x0000000110349f2f: callq  0x000000010ff580a0  ; OopMap{[160]=Oop [168]=Oop off=4980}
                                                ;*invokespecial <init>
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)
                                                ;   {optimized virtual_call}
  0x0000000110349f34: mov    0xa0(%rsp),%rax
  0x0000000110349f3c: movabs $0x12727c7d8,%rdx  ;   {metadata(method data for {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList')}
  0x0000000110349f46: addq   $0x1,0x1c8(%rdx)
  0x0000000110349f4e: mov    0xa8(%rsp),%rdx
  0x0000000110349f56: mov    0xa0(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@27 (line 1010)

  0x0000000110349f5e: nop
  0x0000000110349f5f: callq  0x000000010ff580a0  ; OopMap{[160]=Oop off=5028}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList::subListRangeCheck@27 (line 1010)
                                                ;   {optimized virtual_call}
  0x0000000110349f64: mov    0xa0(%rsp),%rax
  0x0000000110349f6c: jmpq   0x000000011034a2bf
  0x0000000110349f71: mov    %rdi,0x8(%rsp)
  0x0000000110349f76: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110349f7e: callq  0x00000001100129e0  ; OopMap{off=5059}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList::subListRangeCheck@-1 (line 1009)
                                                ;   {runtime_call}
  0x0000000110349f83: jmpq   0x0000000110348c06
  0x0000000110349f88: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110349f92: mov    $0xa050f00,%eax
  0x0000000110349f97: callq  0x00000001100118a0  ; OopMap{off=5084}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@68 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349f9c: jmpq   0x0000000110348cc0
  0x0000000110349fa1: mov    %rdx,%rdx
  0x0000000110349fa4: callq  0x000000011000e7e0  ; OopMap{off=5097}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@68 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349fa9: jmpq   0x0000000110348d05
  0x0000000110349fae: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110349fb8: mov    $0xa050f00,%eax
  0x0000000110349fbd: callq  0x00000001100118a0  ; OopMap{rax=Oop off=5122}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@72 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349fc2: jmpq   0x0000000110348d08
  0x0000000110349fc7: mov    %rdx,%rdx
  0x0000000110349fca: callq  0x000000011000e7e0  ; OopMap{[112]=Oop off=5135}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@72 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349fcf: jmpq   0x0000000110348d4e
  0x0000000110349fd4: mov    %rbx,0x8(%rsp)
  0x0000000110349fd9: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110349fe1: callq  0x00000001100129e0  ; OopMap{[112]=Oop rax=Oop off=5158}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::<init>@-1 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349fe6: jmpq   0x0000000110348d95
  0x0000000110349feb: mov    %rbx,0x8(%rsp)
  0x0000000110349ff0: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110349ff8: callq  0x00000001100129e0  ; OopMap{[112]=Oop rax=Oop off=5181}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)
                                                ;   {runtime_call}
  0x0000000110349ffd: jmpq   0x0000000110348ddc
  0x000000011034a002: mov    %rbx,0x8(%rsp)
  0x000000011034a007: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a00f: callq  0x00000001100129e0  ; OopMap{[112]=Oop rax=Oop off=5204}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a014: jmpq   0x0000000110348e23
  0x000000011034a019: callq  0x000000011000f0e0  ; OopMap{[112]=Oop r13=Oop off=5214}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@76 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a01e: jmpq   0x0000000110348ea2
  0x000000011034a023: mov    %rdx,0x8(%rsp)
  0x000000011034a028: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a030: callq  0x00000001100129e0  ; OopMap{[112]=Oop r13=Oop off=5237}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@81 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a035: jmpq   0x0000000110348f84
  0x000000011034a03a: mov    %rdx,0x8(%rsp)
  0x000000011034a03f: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a047: callq  0x00000001100129e0  ; OopMap{[96]=Oop [112]=Oop off=5260}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@85 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a04c: jmpq   0x0000000110349078
  0x000000011034a051: mov    %rdx,0x8(%rsp)
  0x000000011034a056: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a05e: callq  0x00000001100129e0  ; OopMap{[96]=Oop [112]=Oop off=5283}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@90 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a063: jmpq   0x0000000110349168
  0x000000011034a068: mov    %rdx,0x8(%rsp)
  0x000000011034a06d: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a075: callq  0x00000001100129e0  ; OopMap{[96]=Oop [112]=Oop off=5306}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@94 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a07a: jmpq   0x0000000110349258
  0x000000011034a07f: mov    %rdx,0x8(%rsp)
  0x000000011034a084: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a08c: callq  0x00000001100129e0  ; OopMap{[96]=Oop [112]=Oop off=5329}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@99 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a091: jmpq   0x0000000110349348
  0x000000011034a096: mov    %rdx,0x8(%rsp)
  0x000000011034a09b: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a0a3: callq  0x00000001100129e0  ; OopMap{[96]=Oop [112]=Oop off=5352}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::toString@-1 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a0a8: jmpq   0x0000000110349438
  0x000000011034a0ad: mov    %rdx,%rdx
  0x000000011034a0b0: callq  0x000000011000e7e0  ; OopMap{[96]=Oop [112]=Oop off=5365}
                                                ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@102 (line 1014)
                                                ;   {runtime_call}
  0x000000011034a0b5: jmpq   0x0000000110349479
  0x000000011034a0ba: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034a0c4: mov    $0xa050f00,%eax
  0x000000011034a0c9: callq  0x00000001100118a0  ; OopMap{off=5390}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@36 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a0ce: jmpq   0x00000001103494e8
  0x000000011034a0d3: mov    %rdx,%rdx
  0x000000011034a0d6: callq  0x000000011000e520  ; OopMap{off=5403}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@36 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a0db: jmpq   0x00000001103494f7
  0x000000011034a0e0: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034a0ea: mov    $0xa050f00,%eax
  0x000000011034a0ef: callq  0x00000001100118a0  ; OopMap{rax=Oop off=5428}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@40 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a0f4: jmpq   0x00000001103494f8
  0x000000011034a0f9: mov    %rdx,%rdx
  0x000000011034a0fc: callq  0x000000011000e7e0  ; OopMap{[136]=Oop off=5441}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@40 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a101: jmpq   0x0000000110349541
  0x000000011034a106: mov    %rbx,0x8(%rsp)
  0x000000011034a10b: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a113: callq  0x00000001100129e0  ; OopMap{[136]=Oop rax=Oop off=5464}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::<init>@-1 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a118: jmpq   0x0000000110349588
  0x000000011034a11d: mov    %rbx,0x8(%rsp)
  0x000000011034a122: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a12a: callq  0x00000001100129e0  ; OopMap{[136]=Oop rax=Oop off=5487}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a12f: jmpq   0x00000001103495cf
  0x000000011034a134: mov    %rbx,0x8(%rsp)
  0x000000011034a139: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a141: callq  0x00000001100129e0  ; OopMap{[136]=Oop rax=Oop off=5510}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a146: jmpq   0x0000000110349616
  0x000000011034a14b: callq  0x000000011000f0e0  ; OopMap{[136]=Oop r11=Oop off=5520}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@44 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a150: jmpq   0x0000000110349695
  0x000000011034a155: mov    %rdx,0x8(%rsp)
  0x000000011034a15a: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a162: callq  0x00000001100129e0  ; OopMap{[136]=Oop r11=Oop off=5543}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@49 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a167: jmpq   0x0000000110349777
  0x000000011034a16c: mov    %rdx,0x8(%rsp)
  0x000000011034a171: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a179: callq  0x00000001100129e0  ; OopMap{[128]=Oop [136]=Oop off=5566}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@53 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a17e: jmpq   0x0000000110349873
  0x000000011034a183: mov    %rdx,0x8(%rsp)
  0x000000011034a188: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a190: callq  0x00000001100129e0  ; OopMap{[128]=Oop [136]=Oop off=5589}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::toString@-1 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a195: jmpq   0x000000011034996b
  0x000000011034a19a: mov    %rdx,%rdx
  0x000000011034a19d: callq  0x000000011000e7e0  ; OopMap{[128]=Oop [136]=Oop off=5602}
                                                ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@56 (line 1012)
                                                ;   {runtime_call}
  0x000000011034a1a2: jmpq   0x00000001103499ac
  0x000000011034a1a7: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034a1b1: mov    $0xa050f00,%eax
  0x000000011034a1b6: callq  0x00000001100118a0  ; OopMap{off=5627}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@4 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a1bb: jmpq   0x0000000110349a30
  0x000000011034a1c0: mov    %rdx,%rdx
  0x000000011034a1c3: callq  0x000000011000e520  ; OopMap{off=5640}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@4 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a1c8: jmpq   0x0000000110349a3f
  0x000000011034a1cd: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011034a1d7: mov    $0xa050f00,%eax
  0x000000011034a1dc: callq  0x00000001100118a0  ; OopMap{rax=Oop off=5665}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@8 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a1e1: jmpq   0x0000000110349a40
  0x000000011034a1e6: mov    %rdx,%rdx
  0x000000011034a1e9: callq  0x000000011000e7e0  ; OopMap{[160]=Oop off=5678}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@8 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a1ee: jmpq   0x0000000110349a89
  0x000000011034a1f3: mov    %rbx,0x8(%rsp)
  0x000000011034a1f8: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a200: callq  0x00000001100129e0  ; OopMap{[160]=Oop rax=Oop off=5701}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::<init>@-1 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a205: jmpq   0x0000000110349ad0
  0x000000011034a20a: mov    %rbx,0x8(%rsp)
  0x000000011034a20f: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a217: callq  0x00000001100129e0  ; OopMap{[160]=Oop rax=Oop off=5724}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a21c: jmpq   0x0000000110349b17
  0x000000011034a221: mov    %rbx,0x8(%rsp)
  0x000000011034a226: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a22e: callq  0x00000001100129e0  ; OopMap{[160]=Oop rax=Oop off=5747}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a233: jmpq   0x0000000110349b5e
  0x000000011034a238: callq  0x000000011000f0e0  ; OopMap{[160]=Oop r11=Oop off=5757}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ; - java.lang.StringBuilder::<init>@3 (line 89)
                                                ; - java.util.ArrayList::subListRangeCheck@12 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a23d: jmpq   0x0000000110349bdd
  0x000000011034a242: mov    %rdx,0x8(%rsp)
  0x000000011034a247: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a24f: callq  0x00000001100129e0  ; OopMap{[160]=Oop r11=Oop off=5780}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 136)
                                                ; - java.util.ArrayList::subListRangeCheck@17 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a254: jmpq   0x0000000110349cbf
  0x000000011034a259: mov    %rdx,0x8(%rsp)
  0x000000011034a25e: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a266: callq  0x00000001100129e0  ; OopMap{[152]=Oop [160]=Oop off=5803}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::append@-1 (line 208)
                                                ; - java.util.ArrayList::subListRangeCheck@21 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a26b: jmpq   0x0000000110349dbb
  0x000000011034a270: mov    %rdx,0x8(%rsp)
  0x000000011034a275: movq   $0xffffffffffffffff,(%rsp)
  0x000000011034a27d: callq  0x00000001100129e0  ; OopMap{[152]=Oop [160]=Oop off=5826}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::toString@-1 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a282: jmpq   0x0000000110349eb3
  0x000000011034a287: mov    %rdx,%rdx
  0x000000011034a28a: callq  0x000000011000e7e0  ; OopMap{[152]=Oop [160]=Oop off=5839}
                                                ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.util.ArrayList::subListRangeCheck@24 (line 1010)
                                                ;   {runtime_call}
  0x000000011034a28f: jmpq   0x0000000110349ef4
  0x000000011034a294: nop
  0x000000011034a295: nop
  0x000000011034a296: mov    0x2a8(%r15),%rax
  0x000000011034a29d: movabs $0x0,%r10
  0x000000011034a2a7: mov    %r10,0x2a8(%r15)
  0x000000011034a2ae: movabs $0x0,%r10
  0x000000011034a2b8: mov    %r10,0x2b0(%r15)
  0x000000011034a2bf: add    $0xc0,%rsp
  0x000000011034a2c6: pop    %rbp
  0x000000011034a2c7: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011034a2cc: hlt
  0x000000011034a2cd: hlt
  0x000000011034a2ce: hlt
  0x000000011034a2cf: hlt
  0x000000011034a2d0: hlt
  0x000000011034a2d1: hlt
  0x000000011034a2d2: hlt
  0x000000011034a2d3: hlt
  0x000000011034a2d4: hlt
  0x000000011034a2d5: hlt
  0x000000011034a2d6: hlt
  0x000000011034a2d7: hlt
  0x000000011034a2d8: hlt
  0x000000011034a2d9: hlt
  0x000000011034a2da: hlt
  0x000000011034a2db: hlt
  0x000000011034a2dc: hlt
  0x000000011034a2dd: hlt
  0x000000011034a2de: hlt
  0x000000011034a2df: hlt
[Stub Code]
  0x000000011034a2e0: nop                       ;   {no_reloc}
  0x000000011034a2e1: nop
  0x000000011034a2e2: nop
  0x000000011034a2e3: nop
  0x000000011034a2e4: nop
  0x000000011034a2e5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a2ef: jmpq   0x000000011034a2ef  ;   {runtime_call}
  0x000000011034a2f4: nop
  0x000000011034a2f5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a2ff: jmpq   0x000000011034a2ff  ;   {runtime_call}
  0x000000011034a304: nop
  0x000000011034a305: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a30f: jmpq   0x000000011034a30f  ;   {runtime_call}
  0x000000011034a314: nop
  0x000000011034a315: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a31f: jmpq   0x000000011034a31f  ;   {runtime_call}
  0x000000011034a324: nop
  0x000000011034a325: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a32f: jmpq   0x000000011034a32f  ;   {runtime_call}
  0x000000011034a334: nop
  0x000000011034a335: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a33f: jmpq   0x000000011034a33f  ;   {runtime_call}
  0x000000011034a344: nop
  0x000000011034a345: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a34f: jmpq   0x000000011034a34f  ;   {runtime_call}
  0x000000011034a354: nop
  0x000000011034a355: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a35f: jmpq   0x000000011034a35f  ;   {runtime_call}
  0x000000011034a364: nop
  0x000000011034a365: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a36f: jmpq   0x000000011034a36f  ;   {runtime_call}
  0x000000011034a374: nop
  0x000000011034a375: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a37f: jmpq   0x000000011034a37f  ;   {runtime_call}
  0x000000011034a384: nop
  0x000000011034a385: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a38f: jmpq   0x000000011034a38f  ;   {runtime_call}
  0x000000011034a394: nop
  0x000000011034a395: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a39f: jmpq   0x000000011034a39f  ;   {runtime_call}
  0x000000011034a3a4: nop
  0x000000011034a3a5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a3af: jmpq   0x000000011034a3af  ;   {runtime_call}
  0x000000011034a3b4: nop
  0x000000011034a3b5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a3bf: jmpq   0x000000011034a3bf  ;   {runtime_call}
  0x000000011034a3c4: nop
  0x000000011034a3c5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011034a3cf: jmpq   0x000000011034a3cf  ;   {runtime_call}
[Exception Handler]
  0x000000011034a3d4: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011034a3d9: mov    %rsp,-0x28(%rsp)
  0x000000011034a3de: sub    $0x80,%rsp
  0x000000011034a3e5: mov    %rax,0x78(%rsp)
  0x000000011034a3ea: mov    %rcx,0x70(%rsp)
  0x000000011034a3ef: mov    %rdx,0x68(%rsp)
  0x000000011034a3f4: mov    %rbx,0x60(%rsp)
  0x000000011034a3f9: mov    %rbp,0x50(%rsp)
  0x000000011034a3fe: mov    %rsi,0x48(%rsp)
  0x000000011034a403: mov    %rdi,0x40(%rsp)
  0x000000011034a408: mov    %r8,0x38(%rsp)
  0x000000011034a40d: mov    %r9,0x30(%rsp)
  0x000000011034a412: mov    %r10,0x28(%rsp)
  0x000000011034a417: mov    %r11,0x20(%rsp)
  0x000000011034a41c: mov    %r12,0x18(%rsp)
  0x000000011034a421: mov    %r13,0x10(%rsp)
  0x000000011034a426: mov    %r14,0x8(%rsp)
  0x000000011034a42b: mov    %r15,(%rsp)
  0x000000011034a42f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011034a439: movabs $0x11034a3d9,%rsi  ;   {internal_word}
  0x000000011034a443: mov    %rsp,%rdx
  0x000000011034a446: and    $0xfffffffffffffff0,%rsp
  0x000000011034a44a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011034a44f: hlt
[Deopt Handler Code]
  0x000000011034a450: movabs $0x11034a450,%r10  ;   {section_word}
  0x000000011034a45a: push   %r10
  0x000000011034a45c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011034a461: hlt
  0x000000011034a462: hlt
  0x000000011034a463: hlt
  0x000000011034a464: hlt
  0x000000011034a465: hlt
  0x000000011034a466: hlt
  0x000000011034a467: hlt
Decoding compiled method 0x0000000110351090:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f45680} 'threadTerminated' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup'
  # this:     rsi:rsi   = 'java/lang/ThreadGroup'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x0000000110351200: mov    0x8(%rsi),%r10d
  0x0000000110351204: shl    $0x3,%r10
  0x0000000110351208: cmp    %r10,%rax
  0x000000011035120b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110351211: data32 xchg %ax,%ax
  0x0000000110351214: nopl   0x0(%rax,%rax,1)
  0x000000011035121c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110351220: mov    %eax,-0x14000(%rsp)
  0x0000000110351227: push   %rbp
  0x0000000110351228: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - java.lang.ThreadGroup::threadTerminated@-1 (line 941)

  0x000000011035122c: mov    %rdx,(%rsp)
  0x0000000110351230: mov    %rsi,%rbp
  0x0000000110351233: mov    (%rsi),%rax
  0x0000000110351236: mov    %rax,%r10
  0x0000000110351239: and    $0x7,%r10
  0x000000011035123d: cmp    $0x5,%r10
  0x0000000110351241: jne    0x00000001103512ef
  0x0000000110351247: mov    $0xf8000e22,%r11d  ;   {metadata('java/lang/ThreadGroup')}
  0x000000011035124d: movabs $0x0,%r10
  0x0000000110351257: lea    (%r10,%r11,8),%r10
  0x000000011035125b: mov    0xa8(%r10),%r10
  0x0000000110351262: mov    %r10,%r11
  0x0000000110351265: or     %r15,%r11
  0x0000000110351268: mov    %r11,%r8
  0x000000011035126b: xor    %rax,%r8
  0x000000011035126e: test   $0xffffffffffffff87,%r8
  0x0000000110351275: jne    0x0000000110351351  ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)

  0x000000011035127b: mov    %rbp,%rsi
  0x000000011035127e: mov    (%rsp),%rdx
  0x0000000110351282: nop
  0x0000000110351283: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=136}
                                                ;*invokespecial remove
                                                ; - java.lang.ThreadGroup::threadTerminated@6 (line 942)
                                                ;   {optimized virtual_call}
  0x0000000110351288: mov    0x14(%rbp),%r10d   ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::threadTerminated@10 (line 944)

  0x000000011035128c: test   %r10d,%r10d
  0x000000011035128f: je     0x00000001103512c0  ;*aload_0
                                                ; - java.lang.ThreadGroup::threadTerminated@20 (line 947)

  0x0000000110351291: movzbl 0x1d(%rbp),%r11d
  0x0000000110351296: test   %r11d,%r11d
  0x0000000110351299: je     0x00000001103512a0  ;*ifeq
                                                ; - java.lang.ThreadGroup::threadTerminated@24 (line 947)

  0x000000011035129b: test   %r10d,%r10d
  0x000000011035129e: je     0x00000001103512ce
  0x00000001103512a0: mov    $0x7,%r10d
  0x00000001103512a6: and    0x0(%rbp),%r10
  0x00000001103512aa: cmp    $0x5,%r10
  0x00000001103512ae: jne    0x000000011035137c  ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@53 (line 952)

  0x00000001103512b4: add    $0x30,%rsp
  0x00000001103512b8: pop    %rbp
  0x00000001103512b9: test   %eax,-0x37382bf(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x00000001103512bf: retq
  0x00000001103512c0: mov    %rbp,%rsi
  0x00000001103512c3: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=200}
                                                ;*invokevirtual notifyAll
                                                ; - java.lang.ThreadGroup::threadTerminated@17 (line 945)
                                                ;   {optimized virtual_call}
  0x00000001103512c8: mov    0x14(%rbp),%r10d   ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::threadTerminated@28 (line 947)

  0x00000001103512cc: jmp    0x0000000110351291
  0x00000001103512ce: mov    0x10(%rbp),%r11d
  0x00000001103512d2: test   %r11d,%r11d
  0x00000001103512d5: jne    0x00000001103512a0  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@38 (line 947)

  0x00000001103512d7: mov    0x18(%rbp),%r11d
  0x00000001103512db: test   %r11d,%r11d
  0x00000001103512de: jne    0x00000001103512a0  ;*ifne
                                                ; - java.lang.ThreadGroup::threadTerminated@45 (line 947)

  0x00000001103512e0: mov    %rbp,%rsi
  0x00000001103512e3: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=232}
                                                ;*invokevirtual destroy
                                                ; - java.lang.ThreadGroup::threadTerminated@49 (line 950)
                                                ;   {optimized virtual_call}
  0x00000001103512e8: jmp    0x00000001103512a0
  0x00000001103512ea: lock cmpxchg %r10,(%rsi)
  0x00000001103512ef: lea    0x20(%rsp),%rbx
  0x00000001103512f4: mov    (%rsi),%rax
  0x00000001103512f7: test   $0x2,%rax
  0x00000001103512fd: jne    0x0000000110351323
  0x00000001103512ff: or     $0x1,%rax
  0x0000000110351303: mov    %rax,(%rbx)
  0x0000000110351306: lock cmpxchg %rbx,(%rsi)
  0x000000011035130b: je     0x000000011035133c
  0x0000000110351311: sub    %rsp,%rax
  0x0000000110351314: and    $0xfffffffffffff007,%rax
  0x000000011035131b: mov    %rax,(%rbx)
  0x000000011035131e: jmpq   0x000000011035133c
  0x0000000110351323: movq   $0x3,(%rbx)
  0x000000011035132a: mov    %rax,%rbx
  0x000000011035132d: mov    0x16(%rbx),%rax
  0x0000000110351331: test   %rax,%rax
  0x0000000110351334: jne    0x000000011035133c
  0x0000000110351336: lock cmpxchg %r15,0x16(%rbx)
  0x000000011035133c: je     0x000000011035127b
  0x0000000110351342: lea    0x20(%rsp),%rdx
  0x0000000110351347: callq  0x0000000110018f60  ; OopMap{rbp=Oop [0]=Oop off=332}
                                                ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)
                                                ;   {runtime_call}
  0x000000011035134c: jmpq   0x000000011035127b
  0x0000000110351351: test   $0x7,%r8
  0x0000000110351358: jne    0x00000001103512ea
  0x000000011035135a: test   $0x300,%r8
  0x0000000110351361: jne    0x0000000110351370
  0x0000000110351363: and    $0x37f,%rax
  0x000000011035136a: mov    %rax,%r11
  0x000000011035136d: or     %r15,%r11
  0x0000000110351370: lock cmpxchg %r11,(%rsi)
  0x0000000110351375: jne    0x0000000110351342
  0x0000000110351377: jmpq   0x000000011035127b
  0x000000011035137c: lea    0x20(%rsp),%rax
  0x0000000110351381: cmpq   $0x0,(%rax)
  0x0000000110351388: je     0x0000000110351404
  0x000000011035138e: mov    0x0(%rbp),%r10
  0x0000000110351392: test   $0x2,%r10
  0x0000000110351399: je     0x00000001103513fb
  0x000000011035139b: mov    0x16(%r10),%rax
  0x000000011035139f: xor    %r15,%rax
  0x00000001103513a2: or     0x26(%r10),%rax
  0x00000001103513a6: jne    0x0000000110351404
  0x00000001103513a8: mov    0x36(%r10),%rax
  0x00000001103513ac: or     0x3e(%r10),%rax
  0x00000001103513b0: jne    0x00000001103513bc
  0x00000001103513b2: movq   $0x0,0x16(%r10)
  0x00000001103513ba: jmp    0x0000000110351404
  0x00000001103513bc: cmpq   $0x0,0x46(%r10)
  0x00000001103513c4: je     0x00000001103513ef
  0x00000001103513c6: movq   $0x0,0x16(%r10)
  0x00000001103513ce: lock addl $0x0,(%rsp)
  0x00000001103513d3: cmpq   $0x0,0x46(%r10)
  0x00000001103513db: jne    0x00000001103513f4
  0x00000001103513dd: movabs $0x0,%rax
  0x00000001103513e7: lock cmpxchg %r15,0x16(%r10)
  0x00000001103513ed: jne    0x00000001103513f4
  0x00000001103513ef: or     $0x1,%eax
  0x00000001103513f2: jmp    0x0000000110351404
  0x00000001103513f4: test   $0x0,%eax
  0x00000001103513f9: jmp    0x0000000110351404
  0x00000001103513fb: mov    (%rax),%r10
  0x00000001103513fe: lock cmpxchg %r10,0x0(%rbp)
  0x0000000110351404: je     0x00000001103512b4
  0x000000011035140a: mov    %rbp,%rdi
  0x000000011035140d: lea    0x20(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)

  0x0000000110351412: movabs $0x10e087a5a,%r10
  0x000000011035141c: callq  *%r10              ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@53 (line 952)

  0x000000011035141f: jmpq   0x00000001103512b4  ;*invokevirtual destroy
                                                ; - java.lang.ThreadGroup::threadTerminated@49 (line 950)

  0x0000000110351424: mov    %rax,%rbx
  0x0000000110351427: jmp    0x0000000110351431  ;*invokevirtual notifyAll
                                                ; - java.lang.ThreadGroup::threadTerminated@17 (line 945)

  0x0000000110351429: mov    %rax,%rbx
  0x000000011035142c: jmp    0x0000000110351431  ;*invokespecial remove
                                                ; - java.lang.ThreadGroup::threadTerminated@6 (line 942)

  0x000000011035142e: mov    %rax,%rbx
  0x0000000110351431: mov    $0x7,%r10d
  0x0000000110351437: and    0x0(%rbp),%r10
  0x000000011035143b: cmp    $0x5,%r10
  0x000000011035143f: jne    0x000000011035144e  ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@59 (line 952)

  0x0000000110351441: mov    %rbx,%rsi
  0x0000000110351444: add    $0x30,%rsp
  0x0000000110351448: pop    %rbp
  0x0000000110351449: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035144e: lea    0x20(%rsp),%rax
  0x0000000110351453: cmpq   $0x0,(%rax)
  0x000000011035145a: je     0x00000001103514d6
  0x0000000110351460: mov    0x0(%rbp),%r10
  0x0000000110351464: test   $0x2,%r10
  0x000000011035146b: je     0x00000001103514cd
  0x000000011035146d: mov    0x16(%r10),%rax
  0x0000000110351471: xor    %r15,%rax
  0x0000000110351474: or     0x26(%r10),%rax
  0x0000000110351478: jne    0x00000001103514d6
  0x000000011035147a: mov    0x36(%r10),%rax
  0x000000011035147e: or     0x3e(%r10),%rax
  0x0000000110351482: jne    0x000000011035148e
  0x0000000110351484: movq   $0x0,0x16(%r10)
  0x000000011035148c: jmp    0x00000001103514d6
  0x000000011035148e: cmpq   $0x0,0x46(%r10)
  0x0000000110351496: je     0x00000001103514c1
  0x0000000110351498: movq   $0x0,0x16(%r10)
  0x00000001103514a0: lock addl $0x0,(%rsp)
  0x00000001103514a5: cmpq   $0x0,0x46(%r10)
  0x00000001103514ad: jne    0x00000001103514c6
  0x00000001103514af: movabs $0x0,%rax
  0x00000001103514b9: lock cmpxchg %r15,0x16(%r10)
  0x00000001103514bf: jne    0x00000001103514c6
  0x00000001103514c1: or     $0x1,%eax
  0x00000001103514c4: jmp    0x00000001103514d6
  0x00000001103514c6: test   $0x0,%eax
  0x00000001103514cb: jmp    0x00000001103514d6
  0x00000001103514cd: mov    (%rax),%r10
  0x00000001103514d0: lock cmpxchg %r10,0x0(%rbp)
  0x00000001103514d6: je     0x0000000110351441
  0x00000001103514dc: mov    %rbp,%rdi
  0x00000001103514df: lea    0x20(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.ThreadGroup::threadTerminated@3 (line 941)

  0x00000001103514e4: movabs $0x10e087a5a,%r10
  0x00000001103514ee: callq  *%r10              ;*monitorexit
                                                ; - java.lang.ThreadGroup::threadTerminated@59 (line 952)

  0x00000001103514f1: jmpq   0x0000000110351441
  0x00000001103514f6: hlt
  0x00000001103514f7: hlt
  0x00000001103514f8: hlt
  0x00000001103514f9: hlt
  0x00000001103514fa: hlt
  0x00000001103514fb: hlt
  0x00000001103514fc: hlt
  0x00000001103514fd: hlt
  0x00000001103514fe: hlt
  0x00000001103514ff: hlt
[Stub Code]
  0x0000000110351500: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035150a: jmpq   0x000000011035150a  ;   {runtime_call}
  0x000000011035150f: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110351519: jmpq   0x0000000110351519  ;   {runtime_call}
  0x000000011035151e: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110351528: jmpq   0x0000000110351528  ;   {runtime_call}
[Exception Handler]
  0x000000011035152d: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110351532: callq  0x0000000110351537
  0x0000000110351537: subq   $0x5,(%rsp)
  0x000000011035153c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110351541: hlt
  0x0000000110351542: hlt
  0x0000000110351543: hlt
  0x0000000110351544: hlt
  0x0000000110351545: hlt
  0x0000000110351546: hlt
  0x0000000110351547: hlt
Decoding compiled method 0x0000000110348590:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000126fe5018} 'subListRangeCheck' '(III)V' in 'java/util/ArrayList'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0x30]  (sp of caller)
  0x00000001103486e0: mov    %eax,-0x14000(%rsp)
  0x00000001103486e7: push   %rbp
  0x00000001103486e8: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.util.ArrayList::subListRangeCheck@-1 (line 1009)

  0x00000001103486ec: test   %esi,%esi
  0x00000001103486ee: jl     0x0000000110348729  ;*ifge
                                                ; - java.util.ArrayList::subListRangeCheck@1 (line 1009)

  0x00000001103486f0: cmp    %ecx,%edx
  0x00000001103486f2: jg     0x0000000110348704  ;*if_icmple
                                                ; - java.util.ArrayList::subListRangeCheck@33 (line 1011)

  0x00000001103486f4: cmp    %edx,%esi
  0x00000001103486f6: jg     0x0000000110348715  ;*if_icmple
                                                ; - java.util.ArrayList::subListRangeCheck@65 (line 1013)

  0x00000001103486f8: add    $0x20,%rsp
  0x00000001103486fc: pop    %rbp
  0x00000001103486fd: test   %eax,-0x372f703(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110348703: retq
  0x0000000110348704: mov    $0x2c,%esi
  0x0000000110348709: mov    %edx,%ebp
  0x000000011034870b: callq  0x000000010ff576a0  ; OopMap{off=48}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@36 (line 1012)
                                                ;   {runtime_call}
  0x0000000110348710: callq  0x000000010e0276f4  ;*new
                                                ; - java.util.ArrayList::subListRangeCheck@36 (line 1012)
                                                ;   {runtime_call}
  0x0000000110348715: mov    %esi,%ebp
  0x0000000110348717: mov    %edx,(%rsp)
  0x000000011034871a: mov    $0x7,%esi
  0x000000011034871f: callq  0x000000010ff576a0  ; OopMap{off=68}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@68 (line 1014)
                                                ;   {runtime_call}
  0x0000000110348724: callq  0x000000010e0276f4  ;*new
                                                ; - java.util.ArrayList::subListRangeCheck@68 (line 1014)
                                                ;   {runtime_call}
  0x0000000110348729: mov    %esi,%ebp
  0x000000011034872b: mov    $0x2c,%esi
  0x0000000110348730: data32 xchg %ax,%ax
  0x0000000110348733: callq  0x000000010ff576a0  ; OopMap{off=88}
                                                ;*new  ; - java.util.ArrayList::subListRangeCheck@4 (line 1010)
                                                ;   {runtime_call}
  0x0000000110348738: callq  0x000000010e0276f4  ;*new
                                                ; - java.util.ArrayList::subListRangeCheck@4 (line 1010)
                                                ;   {runtime_call}
  0x000000011034873d: hlt
  0x000000011034873e: hlt
  0x000000011034873f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110348740: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110348745: callq  0x000000011034874a
  0x000000011034874a: subq   $0x5,(%rsp)
  0x000000011034874f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110348754: hlt
  0x0000000110348755: hlt
  0x0000000110348756: hlt
  0x0000000110348757: hlt
Decoding compiled method 0x0000000110353510:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/AbstractCalendar'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = 'sun/util/calendar/CalendarDate'
  #           [sp+0xd0]  (sp of caller)
  0x0000000110353740: mov    0x8(%rsi),%r10d
  0x0000000110353744: shl    $0x3,%r10
  0x0000000110353748: cmp    %rax,%r10
  0x000000011035374b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110353751: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035375c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110353760: mov    %eax,-0x14000(%rsp)
  0x0000000110353767: push   %rbp
  0x0000000110353768: sub    $0xc0,%rsp
  0x000000011035376f: mov    %rsi,0x80(%rsp)
  0x0000000110353777: mov    %rdx,0x68(%rsp)
  0x000000011035377c: mov    %rcx,0x78(%rsp)
  0x0000000110353781: movabs $0x12727bd68,%rbx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x000000011035378b: mov    0xdc(%rbx),%edi
  0x0000000110353791: add    $0x8,%edi
  0x0000000110353794: mov    %edi,0xdc(%rbx)
  0x000000011035379a: movabs $0x127211fd0,%rbx  ;   {metadata({method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x00000001103537a4: and    $0x0,%edi
  0x00000001103537a7: cmp    $0x0,%edi
  0x00000001103537aa: je     0x00000001103544c3  ;*iconst_0
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@0 (line 116)

  0x00000001103537b0: cmp    (%rcx),%rax        ;*invokevirtual getZone
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)
                                                ; implicit exception: dispatches to 0x00000001103544da
  0x00000001103537b3: mov    %rcx,%rbx
  0x00000001103537b6: movabs $0x12727bd68,%rdi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x00000001103537c0: mov    0x8(%rbx),%ebx
  0x00000001103537c3: shl    $0x3,%rbx
  0x00000001103537c7: cmp    0x110(%rdi),%rbx
  0x00000001103537ce: jne    0x00000001103537dd
  0x00000001103537d0: addq   $0x1,0x118(%rdi)
  0x00000001103537d8: jmpq   0x0000000110353843
  0x00000001103537dd: cmp    0x120(%rdi),%rbx
  0x00000001103537e4: jne    0x00000001103537f3
  0x00000001103537e6: addq   $0x1,0x128(%rdi)
  0x00000001103537ee: jmpq   0x0000000110353843
  0x00000001103537f3: cmpq   $0x0,0x110(%rdi)
  0x00000001103537fe: jne    0x0000000110353817
  0x0000000110353800: mov    %rbx,0x110(%rdi)
  0x0000000110353807: movq   $0x1,0x118(%rdi)
  0x0000000110353812: jmpq   0x0000000110353843
  0x0000000110353817: cmpq   $0x0,0x120(%rdi)
  0x0000000110353822: jne    0x000000011035383b
  0x0000000110353824: mov    %rbx,0x120(%rdi)
  0x000000011035382b: movq   $0x1,0x128(%rdi)
  0x0000000110353836: jmpq   0x0000000110353843
  0x000000011035383b: addq   $0x1,0x108(%rdi)
  0x0000000110353843: mov    0x44(%rcx),%r8d
  0x0000000110353847: shl    $0x3,%r8           ;*getfield zoneinfo
                                                ; - sun.util.calendar.CalendarDate::getZone@1 (line 364)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)

  0x000000011035384b: cmp    $0x0,%r8
  0x000000011035384f: movabs $0x12727bd68,%rbx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353859: movabs $0x138,%rdi
  0x0000000110353863: je     0x0000000110353873
  0x0000000110353869: movabs $0x148,%rdi
  0x0000000110353873: mov    (%rbx,%rdi,1),%rax
  0x0000000110353877: lea    0x1(%rax),%rax
  0x000000011035387b: mov    %rax,(%rbx,%rdi,1)
  0x000000011035387f: jne    0x00000001103538b4  ;*ifnull
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@20 (line 123)

  0x0000000110353885: movabs $0x0,%rbx
  0x000000011035388f: mov    $0x0,%edi
  0x0000000110353894: mov    $0x0,%eax
  0x0000000110353899: mov    $0x0,%r8d
  0x000000011035389f: mov    %rbx,0x98(%rsp)
  0x00000001103538a7: mov    %r8d,0x94(%rsp)
  0x00000001103538af: jmpq   0x0000000110353de4  ;*aload_3
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@101 (line 143)

  0x00000001103538b4: mov    $0x2,%ebx
  0x00000001103538b9: mov    %rdx,%r9
  0x00000001103538bc: movabs $0x7c0000b68,%rdx  ;   {metadata({type array int})}
  0x00000001103538c6: movslq %ebx,%rbx
  0x00000001103538c9: mov    %rbx,%rdi
  0x00000001103538cc: cmp    $0xffffff,%rbx
  0x00000001103538d3: ja     0x00000001103544df
  0x00000001103538d9: movabs $0x17,%rsi
  0x00000001103538e3: lea    (%rsi,%rbx,4),%rsi
  0x00000001103538e7: and    $0xfffffffffffffff8,%rsi
  0x00000001103538eb: mov    0x60(%r15),%rax
  0x00000001103538ef: lea    (%rax,%rsi,1),%rsi
  0x00000001103538f3: cmp    0x70(%r15),%rsi
  0x00000001103538f7: ja     0x00000001103544df
  0x00000001103538fd: mov    %rsi,0x60(%r15)
  0x0000000110353901: sub    %rax,%rsi
  0x0000000110353904: movq   $0x1,(%rax)
  0x000000011035390b: mov    %rdx,%rcx
  0x000000011035390e: shr    $0x3,%rcx
  0x0000000110353912: mov    %ecx,0x8(%rax)
  0x0000000110353915: mov    %ebx,0xc(%rax)
  0x0000000110353918: sub    $0x10,%rsi
  0x000000011035391c: je     0x0000000110353933
  0x0000000110353922: xor    %rbx,%rbx
  0x0000000110353925: shr    $0x3,%rsi
  0x0000000110353929: mov    %rbx,0x8(%rax,%rsi,8)
  0x000000011035392e: dec    %rsi
  0x0000000110353931: jne    0x0000000110353929  ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)

  0x0000000110353933: mov    %rax,0x70(%rsp)
  0x0000000110353938: cmp    $0x0,%r8
  0x000000011035393c: jne    0x0000000110353957
  0x000000011035393e: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353948: orl    $0x100,0x150(%rsi)
  0x0000000110353952: jmpq   0x0000000110353a19
  0x0000000110353957: movabs $0x7c0055508,%rdi  ;   {metadata('sun/util/calendar/ZoneInfo')}
  0x0000000110353961: mov    0x8(%r8),%ecx
  0x0000000110353965: shl    $0x3,%rcx
  0x0000000110353969: cmp    %rcx,%rdi
  0x000000011035396c: jne    0x00000001103539fd
  0x0000000110353972: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x000000011035397c: mov    0x8(%r8),%edi
  0x0000000110353980: shl    $0x3,%rdi
  0x0000000110353984: cmp    0x160(%rsi),%rdi
  0x000000011035398b: jne    0x000000011035399a
  0x000000011035398d: addq   $0x1,0x168(%rsi)
  0x0000000110353995: jmpq   0x0000000110353a1e
  0x000000011035399a: cmp    0x170(%rsi),%rdi
  0x00000001103539a1: jne    0x00000001103539b0
  0x00000001103539a3: addq   $0x1,0x178(%rsi)
  0x00000001103539ab: jmpq   0x0000000110353a1e
  0x00000001103539b0: cmpq   $0x0,0x160(%rsi)
  0x00000001103539bb: jne    0x00000001103539d4
  0x00000001103539bd: mov    %rdi,0x160(%rsi)
  0x00000001103539c4: movq   $0x1,0x168(%rsi)
  0x00000001103539cf: jmpq   0x0000000110353a1e
  0x00000001103539d4: cmpq   $0x0,0x170(%rsi)
  0x00000001103539df: jne    0x00000001103539f8
  0x00000001103539e1: mov    %rdi,0x170(%rsi)
  0x00000001103539e8: movq   $0x1,0x178(%rsi)
  0x00000001103539f3: jmpq   0x0000000110353a1e
  0x00000001103539f8: jmpq   0x0000000110353a1e
  0x00000001103539fd: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353a07: subq   $0x1,0x158(%rsi)
  0x0000000110353a0f: jmpq   0x0000000110353a19
  0x0000000110353a14: jmpq   0x0000000110353a1e
  0x0000000110353a19: xor    %rdx,%rdx
  0x0000000110353a1c: jmp    0x0000000110353a28
  0x0000000110353a1e: movabs $0x1,%rdx          ;*instanceof
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@30 (line 125)

  0x0000000110353a28: cmp    $0x0,%edx
  0x0000000110353a2b: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353a35: movabs $0x188,%rcx
  0x0000000110353a3f: je     0x0000000110353a4f
  0x0000000110353a45: movabs $0x198,%rcx
  0x0000000110353a4f: mov    (%rdx,%rcx,1),%rsi
  0x0000000110353a53: lea    0x1(%rsi),%rsi
  0x0000000110353a57: mov    %rsi,(%rdx,%rcx,1)
  0x0000000110353a5b: je     0x0000000110353bf1  ;*ifeq
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@33 (line 125)

  0x0000000110353a61: cmp    $0x0,%r8
  0x0000000110353a65: jne    0x0000000110353a80
  0x0000000110353a67: movabs $0x12727bd68,%rdi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353a71: orl    $0x100,0x1a0(%rdi)
  0x0000000110353a7b: jmpq   0x0000000110353b42
  0x0000000110353a80: movabs $0x7c0055508,%rbx  ;   {metadata('sun/util/calendar/ZoneInfo')}
  0x0000000110353a8a: mov    0x8(%r8),%edx
  0x0000000110353a8e: shl    $0x3,%rdx
  0x0000000110353a92: cmp    %rdx,%rbx
  0x0000000110353a95: jne    0x0000000110353b26
  0x0000000110353a9b: movabs $0x12727bd68,%rdi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353aa5: mov    0x8(%r8),%ebx
  0x0000000110353aa9: shl    $0x3,%rbx
  0x0000000110353aad: cmp    0x1b0(%rdi),%rbx
  0x0000000110353ab4: jne    0x0000000110353ac3
  0x0000000110353ab6: addq   $0x1,0x1b8(%rdi)
  0x0000000110353abe: jmpq   0x0000000110353b42
  0x0000000110353ac3: cmp    0x1c0(%rdi),%rbx
  0x0000000110353aca: jne    0x0000000110353ad9
  0x0000000110353acc: addq   $0x1,0x1c8(%rdi)
  0x0000000110353ad4: jmpq   0x0000000110353b42
  0x0000000110353ad9: cmpq   $0x0,0x1b0(%rdi)
  0x0000000110353ae4: jne    0x0000000110353afd
  0x0000000110353ae6: mov    %rbx,0x1b0(%rdi)
  0x0000000110353aed: movq   $0x1,0x1b8(%rdi)
  0x0000000110353af8: jmpq   0x0000000110353b42
  0x0000000110353afd: cmpq   $0x0,0x1c0(%rdi)
  0x0000000110353b08: jne    0x0000000110353b21
  0x0000000110353b0a: mov    %rbx,0x1c0(%rdi)
  0x0000000110353b11: movq   $0x1,0x1c8(%rdi)
  0x0000000110353b1c: jmpq   0x0000000110353b42
  0x0000000110353b21: jmpq   0x0000000110353b42
  0x0000000110353b26: movabs $0x12727bd68,%rdi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353b30: subq   $0x1,0x1a8(%rdi)
  0x0000000110353b38: jmpq   0x00000001103544e9
  0x0000000110353b3d: jmpq   0x0000000110353b42
  0x0000000110353b42: mov    %r8,%rdi           ;*checkcast
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@38 (line 126)

  0x0000000110353b45: cmp    (%rdi),%rax        ;*invokevirtual getOffsets
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)
                                                ; implicit exception: dispatches to 0x00000001103544f2
  0x0000000110353b48: mov    %rdi,%rdx
  0x0000000110353b4b: movabs $0x12727bd68,%r8   ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353b55: movabs $0x7c0055508,%r10  ;   {metadata('sun/util/calendar/ZoneInfo')}
  0x0000000110353b5f: mov    %r10,0x1e0(%r8)
  0x0000000110353b66: addq   $0x1,0x1e8(%r8)
  0x0000000110353b6e: movabs $0x12727dc70,%rdx  ;   {metadata(method data for {method} {0x000000012722f8e8} 'getOffsets' '(J[I)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110353b78: mov    0xdc(%rdx),%r8d
  0x0000000110353b7f: add    $0x8,%r8d
  0x0000000110353b83: mov    %r8d,0xdc(%rdx)
  0x0000000110353b8a: movabs $0x12722f8e8,%rdx  ;   {metadata({method} {0x000000012722f8e8} 'getOffsets' '(J[I)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110353b94: and    $0x7ffff8,%r8d
  0x0000000110353b9b: cmp    $0x0,%r8d
  0x0000000110353b9f: je     0x00000001103544f7
  0x0000000110353ba5: mov    %rdi,%rdx
  0x0000000110353ba8: movabs $0x12727dc70,%r8   ;   {metadata(method data for {method} {0x000000012722f8e8} 'getOffsets' '(J[I)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110353bb2: addq   $0x1,0x108(%r8)
  0x0000000110353bba: mov    %r9,%rdx
  0x0000000110353bbd: mov    %rax,%rcx
  0x0000000110353bc0: mov    $0x0,%r8d
  0x0000000110353bc6: mov    %rdi,%rsi          ;*invokespecial getOffsets
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@4 (line 236)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)

  0x0000000110353bc9: nop
  0x0000000110353bca: nop
  0x0000000110353bcb: nop
  0x0000000110353bcc: nop
  0x0000000110353bcd: nop
  0x0000000110353bce: nop
  0x0000000110353bcf: callq  0x000000010ff580a0  ; OopMap{[128]=Oop [120]=Oop [112]=Oop off=1172}
                                                ;*invokespecial getOffsets
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@4 (line 236)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)
                                                ;   {optimized virtual_call}
  0x0000000110353bd4: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353bde: incl   0x208(%rdx)
  0x0000000110353be4: mov    %rax,%rsi
  0x0000000110353be7: mov    0x70(%rsp),%rdi
  0x0000000110353bec: jmpq   0x0000000110353d7a  ;*goto
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@49 (line 126)

  0x0000000110353bf1: cmp    (%r8),%rax         ; implicit exception: dispatches to 0x000000011035450e
  0x0000000110353bf4: mov    %r8,%rdx
  0x0000000110353bf7: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353c01: mov    0x8(%rdx),%edx
  0x0000000110353c04: shl    $0x3,%rdx
  0x0000000110353c08: cmp    0x228(%rsi),%rdx
  0x0000000110353c0f: jne    0x0000000110353c1e
  0x0000000110353c11: addq   $0x1,0x230(%rsi)
  0x0000000110353c19: jmpq   0x0000000110353c84
  0x0000000110353c1e: cmp    0x238(%rsi),%rdx
  0x0000000110353c25: jne    0x0000000110353c34
  0x0000000110353c27: addq   $0x1,0x240(%rsi)
  0x0000000110353c2f: jmpq   0x0000000110353c84
  0x0000000110353c34: cmpq   $0x0,0x228(%rsi)
  0x0000000110353c3f: jne    0x0000000110353c58
  0x0000000110353c41: mov    %rdx,0x228(%rsi)
  0x0000000110353c48: movq   $0x1,0x230(%rsi)
  0x0000000110353c53: jmpq   0x0000000110353c84
  0x0000000110353c58: cmpq   $0x0,0x238(%rsi)
  0x0000000110353c63: jne    0x0000000110353c7c
  0x0000000110353c65: mov    %rdx,0x238(%rsi)
  0x0000000110353c6c: movq   $0x1,0x240(%rsi)
  0x0000000110353c77: jmpq   0x0000000110353c84
  0x0000000110353c7c: addq   $0x1,0x220(%rsi)
  0x0000000110353c84: mov    0x68(%rsp),%rdx
  0x0000000110353c89: mov    %r8,%rsi           ;*invokevirtual getOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@55 (line 128)

  0x0000000110353c8c: mov    %r8,0x88(%rsp)
  0x0000000110353c94: nop
  0x0000000110353c95: movabs $0xffffffffffffffff,%rax
  0x0000000110353c9f: callq  0x000000010ff582e0  ; OopMap{[128]=Oop [120]=Oop [112]=Oop [136]=Oop off=1380}
                                                ;*invokevirtual getOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@55 (line 128)
                                                ;   {virtual_call}
  0x0000000110353ca4: mov    0x88(%rsp),%r8
  0x0000000110353cac: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353cb6: mov    0x8(%r8),%r8d
  0x0000000110353cba: shl    $0x3,%r8
  0x0000000110353cbe: cmp    0x258(%rsi),%r8
  0x0000000110353cc5: jne    0x0000000110353cd4
  0x0000000110353cc7: addq   $0x1,0x260(%rsi)
  0x0000000110353ccf: jmpq   0x0000000110353d3a
  0x0000000110353cd4: cmp    0x268(%rsi),%r8
  0x0000000110353cdb: jne    0x0000000110353cea
  0x0000000110353cdd: addq   $0x1,0x270(%rsi)
  0x0000000110353ce5: jmpq   0x0000000110353d3a
  0x0000000110353cea: cmpq   $0x0,0x258(%rsi)
  0x0000000110353cf5: jne    0x0000000110353d0e
  0x0000000110353cf7: mov    %r8,0x258(%rsi)
  0x0000000110353cfe: movq   $0x1,0x260(%rsi)
  0x0000000110353d09: jmpq   0x0000000110353d3a
  0x0000000110353d0e: cmpq   $0x0,0x268(%rsi)
  0x0000000110353d19: jne    0x0000000110353d32
  0x0000000110353d1b: mov    %r8,0x268(%rsi)
  0x0000000110353d22: movq   $0x1,0x270(%rsi)
  0x0000000110353d2d: jmpq   0x0000000110353d3a
  0x0000000110353d32: addq   $0x1,0x250(%rsi)
  0x0000000110353d3a: mov    0x88(%rsp),%rsi    ;*invokevirtual getRawOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@65 (line 129)

  0x0000000110353d42: mov    %eax,0x90(%rsp)
  0x0000000110353d49: nop
  0x0000000110353d4a: nop
  0x0000000110353d4b: nop
  0x0000000110353d4c: nop
  0x0000000110353d4d: movabs $0xffffffffffffffff,%rax
  0x0000000110353d57: callq  0x000000010ff582e0  ; OopMap{[128]=Oop [120]=Oop [112]=Oop off=1564}
                                                ;*invokevirtual getRawOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@65 (line 129)
                                                ;   {virtual_call}
  0x0000000110353d5c: mov    0x70(%rsp),%rdi
  0x0000000110353d61: mov    %eax,0x10(%rdi)    ;*iastore
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@68 (line 129)

  0x0000000110353d64: mov    0x10(%rdi),%eax    ;*iaload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@77 (line 130)

  0x0000000110353d67: mov    0x90(%rsp),%edx
  0x0000000110353d6e: sub    %eax,%edx
  0x0000000110353d70: mov    %edx,0x14(%rdi)    ;*iastore
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@79 (line 130)

  0x0000000110353d73: mov    0x90(%rsp),%esi    ;*iload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@80 (line 139)

  0x0000000110353d7a: mov    %rsi,%rax
  0x0000000110353d7d: mov    $0x5265c00,%ebx
  0x0000000110353d82: cmp    $0x80000000,%eax
  0x0000000110353d88: jne    0x0000000110353d99
  0x0000000110353d8e: xor    %edx,%edx
  0x0000000110353d90: cmp    $0xffffffffffffffff,%ebx
  0x0000000110353d93: je     0x0000000110353d9c
  0x0000000110353d99: cltd
  0x0000000110353d9a: idiv   %ebx               ;*idiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@84 (line 139)
                                                ; implicit exception: dispatches to 0x0000000110354513
  0x0000000110353d9c: movslq %eax,%rbx
  0x0000000110353d9f: mov    %rsi,%rax
  0x0000000110353da2: mov    $0x5265c00,%ecx
  0x0000000110353da7: cmp    $0x80000000,%eax
  0x0000000110353dad: jne    0x0000000110353dbe
  0x0000000110353db3: xor    %edx,%edx
  0x0000000110353db5: cmp    $0xffffffffffffffff,%ecx
  0x0000000110353db8: je     0x0000000110353dc1
  0x0000000110353dbe: cltd
  0x0000000110353dbf: idiv   %ecx               ;*irem
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@92 (line 140)
                                                ; implicit exception: dispatches to 0x0000000110354518
  0x0000000110353dc1: mov    0x14(%rdi),%edi    ;*iaload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@98 (line 141)

  0x0000000110353dc4: mov    %rsi,%rax
  0x0000000110353dc7: mov    %rdx,%r8           ;*aload_3
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@101 (line 143)

  0x0000000110353dca: mov    %rbx,0x98(%rsp)
  0x0000000110353dd2: mov    %r8d,0x94(%rsp)
  0x0000000110353dda: mov    0x78(%rsp),%rcx
  0x0000000110353ddf: mov    0x68(%rsp),%rdx
  0x0000000110353de4: mov    %rcx,%rsi
  0x0000000110353de7: movabs $0x12727bd68,%r9   ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353df1: mov    0x8(%rsi),%esi
  0x0000000110353df4: shl    $0x3,%rsi
  0x0000000110353df8: cmp    0x288(%r9),%rsi
  0x0000000110353dff: jne    0x0000000110353e0e
  0x0000000110353e01: addq   $0x1,0x290(%r9)
  0x0000000110353e09: jmpq   0x0000000110353e74
  0x0000000110353e0e: cmp    0x298(%r9),%rsi
  0x0000000110353e15: jne    0x0000000110353e24
  0x0000000110353e17: addq   $0x1,0x2a0(%r9)
  0x0000000110353e1f: jmpq   0x0000000110353e74
  0x0000000110353e24: cmpq   $0x0,0x288(%r9)
  0x0000000110353e2f: jne    0x0000000110353e48
  0x0000000110353e31: mov    %rsi,0x288(%r9)
  0x0000000110353e38: movq   $0x1,0x290(%r9)
  0x0000000110353e43: jmpq   0x0000000110353e74
  0x0000000110353e48: cmpq   $0x0,0x298(%r9)
  0x0000000110353e53: jne    0x0000000110353e6c
  0x0000000110353e55: mov    %rsi,0x298(%r9)
  0x0000000110353e5c: movq   $0x1,0x2a0(%r9)
  0x0000000110353e67: jmpq   0x0000000110353e74
  0x0000000110353e6c: addq   $0x1,0x280(%r9)
  0x0000000110353e74: movabs $0x12727e1d8,%rsi  ;   {metadata(method data for {method} {0x000000012721d088} 'setZoneOffset' '(I)V' in 'sun/util/calendar/CalendarDate')}
  0x0000000110353e7e: mov    0xdc(%rsi),%r9d
  0x0000000110353e85: add    $0x8,%r9d
  0x0000000110353e89: mov    %r9d,0xdc(%rsi)
  0x0000000110353e90: movabs $0x12721d088,%rsi  ;   {metadata({method} {0x000000012721d088} 'setZoneOffset' '(I)V' in 'sun/util/calendar/CalendarDate')}
  0x0000000110353e9a: and    $0x7ffff8,%r9d
  0x0000000110353ea1: cmp    $0x0,%r9d
  0x0000000110353ea5: je     0x000000011035451d
  0x0000000110353eab: mov    %eax,0x34(%rcx)    ;*putfield zoneOffset
                                                ; - sun.util.calendar.CalendarDate::setZoneOffset@2 (line 495)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@104 (line 143)

  0x0000000110353eae: mov    %rcx,%rsi
  0x0000000110353eb1: movabs $0x12727bd68,%rax  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353ebb: mov    0x8(%rsi),%esi
  0x0000000110353ebe: shl    $0x3,%rsi
  0x0000000110353ec2: cmp    0x2b8(%rax),%rsi
  0x0000000110353ec9: jne    0x0000000110353ed8
  0x0000000110353ecb: addq   $0x1,0x2c0(%rax)
  0x0000000110353ed3: jmpq   0x0000000110353f3e
  0x0000000110353ed8: cmp    0x2c8(%rax),%rsi
  0x0000000110353edf: jne    0x0000000110353eee
  0x0000000110353ee1: addq   $0x1,0x2d0(%rax)
  0x0000000110353ee9: jmpq   0x0000000110353f3e
  0x0000000110353eee: cmpq   $0x0,0x2b8(%rax)
  0x0000000110353ef9: jne    0x0000000110353f12
  0x0000000110353efb: mov    %rsi,0x2b8(%rax)
  0x0000000110353f02: movq   $0x1,0x2c0(%rax)
  0x0000000110353f0d: jmpq   0x0000000110353f3e
  0x0000000110353f12: cmpq   $0x0,0x2c8(%rax)
  0x0000000110353f1d: jne    0x0000000110353f36
  0x0000000110353f1f: mov    %rsi,0x2c8(%rax)
  0x0000000110353f26: movq   $0x1,0x2d0(%rax)
  0x0000000110353f31: jmpq   0x0000000110353f3e
  0x0000000110353f36: addq   $0x1,0x2b0(%rax)
  0x0000000110353f3e: movabs $0x12727e8e0,%rsi  ;   {metadata(method data for {method} {0x000000012721d1b8} 'setDaylightSaving' '(I)V' in 'sun/util/calendar/CalendarDate')}
  0x0000000110353f48: mov    0xdc(%rsi),%eax
  0x0000000110353f4e: add    $0x8,%eax
  0x0000000110353f51: mov    %eax,0xdc(%rsi)
  0x0000000110353f57: movabs $0x12721d1b8,%rsi  ;   {metadata({method} {0x000000012721d1b8} 'setDaylightSaving' '(I)V' in 'sun/util/calendar/CalendarDate')}
  0x0000000110353f61: and    $0x7ffff8,%eax
  0x0000000110353f67: cmp    $0x0,%eax
  0x0000000110353f6a: je     0x0000000110354534
  0x0000000110353f70: mov    %edi,0x38(%rcx)    ;*putfield daylightSaving
                                                ; - sun.util.calendar.CalendarDate::setDaylightSaving@2 (line 503)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@110 (line 144)

  0x0000000110353f73: movabs $0x5265c00,%rax
  0x0000000110353f7d: mov    %rdx,%rsi
  0x0000000110353f80: mov    %rax,%r9
  0x0000000110353f83: mov    %r9,%rdi
  0x0000000110353f86: cmp    $0x0,%r9
  0x0000000110353f8a: je     0x000000011035454b
  0x0000000110353f90: mov    %rax,0xa0(%rsp)
  0x0000000110353f98: callq  0x000000010e08655e  ;*ldiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@119 (line 146)
                                                ;   {runtime_call}
  0x0000000110353f9d: mov    0x98(%rsp),%rbx
  0x0000000110353fa5: add    %rax,%rbx
  0x0000000110353fa8: mov    0x68(%rsp),%rsi
  0x0000000110353fad: mov    0xa0(%rsp),%rax
  0x0000000110353fb5: mov    %rax,%rdi
  0x0000000110353fb8: cmp    $0x0,%rax
  0x0000000110353fbc: je     0x0000000110354550
  0x0000000110353fc2: mov    %rbx,0xa8(%rsp)
  0x0000000110353fca: callq  0x000000010e086586  ;*lrem
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@129 (line 147)
                                                ;   {runtime_call}
  0x0000000110353fcf: mov    %eax,%eax
  0x0000000110353fd1: mov    0x94(%rsp),%r8d
  0x0000000110353fd9: add    %eax,%r8d
  0x0000000110353fdc: cmp    $0x5265c00,%r8d
  0x0000000110353fe3: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110353fed: movabs $0x2e0,%rcx
  0x0000000110353ff7: jl     0x0000000110354007
  0x0000000110353ffd: movabs $0x2f0,%rcx
  0x0000000110354007: mov    (%rdx,%rcx,1),%rsi
  0x000000011035400b: lea    0x1(%rsi),%rsi
  0x000000011035400f: mov    %rsi,(%rdx,%rcx,1)  ;*if_icmplt
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@138 (line 148)

  0x0000000110354013: mov    0xa8(%rsp),%rbx    ;*iload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@157 (line 155)

  0x000000011035401b: jl     0x0000000110354084
  0x0000000110354021: jmpq   0x00000001103540c3  ;*if_icmplt
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@138 (line 148)

  0x0000000110354026: xchg   %ax,%ax
  0x0000000110354028: add    $0x5265c00,%r8d
  0x000000011035402f: movabs $0x1,%r10
  0x0000000110354039: sub    %r10,%rbx
  0x000000011035403c: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110354046: mov    0xe0(%rdx),%ecx
  0x000000011035404c: add    $0x8,%ecx
  0x000000011035404f: mov    %ecx,0xe0(%rdx)
  0x0000000110354055: movabs $0x127211fd0,%rdx  ;   {metadata({method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x000000011035405f: and    $0xfff8,%ecx
  0x0000000110354065: cmp    $0x0,%ecx
  0x0000000110354068: je     0x0000000110354555  ; OopMap{[128]=Oop [120]=Oop off=2350}
                                                ;*goto
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@175 (line 157)

  0x000000011035406e: test   %eax,-0x373af74(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x0000000110354074: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x000000011035407e: incl   0x338(%rdx)        ;*goto
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@175 (line 157)

  0x0000000110354084: cmp    $0x0,%r8d
  0x0000000110354088: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110354092: movabs $0x318,%rcx
  0x000000011035409c: jge    0x00000001103540ac
  0x00000001103540a2: movabs $0x328,%rcx
  0x00000001103540ac: mov    (%rdx,%rcx,1),%rsi
  0x00000001103540b0: lea    0x1(%rsi),%rsi
  0x00000001103540b4: mov    %rsi,(%rdx,%rcx,1)
  0x00000001103540b8: jge    0x00000001103540e7
  0x00000001103540be: jmpq   0x0000000110354028  ;*ifge
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@159 (line 155)

  0x00000001103540c3: sub    $0x5265c00,%r8d
  0x00000001103540ca: movabs $0x1,%r10
  0x00000001103540d4: add    %r10,%rbx
  0x00000001103540d7: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x00000001103540e1: incl   0x300(%rdx)        ;*goto
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@154 (line 151)

  0x00000001103540e7: mov    %r8d,0xb0(%rsp)
  0x00000001103540ef: mov    0x78(%rsp),%rcx
  0x00000001103540f4: mov    0x80(%rsp),%rsi
  0x00000001103540fc: movabs $0xaf93b,%r10
  0x0000000110354106: add    %r10,%rbx
  0x0000000110354109: mov    %rsi,%rdx
  0x000000011035410c: movabs $0x12727bd68,%rdi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110354116: mov    0x8(%rdx),%edx
  0x0000000110354119: shl    $0x3,%rdx
  0x000000011035411d: cmp    0x358(%rdi),%rdx
  0x0000000110354124: jne    0x0000000110354133
  0x0000000110354126: addq   $0x1,0x360(%rdi)
  0x000000011035412e: jmpq   0x0000000110354199
  0x0000000110354133: cmp    0x368(%rdi),%rdx
  0x000000011035413a: jne    0x0000000110354149
  0x000000011035413c: addq   $0x1,0x370(%rdi)
  0x0000000110354144: jmpq   0x0000000110354199
  0x0000000110354149: cmpq   $0x0,0x358(%rdi)
  0x0000000110354154: jne    0x000000011035416d
  0x0000000110354156: mov    %rdx,0x358(%rdi)
  0x000000011035415d: movq   $0x1,0x360(%rdi)
  0x0000000110354168: jmpq   0x0000000110354199
  0x000000011035416d: cmpq   $0x0,0x368(%rdi)
  0x0000000110354178: jne    0x0000000110354191
  0x000000011035417a: mov    %rdx,0x368(%rdi)
  0x0000000110354181: movq   $0x1,0x370(%rdi)
  0x000000011035418c: jmpq   0x0000000110354199
  0x0000000110354191: addq   $0x1,0x350(%rdi)
  0x0000000110354199: mov    %rcx,%rdx
  0x000000011035419c: mov    %rbx,%rcx
  0x000000011035419f: mov    %rsi,%rbx
  0x00000001103541a2: mov    %rbx,%rsi          ;*invokevirtual getCalendarDateFromFixedDate
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@190 (line 165)

  0x00000001103541a5: movabs $0xffffffffffffffff,%rax
  0x00000001103541af: callq  0x000000010ff582e0  ; OopMap{[128]=Oop [120]=Oop off=2676}
                                                ;*invokevirtual getCalendarDateFromFixedDate
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@190 (line 165)
                                                ;   {virtual_call}
  0x00000001103541b4: mov    0x80(%rsp),%rsi
  0x00000001103541bc: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x00000001103541c6: mov    0x8(%rsi),%esi
  0x00000001103541c9: shl    $0x3,%rsi
  0x00000001103541cd: cmp    0x388(%rdx),%rsi
  0x00000001103541d4: jne    0x00000001103541e3
  0x00000001103541d6: addq   $0x1,0x390(%rdx)
  0x00000001103541de: jmpq   0x0000000110354249
  0x00000001103541e3: cmp    0x398(%rdx),%rsi
  0x00000001103541ea: jne    0x00000001103541f9
  0x00000001103541ec: addq   $0x1,0x3a0(%rdx)
  0x00000001103541f4: jmpq   0x0000000110354249
  0x00000001103541f9: cmpq   $0x0,0x388(%rdx)
  0x0000000110354204: jne    0x000000011035421d
  0x0000000110354206: mov    %rsi,0x388(%rdx)
  0x000000011035420d: movq   $0x1,0x390(%rdx)
  0x0000000110354218: jmpq   0x0000000110354249
  0x000000011035421d: cmpq   $0x0,0x398(%rdx)
  0x0000000110354228: jne    0x0000000110354241
  0x000000011035422a: mov    %rsi,0x398(%rdx)
  0x0000000110354231: movq   $0x1,0x3a0(%rdx)
  0x000000011035423c: jmpq   0x0000000110354249
  0x0000000110354241: addq   $0x1,0x380(%rdx)
  0x0000000110354249: mov    0x78(%rsp),%rdx
  0x000000011035424e: mov    0xb0(%rsp),%ecx
  0x0000000110354255: mov    0x80(%rsp),%rsi    ;*invokevirtual setTimeOfDay
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@197 (line 168)

  0x000000011035425d: nop
  0x000000011035425e: nop
  0x000000011035425f: callq  0x000000010ff580a0  ; OopMap{[128]=Oop [120]=Oop off=2852}
                                                ;*invokevirtual setTimeOfDay
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@197 (line 168)
                                                ;   {optimized virtual_call}
  0x0000000110354264: mov    0x80(%rsp),%rsi
  0x000000011035426c: movabs $0x12727bd68,%rdx  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x0000000110354276: mov    0x8(%rsi),%esi
  0x0000000110354279: shl    $0x3,%rsi
  0x000000011035427d: cmp    0x3b8(%rdx),%rsi
  0x0000000110354284: jne    0x0000000110354293
  0x0000000110354286: addq   $0x1,0x3c0(%rdx)
  0x000000011035428e: jmpq   0x00000001103542f9
  0x0000000110354293: cmp    0x3c8(%rdx),%rsi
  0x000000011035429a: jne    0x00000001103542a9
  0x000000011035429c: addq   $0x1,0x3d0(%rdx)
  0x00000001103542a4: jmpq   0x00000001103542f9
  0x00000001103542a9: cmpq   $0x0,0x3b8(%rdx)
  0x00000001103542b4: jne    0x00000001103542cd
  0x00000001103542b6: mov    %rsi,0x3b8(%rdx)
  0x00000001103542bd: movq   $0x1,0x3c0(%rdx)
  0x00000001103542c8: jmpq   0x00000001103542f9
  0x00000001103542cd: cmpq   $0x0,0x3c8(%rdx)
  0x00000001103542d8: jne    0x00000001103542f1
  0x00000001103542da: mov    %rsi,0x3c8(%rdx)
  0x00000001103542e1: movq   $0x1,0x3d0(%rdx)
  0x00000001103542ec: jmpq   0x00000001103542f9
  0x00000001103542f1: addq   $0x1,0x3b0(%rdx)
  0x00000001103542f9: mov    0x78(%rsp),%rdx
  0x00000001103542fe: mov    0x80(%rsp),%rsi    ;*invokevirtual isLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@204 (line 169)

  0x0000000110354306: nop
  0x0000000110354307: nop
  0x0000000110354308: nop
  0x0000000110354309: nop
  0x000000011035430a: nop
  0x000000011035430b: nop
  0x000000011035430c: nop
  0x000000011035430d: movabs $0xffffffffffffffff,%rax
  0x0000000110354317: callq  0x000000010ff582e0  ; OopMap{[120]=Oop off=3036}
                                                ;*invokevirtual isLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@204 (line 169)
                                                ;   {virtual_call}
  0x000000011035431c: mov    0x78(%rsp),%rcx
  0x0000000110354321: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x000000011035432b: mov    0x8(%rcx),%ecx
  0x000000011035432e: shl    $0x3,%rcx
  0x0000000110354332: cmp    0x3e8(%rsi),%rcx
  0x0000000110354339: jne    0x0000000110354348
  0x000000011035433b: addq   $0x1,0x3f0(%rsi)
  0x0000000110354343: jmpq   0x00000001103543ae
  0x0000000110354348: cmp    0x3f8(%rsi),%rcx
  0x000000011035434f: jne    0x000000011035435e
  0x0000000110354351: addq   $0x1,0x400(%rsi)
  0x0000000110354359: jmpq   0x00000001103543ae
  0x000000011035435e: cmpq   $0x0,0x3e8(%rsi)
  0x0000000110354369: jne    0x0000000110354382
  0x000000011035436b: mov    %rcx,0x3e8(%rsi)
  0x0000000110354372: movq   $0x1,0x3f0(%rsi)
  0x000000011035437d: jmpq   0x00000001103543ae
  0x0000000110354382: cmpq   $0x0,0x3f8(%rsi)
  0x000000011035438d: jne    0x00000001103543a6
  0x000000011035438f: mov    %rcx,0x3f8(%rsi)
  0x0000000110354396: movq   $0x1,0x400(%rsi)
  0x00000001103543a1: jmpq   0x00000001103543ae
  0x00000001103543a6: addq   $0x1,0x3e0(%rsi)
  0x00000001103543ae: movabs $0x12727fa58,%rsi  ;   {metadata(method data for {method} {0x000000012721b470} 'setLeapYear' '(Z)V' in 'sun/util/calendar/CalendarDate')}
  0x00000001103543b8: mov    0xdc(%rsi),%edi
  0x00000001103543be: add    $0x8,%edi
  0x00000001103543c1: mov    %edi,0xdc(%rsi)
  0x00000001103543c7: movabs $0x12721b470,%rsi  ;   {metadata({method} {0x000000012721b470} 'setLeapYear' '(Z)V' in 'sun/util/calendar/CalendarDate')}
  0x00000001103543d1: and    $0x7ffff8,%edi
  0x00000001103543d7: cmp    $0x0,%edi
  0x00000001103543da: je     0x000000011035456c
  0x00000001103543e0: and    $0x1,%eax
  0x00000001103543e3: mov    0x78(%rsp),%rcx
  0x00000001103543e8: mov    %al,0x3c(%rcx)     ;*putfield leapYear
                                                ; - sun.util.calendar.CalendarDate::setLeapYear@2 (line 162)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@207 (line 169)

  0x00000001103543eb: mov    %rcx,%rax
  0x00000001103543ee: movabs $0x12727bd68,%rsi  ;   {metadata(method data for {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar')}
  0x00000001103543f8: mov    0x8(%rax),%eax
  0x00000001103543fb: shl    $0x3,%rax
  0x00000001103543ff: cmp    0x418(%rsi),%rax
  0x0000000110354406: jne    0x0000000110354415
  0x0000000110354408: addq   $0x1,0x420(%rsi)
  0x0000000110354410: jmpq   0x000000011035447b
  0x0000000110354415: cmp    0x428(%rsi),%rax
  0x000000011035441c: jne    0x000000011035442b
  0x000000011035441e: addq   $0x1,0x430(%rsi)
  0x0000000110354426: jmpq   0x000000011035447b
  0x000000011035442b: cmpq   $0x0,0x418(%rsi)
  0x0000000110354436: jne    0x000000011035444f
  0x0000000110354438: mov    %rax,0x418(%rsi)
  0x000000011035443f: movq   $0x1,0x420(%rsi)
  0x000000011035444a: jmpq   0x000000011035447b
  0x000000011035444f: cmpq   $0x0,0x428(%rsi)
  0x000000011035445a: jne    0x0000000110354473
  0x000000011035445c: mov    %rax,0x428(%rsi)
  0x0000000110354463: movq   $0x1,0x430(%rsi)
  0x000000011035446e: jmpq   0x000000011035447b
  0x0000000110354473: addq   $0x1,0x410(%rsi)
  0x000000011035447b: movabs $0x12727fb80,%rax  ;   {metadata(method data for {method} {0x000000012721cf58} 'setNormalized' '(Z)V' in 'sun/util/calendar/CalendarDate')}
  0x0000000110354485: mov    0xdc(%rax),%esi
  0x000000011035448b: add    $0x8,%esi
  0x000000011035448e: mov    %esi,0xdc(%rax)
  0x0000000110354494: movabs $0x12721cf58,%rax  ;   {metadata({method} {0x000000012721cf58} 'setNormalized' '(Z)V' in 'sun/util/calendar/CalendarDate')}
  0x000000011035449e: and    $0x7ffff8,%esi
  0x00000001103544a4: cmp    $0x0,%esi
  0x00000001103544a7: je     0x0000000110354583
  0x00000001103544ad: movb   $0x1,0x3d(%rcx)    ;*putfield normalized
                                                ; - sun.util.calendar.CalendarDate::setNormalized@2 (line 487)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@212 (line 170)

  0x00000001103544b1: mov    %rcx,%rax
  0x00000001103544b4: add    $0xc0,%rsp
  0x00000001103544bb: pop    %rbp
  0x00000001103544bc: test   %eax,-0x373b3c2(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103544c2: retq
  0x00000001103544c3: mov    %rbx,0x8(%rsp)
  0x00000001103544c8: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103544d0: callq  0x00000001100129e0  ; OopMap{rsi=Oop [128]=Oop rcx=Oop [120]=Oop off=3477}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@-1 (line 116)
                                                ;   {runtime_call}
  0x00000001103544d5: jmpq   0x00000001103537b0
  0x00000001103544da: callq  0x000000011000e080  ; OopMap{rsi=Oop [128]=Oop rcx=Oop [120]=Oop off=3487}
                                                ;*invokevirtual getZone
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)
                                                ;   {runtime_call}
  0x00000001103544df: callq  0x000000011000f0e0  ; OopMap{r8=Oop [120]=Oop [128]=Oop off=3492}
                                                ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)
                                                ;   {runtime_call}
  0x00000001103544e4: jmpq   0x0000000110353933
  0x00000001103544e9: mov    %r8,(%rsp)
  0x00000001103544ed: callq  0x0000000110010440  ; OopMap{rax=Oop [112]=Oop [120]=Oop [128]=Oop off=3506}
                                                ;*checkcast
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@38 (line 126)
                                                ;   {runtime_call}
  0x00000001103544f2: callq  0x000000011000e080  ; OopMap{rax=Oop [112]=Oop [120]=Oop [128]=Oop rdi=Oop off=3511}
                                                ;*invokevirtual getOffsets
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)
                                                ;   {runtime_call}
  0x00000001103544f7: mov    %rdx,0x8(%rsp)
  0x00000001103544fc: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110354504: callq  0x00000001100129e0  ; OopMap{rax=Oop [112]=Oop [120]=Oop [128]=Oop rdi=Oop off=3529}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@-1 (line 236)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)
                                                ;   {runtime_call}
  0x0000000110354509: jmpq   0x0000000110353ba5
  0x000000011035450e: callq  0x000000011000e080  ; OopMap{[128]=Oop [120]=Oop [112]=Oop r8=Oop off=3539}
                                                ;*invokevirtual getOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@55 (line 128)
                                                ;   {runtime_call}
  0x0000000110354513: callq  0x000000011000de40  ; OopMap{[128]=Oop [120]=Oop rdi=Oop [112]=Oop off=3544}
                                                ;*idiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@84 (line 139)
                                                ;   {runtime_call}
  0x0000000110354518: callq  0x000000011000de40  ; OopMap{[128]=Oop [120]=Oop rdi=Oop [112]=Oop off=3549}
                                                ;*irem
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@92 (line 140)
                                                ;   {runtime_call}
  0x000000011035451d: mov    %rsi,0x8(%rsp)
  0x0000000110354522: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035452a: callq  0x00000001100129e0  ; OopMap{[128]=Oop rcx=Oop [120]=Oop off=3567}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarDate::setZoneOffset@-1 (line 495)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@104 (line 143)
                                                ;   {runtime_call}
  0x000000011035452f: jmpq   0x0000000110353eab
  0x0000000110354534: mov    %rsi,0x8(%rsp)
  0x0000000110354539: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110354541: callq  0x00000001100129e0  ; OopMap{[128]=Oop rcx=Oop [120]=Oop off=3590}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarDate::setDaylightSaving@-1 (line 503)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@110 (line 144)
                                                ;   {runtime_call}
  0x0000000110354546: jmpq   0x0000000110353f70
  0x000000011035454b: callq  0x000000011000de40  ; OopMap{[128]=Oop rcx=Oop [120]=Oop off=3600}
                                                ;*ldiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@119 (line 146)
                                                ;   {runtime_call}
  0x0000000110354550: callq  0x000000011000de40  ; OopMap{[128]=Oop [120]=Oop off=3605}
                                                ;*lrem
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@129 (line 147)
                                                ;   {runtime_call}
  0x0000000110354555: mov    %rdx,0x8(%rsp)
  0x000000011035455a: movq   $0xaf,(%rsp)
  0x0000000110354562: callq  0x00000001100129e0  ; OopMap{[128]=Oop [120]=Oop off=3623}
                                                ;*goto
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@175 (line 157)
                                                ;   {runtime_call}
  0x0000000110354567: jmpq   0x000000011035406e
  0x000000011035456c: mov    %rsi,0x8(%rsp)
  0x0000000110354571: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110354579: callq  0x00000001100129e0  ; OopMap{[120]=Oop off=3646}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarDate::setLeapYear@-1 (line 162)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@207 (line 169)
                                                ;   {runtime_call}
  0x000000011035457e: jmpq   0x00000001103543e0
  0x0000000110354583: mov    %rax,0x8(%rsp)
  0x0000000110354588: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110354590: callq  0x00000001100129e0  ; OopMap{rcx=Oop [120]=Oop off=3669}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarDate::setNormalized@-1 (line 487)
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@212 (line 170)
                                                ;   {runtime_call}
  0x0000000110354595: jmpq   0x00000001103544ad
  0x000000011035459a: nop
  0x000000011035459b: nop
  0x000000011035459c: mov    0x2a8(%r15),%rax
  0x00000001103545a3: movabs $0x0,%r10
  0x00000001103545ad: mov    %r10,0x2a8(%r15)
  0x00000001103545b4: movabs $0x0,%r10
  0x00000001103545be: mov    %r10,0x2b0(%r15)
  0x00000001103545c5: add    $0xc0,%rsp
  0x00000001103545cc: pop    %rbp
  0x00000001103545cd: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103545d2: hlt
  0x00000001103545d3: hlt
  0x00000001103545d4: hlt
  0x00000001103545d5: hlt
  0x00000001103545d6: hlt
  0x00000001103545d7: hlt
  0x00000001103545d8: hlt
  0x00000001103545d9: hlt
  0x00000001103545da: hlt
  0x00000001103545db: hlt
  0x00000001103545dc: hlt
  0x00000001103545dd: hlt
  0x00000001103545de: hlt
  0x00000001103545df: hlt
[Stub Code]
  0x00000001103545e0: nop                       ;   {no_reloc}
  0x00000001103545e1: nop
  0x00000001103545e2: nop
  0x00000001103545e3: nop
  0x00000001103545e4: nop
  0x00000001103545e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103545ef: jmpq   0x00000001103545ef  ;   {runtime_call}
  0x00000001103545f4: nop
  0x00000001103545f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103545ff: jmpq   0x00000001103545ff  ;   {runtime_call}
  0x0000000110354604: nop
  0x0000000110354605: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035460f: jmpq   0x000000011035460f  ;   {runtime_call}
  0x0000000110354614: nop
  0x0000000110354615: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035461f: jmpq   0x000000011035461f  ;   {runtime_call}
  0x0000000110354624: nop
  0x0000000110354625: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035462f: jmpq   0x000000011035462f  ;   {runtime_call}
  0x0000000110354634: nop
  0x0000000110354635: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035463f: jmpq   0x000000011035463f  ;   {runtime_call}
[Exception Handler]
  0x0000000110354644: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110354649: mov    %rsp,-0x28(%rsp)
  0x000000011035464e: sub    $0x80,%rsp
  0x0000000110354655: mov    %rax,0x78(%rsp)
  0x000000011035465a: mov    %rcx,0x70(%rsp)
  0x000000011035465f: mov    %rdx,0x68(%rsp)
  0x0000000110354664: mov    %rbx,0x60(%rsp)
  0x0000000110354669: mov    %rbp,0x50(%rsp)
  0x000000011035466e: mov    %rsi,0x48(%rsp)
  0x0000000110354673: mov    %rdi,0x40(%rsp)
  0x0000000110354678: mov    %r8,0x38(%rsp)
  0x000000011035467d: mov    %r9,0x30(%rsp)
  0x0000000110354682: mov    %r10,0x28(%rsp)
  0x0000000110354687: mov    %r11,0x20(%rsp)
  0x000000011035468c: mov    %r12,0x18(%rsp)
  0x0000000110354691: mov    %r13,0x10(%rsp)
  0x0000000110354696: mov    %r14,0x8(%rsp)
  0x000000011035469b: mov    %r15,(%rsp)
  0x000000011035469f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x00000001103546a9: movabs $0x110354649,%rsi  ;   {internal_word}
  0x00000001103546b3: mov    %rsp,%rdx
  0x00000001103546b6: and    $0xfffffffffffffff0,%rsp
  0x00000001103546ba: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x00000001103546bf: hlt
[Deopt Handler Code]
  0x00000001103546c0: movabs $0x1103546c0,%r10  ;   {section_word}
  0x00000001103546ca: push   %r10
  0x00000001103546cc: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103546d1: hlt
  0x00000001103546d2: hlt
  0x00000001103546d3: hlt
  0x00000001103546d4: hlt
  0x00000001103546d5: hlt
  0x00000001103546d6: hlt
  0x00000001103546d7: hlt
Decoding compiled method 0x0000000110352810:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup'
  # this:     rsi:rsi   = 'java/lang/ThreadGroup'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x70]  (sp of caller)
  0x00000001103529c0: mov    0x8(%rsi),%r10d
  0x00000001103529c4: shl    $0x3,%r10
  0x00000001103529c8: cmp    %rax,%r10
  0x00000001103529cb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103529d1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x00000001103529dc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103529e0: mov    %eax,-0x14000(%rsp)
  0x00000001103529e7: push   %rbp
  0x00000001103529e8: sub    $0x60,%rsp
  0x00000001103529ec: movabs $0x12727d478,%rax  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x00000001103529f6: mov    0xdc(%rax),%ecx
  0x00000001103529fc: add    $0x8,%ecx
  0x00000001103529ff: mov    %ecx,0xdc(%rax)
  0x0000000110352a05: movabs $0x126f45798,%rax  ;   {metadata({method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352a0f: and    $0x0,%ecx
  0x0000000110352a12: cmp    $0x0,%ecx
  0x0000000110352a15: je     0x0000000110352ef2  ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@0 (line 963)

  0x0000000110352a1b: lea    0x48(%rsp),%rcx
  0x0000000110352a20: mov    %rsi,0x8(%rcx)
  0x0000000110352a24: mov    (%rsi),%rax
  0x0000000110352a27: mov    %rax,%r8
  0x0000000110352a2a: and    $0x7,%r8
  0x0000000110352a2e: cmp    $0x5,%r8
  0x0000000110352a32: jne    0x0000000110352abc
  0x0000000110352a38: mov    0x8(%rsi),%r8d
  0x0000000110352a3c: shl    $0x3,%r8
  0x0000000110352a40: mov    0xa8(%r8),%r8
  0x0000000110352a47: or     %r15,%r8
  0x0000000110352a4a: xor    %rax,%r8
  0x0000000110352a4d: and    $0xffffffffffffff87,%r8
  0x0000000110352a51: je     0x0000000110352ae4
  0x0000000110352a57: test   $0x7,%r8
  0x0000000110352a5e: jne    0x0000000110352aa8
  0x0000000110352a60: test   $0x300,%r8
  0x0000000110352a67: jne    0x0000000110352a86
  0x0000000110352a69: and    $0x37f,%rax
  0x0000000110352a70: mov    %rax,%r8
  0x0000000110352a73: or     %r15,%r8
  0x0000000110352a76: lock cmpxchg %r8,(%rsi)
  0x0000000110352a7b: jne    0x0000000110352f09
  0x0000000110352a81: jmpq   0x0000000110352ae4
  0x0000000110352a86: mov    0x8(%rsi),%r8d
  0x0000000110352a8a: shl    $0x3,%r8
  0x0000000110352a8e: mov    0xa8(%r8),%r8
  0x0000000110352a95: or     %r15,%r8
  0x0000000110352a98: lock cmpxchg %r8,(%rsi)
  0x0000000110352a9d: jne    0x0000000110352f09
  0x0000000110352aa3: jmpq   0x0000000110352ae4
  0x0000000110352aa8: mov    0x8(%rsi),%r8d
  0x0000000110352aac: shl    $0x3,%r8
  0x0000000110352ab0: mov    0xa8(%r8),%r8
  0x0000000110352ab7: lock cmpxchg %r8,(%rsi)
  0x0000000110352abc: mov    (%rsi),%rax
  0x0000000110352abf: or     $0x1,%rax
  0x0000000110352ac3: mov    %rax,(%rcx)
  0x0000000110352ac6: lock cmpxchg %rcx,(%rsi)
  0x0000000110352acb: je     0x0000000110352ae4
  0x0000000110352ad1: sub    %rsp,%rax
  0x0000000110352ad4: and    $0xfffffffffffff007,%rax
  0x0000000110352adb: mov    %rax,(%rcx)
  0x0000000110352ade: jne    0x0000000110352f09  ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)

  0x0000000110352ae4: movsbl 0x1c(%rsi),%ecx    ;*getfield destroyed
                                                ; - java.lang.ThreadGroup::remove@5 (line 964)

  0x0000000110352ae8: cmp    $0x0,%ecx
  0x0000000110352aeb: movabs $0x12727d478,%rcx  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352af5: movabs $0x108,%r8
  0x0000000110352aff: je     0x0000000110352b0f
  0x0000000110352b05: movabs $0x118,%r8
  0x0000000110352b0f: mov    (%rcx,%r8,1),%r9
  0x0000000110352b13: lea    0x1(%r9),%r9
  0x0000000110352b17: mov    %r9,(%rcx,%r8,1)
  0x0000000110352b1b: jne    0x0000000110352e5e  ;*ifeq
                                                ; - java.lang.ThreadGroup::remove@8 (line 964)

  0x0000000110352b21: mov    $0x0,%r8d
  0x0000000110352b27: jmpq   0x0000000110352bd7  ;*iload_3
                                                ; - java.lang.ThreadGroup::remove@16 (line 967)

  0x0000000110352b2c: nopl   0x0(%rax)
  0x0000000110352b30: mov    0x28(%rsi),%r9d
  0x0000000110352b34: shl    $0x3,%r9           ;*getfield threads
                                                ; - java.lang.ThreadGroup::remove@25 (line 968)

  0x0000000110352b38: movslq %r8d,%rdi
  0x0000000110352b3b: cmp    0xc(%r9),%r8d      ; implicit exception: dispatches to 0x0000000110352f1c
  0x0000000110352b3f: jae    0x0000000110352f26
  0x0000000110352b45: mov    0x10(%r9,%rdi,4),%edi
  0x0000000110352b4a: shl    $0x3,%rdi          ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110352b4e: cmp    %rdx,%rdi
  0x0000000110352b51: movabs $0x12727d478,%rdi  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352b5b: movabs $0x148,%rbx
  0x0000000110352b65: jne    0x0000000110352b75
  0x0000000110352b6b: movabs $0x158,%rbx
  0x0000000110352b75: mov    (%rdi,%rbx,1),%rax
  0x0000000110352b79: lea    0x1(%rax),%rax
  0x0000000110352b7d: mov    %rax,(%rdi,%rbx,1)
  0x0000000110352b81: je     0x0000000110352c18  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110352b87: inc    %r8d
  0x0000000110352b8a: movabs $0x12727d478,%rcx  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352b94: mov    0xe0(%rcx),%r9d
  0x0000000110352b9b: add    $0x8,%r9d
  0x0000000110352b9f: mov    %r9d,0xe0(%rcx)
  0x0000000110352ba6: movabs $0x126f45798,%rcx  ;   {metadata({method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352bb0: and    $0xfff8,%r9d
  0x0000000110352bb7: cmp    $0x0,%r9d
  0x0000000110352bbb: je     0x0000000110352f2f  ; OopMap{rsi=Oop rdx=Oop [80]=Oop off=513}
                                                ;*goto
                                                ; - java.lang.ThreadGroup::remove@78 (line 967)

  0x0000000110352bc1: test   %eax,-0x3739ac7(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x0000000110352bc7: movabs $0x12727d478,%rcx  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352bd1: incl   0x1c0(%rcx)        ;*goto
                                                ; - java.lang.ThreadGroup::remove@78 (line 967)

  0x0000000110352bd7: mov    0x14(%rsi),%ecx    ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::remove@18 (line 967)

  0x0000000110352bda: cmp    %ecx,%r8d
  0x0000000110352bdd: movabs $0x12727d478,%r9   ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352be7: movabs $0x128,%rdi
  0x0000000110352bf1: jge    0x0000000110352c01
  0x0000000110352bf7: movabs $0x138,%rdi
  0x0000000110352c01: mov    (%r9,%rdi,1),%rbx
  0x0000000110352c05: lea    0x1(%rbx),%rbx
  0x0000000110352c09: mov    %rbx,(%r9,%rdi,1)
  0x0000000110352c0d: jge    0x0000000110352e11
  0x0000000110352c13: jmpq   0x0000000110352b30  ;*if_icmpge
                                                ; - java.lang.ThreadGroup::remove@21 (line 967)

  0x0000000110352c18: dec    %ecx
  0x0000000110352c1a: mov    %ecx,0x14(%rsi)    ;*putfield nthreads
                                                ; - java.lang.ThreadGroup::remove@54 (line 969)

  0x0000000110352c1d: movabs $0x12727d478,%rdx  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352c27: addq   $0x1,0x168(%rdx)
  0x0000000110352c2f: mov    %r8,%rdx
  0x0000000110352c32: inc    %edx
  0x0000000110352c34: mov    %rcx,%rdi
  0x0000000110352c37: sub    %r8d,%edi
  0x0000000110352c3a: mov    %rsi,0x40(%rsp)
  0x0000000110352c3f: mov    %r9,%rsi
  0x0000000110352c42: mov    %r9,%rcx
  0x0000000110352c45: mov    %rdi,%r9
  0x0000000110352c48: test   %edx,%edx
  0x0000000110352c4a: jl     0x0000000110352f46
  0x0000000110352c50: test   %r8d,%r8d
  0x0000000110352c53: jl     0x0000000110352f46
  0x0000000110352c59: lea    (%rdx,%r9,1),%rdi
  0x0000000110352c5d: cmp    0xc(%rsi),%edi
  0x0000000110352c60: ja     0x0000000110352f46
  0x0000000110352c66: lea    (%r8,%r9,1),%rdi
  0x0000000110352c6a: cmp    0xc(%rcx),%edi
  0x0000000110352c6d: ja     0x0000000110352f46
  0x0000000110352c73: test   %r9d,%r9d
  0x0000000110352c76: jl     0x0000000110352f46
  0x0000000110352c7c: je     0x0000000110352cb8
  0x0000000110352c82: movslq %edx,%rdx
  0x0000000110352c85: movslq %r8d,%r8
  0x0000000110352c88: lea    0x10(%rsi,%rdx,4),%rdi
  0x0000000110352c8d: lea    0x10(%rcx,%r8,4),%rsi
  0x0000000110352c92: mov    %r9,%rdx
  0x0000000110352c95: test   $0xf,%esp
  0x0000000110352c9b: je     0x0000000110352cb3
  0x0000000110352ca1: sub    $0x8,%rsp
  0x0000000110352ca5: callq  Stub::oop_arraycopy  ;   {runtime_call}
  0x0000000110352caa: add    $0x8,%rsp
  0x0000000110352cae: jmpq   0x0000000110352cb8
  0x0000000110352cb3: callq  Stub::oop_arraycopy  ;*invokestatic arraycopy
                                                ; - java.lang.ThreadGroup::remove@59 (line 969)
                                                ;   {runtime_call}
  0x0000000110352cb8: mov    0x40(%rsp),%rsi
  0x0000000110352cbd: mov    0x28(%rsi),%eax
  0x0000000110352cc0: shl    $0x3,%rax          ;*getfield threads
                                                ; - java.lang.ThreadGroup::remove@63 (line 972)

  0x0000000110352cc4: mov    0x14(%rsi),%edi    ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::remove@67 (line 972)

  0x0000000110352cc7: movabs $0x0,%rbx          ;   {oop(NULL)}
  0x0000000110352cd1: movslq %edi,%rdx
  0x0000000110352cd4: lea    0x10(%rax,%rdx,4),%rdx
  0x0000000110352cd9: cmp    0xc(%rax),%edi     ; implicit exception: dispatches to 0x0000000110352f51
  0x0000000110352cdc: jae    0x0000000110352f5b
  0x0000000110352ce2: cmp    $0x0,%rbx
  0x0000000110352ce6: jne    0x0000000110352d01
  0x0000000110352ce8: movabs $0x12727d478,%rdi  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352cf2: orl    $0x100,0x170(%rdi)
  0x0000000110352cfc: jmpq   0x0000000110352de5
  0x0000000110352d01: mov    0x8(%rax),%eax     ; implicit exception: dispatches to 0x0000000110352f64
  0x0000000110352d04: shl    $0x3,%rax
  0x0000000110352d08: mov    0x8(%rbx),%edi
  0x0000000110352d0b: shl    $0x3,%rdi
  0x0000000110352d0f: mov    0xe8(%rax),%rax
  0x0000000110352d16: cmp    %rax,%rdi
  0x0000000110352d19: je     0x0000000110352d47
  0x0000000110352d1f: mov    0xc(%rax),%ecx
  0x0000000110352d22: cmp    (%rdi,%rcx,1),%rax
  0x0000000110352d26: je     0x0000000110352d47
  0x0000000110352d2c: cmp    $0x18,%ecx
  0x0000000110352d2f: jne    0x0000000110352dce
  0x0000000110352d35: push   %rdi
  0x0000000110352d36: push   %rax
  0x0000000110352d37: callq  0x00000001100108a0  ;   {runtime_call}
  0x0000000110352d3c: pop    %rdi
  0x0000000110352d3d: pop    %rax
  0x0000000110352d3e: cmp    $0x0,%eax
  0x0000000110352d41: je     0x0000000110352dce
  0x0000000110352d47: movabs $0x12727d478,%rdi  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352d51: mov    0x8(%rbx),%eax
  0x0000000110352d54: shl    $0x3,%rax
  0x0000000110352d58: cmp    0x180(%rdi),%rax
  0x0000000110352d5f: jne    0x0000000110352d6e
  0x0000000110352d61: addq   $0x1,0x188(%rdi)
  0x0000000110352d69: jmpq   0x0000000110352de5
  0x0000000110352d6e: cmp    0x190(%rdi),%rax
  0x0000000110352d75: jne    0x0000000110352d84
  0x0000000110352d77: addq   $0x1,0x198(%rdi)
  0x0000000110352d7f: jmpq   0x0000000110352de5
  0x0000000110352d84: cmpq   $0x0,0x180(%rdi)
  0x0000000110352d8f: jne    0x0000000110352da8
  0x0000000110352d91: mov    %rax,0x180(%rdi)
  0x0000000110352d98: movq   $0x1,0x188(%rdi)
  0x0000000110352da3: jmpq   0x0000000110352de5
  0x0000000110352da8: cmpq   $0x0,0x190(%rdi)
  0x0000000110352db3: jne    0x0000000110352dcc
  0x0000000110352db5: mov    %rax,0x190(%rdi)
  0x0000000110352dbc: movq   $0x1,0x198(%rdi)
  0x0000000110352dc7: jmpq   0x0000000110352de5
  0x0000000110352dcc: jmp    0x0000000110352de5
  0x0000000110352dce: movabs $0x12727d478,%rdi  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352dd8: subq   $0x1,0x178(%rdi)
  0x0000000110352de0: jmpq   0x0000000110352f69
  0x0000000110352de5: mov    %rbx,%r10
  0x0000000110352de8: shr    $0x3,%r10
  0x0000000110352dec: mov    %r10d,(%rdx)
  0x0000000110352def: shr    $0x9,%rdx
  0x0000000110352df3: movabs $0x109ac3000,%rax
  0x0000000110352dfd: movb   $0x0,(%rdx,%rax,1)  ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)

  0x0000000110352e01: movabs $0x12727d478,%rax  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352e0b: incl   0x1a8(%rax)        ;*goto
                                                ; - java.lang.ThreadGroup::remove@72 (line 973)

  0x0000000110352e11: lea    0x48(%rsp),%rax
  0x0000000110352e16: mov    0x8(%rax),%rdi
  0x0000000110352e1a: mov    (%rdi),%rsi
  0x0000000110352e1d: and    $0x7,%rsi
  0x0000000110352e21: cmp    $0x5,%rsi
  0x0000000110352e25: je     0x0000000110352e42
  0x0000000110352e2b: mov    (%rax),%rsi
  0x0000000110352e2e: test   %rsi,%rsi
  0x0000000110352e31: je     0x0000000110352e42
  0x0000000110352e37: lock cmpxchg %rsi,(%rdi)
  0x0000000110352e3c: jne    0x0000000110352f72  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@82 (line 976)

  0x0000000110352e42: movabs $0x12727d478,%rax  ;   {metadata(method data for {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup')}
  0x0000000110352e4c: incl   0x1d8(%rax)        ;*goto
                                                ; - java.lang.ThreadGroup::remove@83 (line 976)

  0x0000000110352e52: add    $0x60,%rsp
  0x0000000110352e56: pop    %rbp
  0x0000000110352e57: test   %eax,-0x3739d5d(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110352e5d: retq                      ;*return
                                                ; - java.lang.ThreadGroup::remove@93 (line 977)

  0x0000000110352e5e: lea    0x48(%rsp),%rax
  0x0000000110352e63: mov    0x8(%rax),%rdi
  0x0000000110352e67: mov    (%rdi),%rsi
  0x0000000110352e6a: and    $0x7,%rsi
  0x0000000110352e6e: cmp    $0x5,%rsi
  0x0000000110352e72: je     0x0000000110352e8f
  0x0000000110352e78: mov    (%rax),%rsi
  0x0000000110352e7b: test   %rsi,%rsi
  0x0000000110352e7e: je     0x0000000110352e8f
  0x0000000110352e84: lock cmpxchg %rsi,(%rdi)
  0x0000000110352e89: jne    0x0000000110352f85  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@12 (line 965)

  0x0000000110352e8f: add    $0x60,%rsp
  0x0000000110352e93: pop    %rbp
  0x0000000110352e94: test   %eax,-0x3739d9a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110352e9a: retq                      ;*return
                                                ; - java.lang.ThreadGroup::remove@13 (line 965)

  0x0000000110352e9b: mov    0x2a8(%r15),%rax
  0x0000000110352ea2: xor    %r10,%r10
  0x0000000110352ea5: mov    %r10,0x2a8(%r15)
  0x0000000110352eac: xor    %r10,%r10
  0x0000000110352eaf: mov    %r10,0x2b0(%r15)
  0x0000000110352eb6: mov    %rax,%rsi
  0x0000000110352eb9: lea    0x48(%rsp),%rax
  0x0000000110352ebe: mov    0x8(%rax),%rbx
  0x0000000110352ec2: mov    (%rbx),%rdi
  0x0000000110352ec5: and    $0x7,%rdi
  0x0000000110352ec9: cmp    $0x5,%rdi
  0x0000000110352ecd: je     0x0000000110352eea
  0x0000000110352ed3: mov    (%rax),%rdi
  0x0000000110352ed6: test   %rdi,%rdi
  0x0000000110352ed9: je     0x0000000110352eea
  0x0000000110352edf: lock cmpxchg %rdi,(%rbx)
  0x0000000110352ee4: jne    0x0000000110352f98  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@89 (line 976)

  0x0000000110352eea: mov    %rsi,%rax
  0x0000000110352eed: jmpq   0x0000000110352fd6
  0x0000000110352ef2: mov    %rax,0x8(%rsp)
  0x0000000110352ef7: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110352eff: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=1348}
                                                ;*synchronization entry
                                                ; - java.lang.ThreadGroup::remove@-1 (line 963)
                                                ;   {runtime_call}
  0x0000000110352f04: jmpq   0x0000000110352a1b
  0x0000000110352f09: mov    %rsi,0x8(%rsp)
  0x0000000110352f0e: mov    %rcx,(%rsp)
  0x0000000110352f12: callq  0x0000000110010c20  ; OopMap{rsi=Oop rdx=Oop [80]=Oop off=1367}
                                                ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)
                                                ;   {runtime_call}
  0x0000000110352f17: jmpq   0x0000000110352ae4
  0x0000000110352f1c: callq  0x000000011000e080  ; OopMap{rsi=Oop rdx=Oop r9=Oop [80]=Oop off=1377}
                                                ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)
                                                ;   {runtime_call}
  0x0000000110352f21: callq  0x000000011000e080  ; OopMap{rsi=Oop rdx=Oop r9=Oop [80]=Oop off=1382}
                                                ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)
                                                ;   {runtime_call}
  0x0000000110352f26: mov    %r8,(%rsp)
  0x0000000110352f2a: callq  0x000000010ff80440  ; OopMap{rsi=Oop rdx=Oop r9=Oop [80]=Oop off=1391}
                                                ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)
                                                ;   {runtime_call}
  0x0000000110352f2f: mov    %rcx,0x8(%rsp)
  0x0000000110352f34: movq   $0x4e,(%rsp)
  0x0000000110352f3c: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop [80]=Oop off=1409}
                                                ;*goto
                                                ; - java.lang.ThreadGroup::remove@78 (line 967)
                                                ;   {runtime_call}
  0x0000000110352f41: jmpq   0x0000000110352bc1
  0x0000000110352f46: nop
  0x0000000110352f47: callq  0x000000010ff58520  ; OopMap{[64]=Oop [80]=Oop off=1420}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.ThreadGroup::remove@59 (line 969)
                                                ;   {static_call}
  0x0000000110352f4c: jmpq   0x0000000110352cb8
  0x0000000110352f51: callq  0x000000011000e080  ; OopMap{rsi=Oop rax=Oop rbx=Oop [80]=Oop off=1430}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110352f56: callq  0x000000011000e080  ; OopMap{rsi=Oop rax=Oop rbx=Oop [80]=Oop off=1435}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110352f5b: mov    %rdi,(%rsp)
  0x0000000110352f5f: callq  0x000000010ff80440  ; OopMap{rsi=Oop rax=Oop rbx=Oop [80]=Oop off=1444}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110352f64: callq  0x000000011000e080  ; OopMap{rsi=Oop rbx=Oop [80]=Oop off=1449}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110352f69: mov    %rbx,(%rsp)
  0x0000000110352f6d: callq  0x0000000110010200  ; OopMap{rsi=Oop rbx=Oop [80]=Oop off=1458}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110352f72: lea    0x48(%rsp),%rax
  0x0000000110352f77: mov    %rax,(%rsp)
  0x0000000110352f7b: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110352f80: jmpq   0x0000000110352e42
  0x0000000110352f85: lea    0x48(%rsp),%rax
  0x0000000110352f8a: mov    %rax,(%rsp)
  0x0000000110352f8e: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110352f93: jmpq   0x0000000110352e8f
  0x0000000110352f98: lea    0x48(%rsp),%rax
  0x0000000110352f9d: mov    %rax,(%rsp)
  0x0000000110352fa1: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110352fa6: jmpq   0x0000000110352eea
  0x0000000110352fab: nop
  0x0000000110352fac: nop
  0x0000000110352fad: mov    0x2a8(%r15),%rax
  0x0000000110352fb4: movabs $0x0,%r10
  0x0000000110352fbe: mov    %r10,0x2a8(%r15)
  0x0000000110352fc5: movabs $0x0,%r10
  0x0000000110352fcf: mov    %r10,0x2b0(%r15)
  0x0000000110352fd6: add    $0x60,%rsp
  0x0000000110352fda: pop    %rbp
  0x0000000110352fdb: jmpq   0x000000010ff808e0  ;   {runtime_call}
[Stub Code]
  0x0000000110352fe0: nop                       ;   {no_reloc}
  0x0000000110352fe1: nop
  0x0000000110352fe2: nop
  0x0000000110352fe3: nop
  0x0000000110352fe4: nop
  0x0000000110352fe5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352fef: jmpq   0x0000000110352fef  ;   {runtime_call}
[Exception Handler]
  0x0000000110352ff4: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110352ff9: mov    %rsp,-0x28(%rsp)
  0x0000000110352ffe: sub    $0x80,%rsp
  0x0000000110353005: mov    %rax,0x78(%rsp)
  0x000000011035300a: mov    %rcx,0x70(%rsp)
  0x000000011035300f: mov    %rdx,0x68(%rsp)
  0x0000000110353014: mov    %rbx,0x60(%rsp)
  0x0000000110353019: mov    %rbp,0x50(%rsp)
  0x000000011035301e: mov    %rsi,0x48(%rsp)
  0x0000000110353023: mov    %rdi,0x40(%rsp)
  0x0000000110353028: mov    %r8,0x38(%rsp)
  0x000000011035302d: mov    %r9,0x30(%rsp)
  0x0000000110353032: mov    %r10,0x28(%rsp)
  0x0000000110353037: mov    %r11,0x20(%rsp)
  0x000000011035303c: mov    %r12,0x18(%rsp)
  0x0000000110353041: mov    %r13,0x10(%rsp)
  0x0000000110353046: mov    %r14,0x8(%rsp)
  0x000000011035304b: mov    %r15,(%rsp)
  0x000000011035304f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110353059: movabs $0x110352ff9,%rsi  ;   {internal_word}
  0x0000000110353063: mov    %rsp,%rdx
  0x0000000110353066: and    $0xfffffffffffffff0,%rsp
  0x000000011035306a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035306f: hlt
[Deopt Handler Code]
  0x0000000110353070: movabs $0x110353070,%r10  ;   {section_word}
  0x000000011035307a: push   %r10
  0x000000011035307c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110353081: hlt
  0x0000000110353082: hlt
  0x0000000110353083: hlt
  0x0000000110353084: hlt
  0x0000000110353085: hlt
  0x0000000110353086: hlt
  0x0000000110353087: hlt
Decoding compiled method 0x0000000110350b50:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126fd9908} '<init>' '()V' in 'java/util/AbstractList'
  #           [sp+0x50]  (sp of caller)
  0x0000000110350ca0: mov    0x8(%rsi),%r10d
  0x0000000110350ca4: shl    $0x3,%r10
  0x0000000110350ca8: cmp    %rax,%r10
  0x0000000110350cab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110350cb1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110350cbc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110350cc0: mov    %eax,-0x14000(%rsp)
  0x0000000110350cc7: push   %rbp
  0x0000000110350cc8: sub    $0x40,%rsp
  0x0000000110350ccc: movabs $0x126fdceb8,%rdi
  0x0000000110350cd6: mov    0x8(%rdi),%ebx
  0x0000000110350cd9: add    $0x8,%ebx
  0x0000000110350cdc: mov    %ebx,0x8(%rdi)
  0x0000000110350cdf: movabs $0x126fd9908,%rdi  ;   {metadata({method} {0x0000000126fd9908} '<init>' '()V' in 'java/util/AbstractList')}
  0x0000000110350ce9: and    $0x3ff8,%ebx
  0x0000000110350cef: cmp    $0x0,%ebx
  0x0000000110350cf2: je     0x0000000110350d0b  ;*aload_0
                                                ; - java.util.AbstractList::<init>@0 (line 76)

  0x0000000110350cf8: movl   $0x0,0xc(%rsi)     ;*putfield modCount
                                                ; - java.util.AbstractList::<init>@6 (line 601)

  0x0000000110350cff: add    $0x40,%rsp
  0x0000000110350d03: pop    %rbp
  0x0000000110350d04: test   %eax,-0x3737c0a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110350d0a: retq
  0x0000000110350d0b: mov    %rdi,0x8(%rsp)
  0x0000000110350d10: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110350d18: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=125}
                                                ;*synchronization entry
                                                ; - java.util.AbstractList::<init>@-1 (line 76)
                                                ;   {runtime_call}
  0x0000000110350d1d: jmp    0x0000000110350cf8
  0x0000000110350d1f: nop
  0x0000000110350d20: nop
  0x0000000110350d21: mov    0x2a8(%r15),%rax
  0x0000000110350d28: movabs $0x0,%r10
  0x0000000110350d32: mov    %r10,0x2a8(%r15)
  0x0000000110350d39: movabs $0x0,%r10
  0x0000000110350d43: mov    %r10,0x2b0(%r15)
  0x0000000110350d4a: add    $0x40,%rsp
  0x0000000110350d4e: pop    %rbp
  0x0000000110350d4f: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110350d54: hlt
  0x0000000110350d55: hlt
  0x0000000110350d56: hlt
  0x0000000110350d57: hlt
  0x0000000110350d58: hlt
  0x0000000110350d59: hlt
  0x0000000110350d5a: hlt
  0x0000000110350d5b: hlt
  0x0000000110350d5c: hlt
  0x0000000110350d5d: hlt
  0x0000000110350d5e: hlt
  0x0000000110350d5f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110350d60: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110350d65: mov    %rsp,-0x28(%rsp)
  0x0000000110350d6a: sub    $0x80,%rsp
  0x0000000110350d71: mov    %rax,0x78(%rsp)
  0x0000000110350d76: mov    %rcx,0x70(%rsp)
  0x0000000110350d7b: mov    %rdx,0x68(%rsp)
  0x0000000110350d80: mov    %rbx,0x60(%rsp)
  0x0000000110350d85: mov    %rbp,0x50(%rsp)
  0x0000000110350d8a: mov    %rsi,0x48(%rsp)
  0x0000000110350d8f: mov    %rdi,0x40(%rsp)
  0x0000000110350d94: mov    %r8,0x38(%rsp)
  0x0000000110350d99: mov    %r9,0x30(%rsp)
  0x0000000110350d9e: mov    %r10,0x28(%rsp)
  0x0000000110350da3: mov    %r11,0x20(%rsp)
  0x0000000110350da8: mov    %r12,0x18(%rsp)
  0x0000000110350dad: mov    %r13,0x10(%rsp)
  0x0000000110350db2: mov    %r14,0x8(%rsp)
  0x0000000110350db7: mov    %r15,(%rsp)
  0x0000000110350dbb: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110350dc5: movabs $0x110350d65,%rsi  ;   {internal_word}
  0x0000000110350dcf: mov    %rsp,%rdx
  0x0000000110350dd2: and    $0xfffffffffffffff0,%rsp
  0x0000000110350dd6: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110350ddb: hlt
[Deopt Handler Code]
  0x0000000110350ddc: movabs $0x110350ddc,%r10  ;   {section_word}
  0x0000000110350de6: push   %r10
  0x0000000110350de8: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110350ded: hlt
  0x0000000110350dee: hlt
  0x0000000110350def: hlt
Decoding compiled method 0x0000000110354ed0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection'
  # this:     rsi:rsi   = 'java/util/AbstractCollection'
  # parm0:    rdx:rdx   = '[Ljava/lang/Object;'
  #           [sp+0xa0]  (sp of caller)
  0x0000000110355140: mov    0x8(%rsi),%r10d
  0x0000000110355144: shl    $0x3,%r10
  0x0000000110355148: cmp    %rax,%r10
  0x000000011035514b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110355151: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035515c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110355160: mov    %eax,-0x14000(%rsp)
  0x0000000110355167: push   %rbp
  0x0000000110355168: sub    $0x90,%rsp
  0x000000011035516f: mov    %rdx,0x50(%rsp)
  0x0000000110355174: movabs $0x127280168,%rdi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x000000011035517e: mov    0xdc(%rdi),%ebx
  0x0000000110355184: add    $0x8,%ebx
  0x0000000110355187: mov    %ebx,0xdc(%rdi)
  0x000000011035518d: movabs $0x126fdb148,%rdi  ;   {metadata({method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355197: and    $0x0,%ebx
  0x000000011035519a: cmp    $0x0,%ebx
  0x000000011035519d: je     0x000000011035603e  ;*aload_0
                                                ; - java.util.AbstractCollection::toArray@0 (line 176)

  0x00000001103551a3: mov    %rsi,%rdi
  0x00000001103551a6: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103551b0: mov    0x8(%rdi),%edi
  0x00000001103551b3: shl    $0x3,%rdi
  0x00000001103551b7: cmp    0x110(%rbx),%rdi
  0x00000001103551be: jne    0x00000001103551cd
  0x00000001103551c0: addq   $0x1,0x118(%rbx)
  0x00000001103551c8: jmpq   0x0000000110355233
  0x00000001103551cd: cmp    0x120(%rbx),%rdi
  0x00000001103551d4: jne    0x00000001103551e3
  0x00000001103551d6: addq   $0x1,0x128(%rbx)
  0x00000001103551de: jmpq   0x0000000110355233
  0x00000001103551e3: cmpq   $0x0,0x110(%rbx)
  0x00000001103551ee: jne    0x0000000110355207
  0x00000001103551f0: mov    %rdi,0x110(%rbx)
  0x00000001103551f7: movq   $0x1,0x118(%rbx)
  0x0000000110355202: jmpq   0x0000000110355233
  0x0000000110355207: cmpq   $0x0,0x120(%rbx)
  0x0000000110355212: jne    0x000000011035522b
  0x0000000110355214: mov    %rdi,0x120(%rbx)
  0x000000011035521b: movq   $0x1,0x128(%rbx)
  0x0000000110355226: jmpq   0x0000000110355233
  0x000000011035522b: addq   $0x1,0x108(%rbx)
  0x0000000110355233: mov    %rsi,%rdi
  0x0000000110355236: mov    %rdi,%rsi          ;*invokevirtual size
                                                ; - java.util.AbstractCollection::toArray@1 (line 176)

  0x0000000110355239: mov    %rdi,0x58(%rsp)
  0x000000011035523e: nop
  0x000000011035523f: nop
  0x0000000110355240: nop
  0x0000000110355241: nop
  0x0000000110355242: nop
  0x0000000110355243: nop
  0x0000000110355244: nop
  0x0000000110355245: movabs $0xffffffffffffffff,%rax
  0x000000011035524f: callq  0x000000010ff582e0  ; OopMap{[88]=Oop [80]=Oop off=276}
                                                ;*invokevirtual size
                                                ; - java.util.AbstractCollection::toArray@1 (line 176)
                                                ;   {virtual_call}
  0x0000000110355254: mov    0x50(%rsp),%rdx
  0x0000000110355259: mov    0xc(%rdx),%edi     ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@6 (line 177)
                                                ; implicit exception: dispatches to 0x0000000110356055
  0x000000011035525c: mov    %edi,0x64(%rsp)
  0x0000000110355260: cmp    %eax,%edi
  0x0000000110355262: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x000000011035526c: movabs $0x138,%rbx
  0x0000000110355276: jl     0x0000000110355286
  0x000000011035527c: movabs $0x148,%rbx
  0x0000000110355286: mov    (%rsi,%rbx,1),%rcx
  0x000000011035528a: lea    0x1(%rcx),%rcx
  0x000000011035528e: mov    %rcx,(%rsi,%rbx,1)
  0x0000000110355292: jl     0x00000001103552b0  ;*if_icmplt
                                                ; - java.util.AbstractCollection::toArray@8 (line 177)

  0x0000000110355298: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103552a2: incl   0x158(%rsi)
  0x00000001103552a8: mov    %rdx,%rbx
  0x00000001103552ab: jmpq   0x000000011035553a  ;*goto
                                                ; - java.util.AbstractCollection::toArray@12 (line 177)

  0x00000001103552b0: mov    %eax,0x60(%rsp)
  0x00000001103552b4: mov    %rdx,%rsi
  0x00000001103552b7: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103552c1: mov    0x8(%rsi),%esi
  0x00000001103552c4: shl    $0x3,%rsi
  0x00000001103552c8: cmp    0x178(%rbx),%rsi
  0x00000001103552cf: jne    0x00000001103552de
  0x00000001103552d1: addq   $0x1,0x180(%rbx)
  0x00000001103552d9: jmpq   0x0000000110355344
  0x00000001103552de: cmp    0x188(%rbx),%rsi
  0x00000001103552e5: jne    0x00000001103552f4
  0x00000001103552e7: addq   $0x1,0x190(%rbx)
  0x00000001103552ef: jmpq   0x0000000110355344
  0x00000001103552f4: cmpq   $0x0,0x178(%rbx)
  0x00000001103552ff: jne    0x0000000110355318
  0x0000000110355301: mov    %rsi,0x178(%rbx)
  0x0000000110355308: movq   $0x1,0x180(%rbx)
  0x0000000110355313: jmpq   0x0000000110355344
  0x0000000110355318: cmpq   $0x0,0x188(%rbx)
  0x0000000110355323: jne    0x000000011035533c
  0x0000000110355325: mov    %rsi,0x188(%rbx)
  0x000000011035532c: movq   $0x1,0x190(%rbx)
  0x0000000110355337: jmpq   0x0000000110355344
  0x000000011035533c: addq   $0x1,0x170(%rbx)
  0x0000000110355344: mov    0x8(%rdx),%esi
  0x0000000110355347: shl    $0x3,%rsi
  0x000000011035534b: mov    0x68(%rsi),%rsi    ;*invokevirtual getClass
                                                ; - java.util.AbstractCollection::toArray@16 (line 179)

  0x000000011035534f: cmp    (%rsi),%rax        ;*invokevirtual getComponentType
                                                ; - java.util.AbstractCollection::toArray@19 (line 179)
                                                ; implicit exception: dispatches to 0x000000011035605a
  0x0000000110355352: mov    %rsi,%rbx
  0x0000000110355355: movabs $0x127280168,%rcx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x000000011035535f: mov    0x8(%rbx),%ebx
  0x0000000110355362: shl    $0x3,%rbx
  0x0000000110355366: cmp    0x1a8(%rcx),%rbx
  0x000000011035536d: jne    0x000000011035537c
  0x000000011035536f: addq   $0x1,0x1b0(%rcx)
  0x0000000110355377: jmpq   0x00000001103553e2
  0x000000011035537c: cmp    0x1b8(%rcx),%rbx
  0x0000000110355383: jne    0x0000000110355392
  0x0000000110355385: addq   $0x1,0x1c0(%rcx)
  0x000000011035538d: jmpq   0x00000001103553e2
  0x0000000110355392: cmpq   $0x0,0x1a8(%rcx)
  0x000000011035539d: jne    0x00000001103553b6
  0x000000011035539f: mov    %rbx,0x1a8(%rcx)
  0x00000001103553a6: movq   $0x1,0x1b0(%rcx)
  0x00000001103553b1: jmpq   0x00000001103553e2
  0x00000001103553b6: cmpq   $0x0,0x1b8(%rcx)
  0x00000001103553c1: jne    0x00000001103553da
  0x00000001103553c3: mov    %rbx,0x1b8(%rcx)
  0x00000001103553ca: movq   $0x1,0x1c0(%rcx)
  0x00000001103553d5: jmpq   0x00000001103553e2
  0x00000001103553da: addq   $0x1,0x1a0(%rcx)
  0x00000001103553e2: nop
  0x00000001103553e3: nop
  0x00000001103553e4: nop
  0x00000001103553e5: nop
  0x00000001103553e6: nop
  0x00000001103553e7: callq  0x000000010ff580a0  ; OopMap{[88]=Oop [80]=Oop off=684}
                                                ;*invokevirtual getComponentType
                                                ; - java.util.AbstractCollection::toArray@19 (line 179)
                                                ;   {optimized virtual_call}
  0x00000001103553ec: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103553f6: addq   $0x1,0x1d0(%rsi)
  0x00000001103553fe: movabs $0x127181ed0,%rsi  ;   {metadata(method data for {method} {0x00000001270a7d48} 'newInstance' '(Ljava/lang/Class;I)Ljava/lang/Object;' in 'java/lang/reflect/Array')}
  0x0000000110355408: mov    0xdc(%rsi),%edx
  0x000000011035540e: add    $0x8,%edx
  0x0000000110355411: mov    %edx,0xdc(%rsi)
  0x0000000110355417: movabs $0x1270a7d48,%rsi  ;   {metadata({method} {0x00000001270a7d48} 'newInstance' '(Ljava/lang/Class;I)Ljava/lang/Object;' in 'java/lang/reflect/Array')}
  0x0000000110355421: and    $0x7ffff8,%edx
  0x0000000110355427: cmp    $0x0,%edx
  0x000000011035542a: je     0x000000011035605f
  0x0000000110355430: movabs $0x127181ed0,%rsi  ;   {metadata(method data for {method} {0x00000001270a7d48} 'newInstance' '(Ljava/lang/Class;I)Ljava/lang/Object;' in 'java/lang/reflect/Array')}
  0x000000011035543a: addq   $0x1,0x108(%rsi)
  0x0000000110355442: mov    %rax,%rsi
  0x0000000110355445: mov    0x60(%rsp),%edx    ;*invokestatic newArray
                                                ; - java.lang.reflect.Array::newInstance@2 (line 75)
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)

  0x0000000110355449: nop
  0x000000011035544a: nop
  0x000000011035544b: nop
  0x000000011035544c: nop
  0x000000011035544d: nop
  0x000000011035544e: nop
  0x000000011035544f: callq  0x000000010ff58520  ; OopMap{[88]=Oop [80]=Oop off=788}
                                                ;*invokestatic newArray
                                                ; - java.lang.reflect.Array::newInstance@2 (line 75)
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)
                                                ;   {static_call}
  0x0000000110355454: cmp    $0x0,%rax
  0x0000000110355458: jne    0x0000000110355473
  0x000000011035545a: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355464: orl    $0x100,0x1d8(%rbx)
  0x000000011035546e: jmpq   0x0000000110355534
  0x0000000110355473: movabs $0x7c0011a60,%rsi  ;   {metadata('java/lang/Object'[])}
  0x000000011035547d: mov    0x8(%rax),%ebx
  0x0000000110355480: shl    $0x3,%rbx
  0x0000000110355484: cmp    0x30(%rbx),%rsi
  0x0000000110355488: jne    0x0000000110355518
  0x000000011035548e: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355498: mov    0x8(%rax),%esi
  0x000000011035549b: shl    $0x3,%rsi
  0x000000011035549f: cmp    0x1e8(%rbx),%rsi
  0x00000001103554a6: jne    0x00000001103554b5
  0x00000001103554a8: addq   $0x1,0x1f0(%rbx)
  0x00000001103554b0: jmpq   0x0000000110355534
  0x00000001103554b5: cmp    0x1f8(%rbx),%rsi
  0x00000001103554bc: jne    0x00000001103554cb
  0x00000001103554be: addq   $0x1,0x200(%rbx)
  0x00000001103554c6: jmpq   0x0000000110355534
  0x00000001103554cb: cmpq   $0x0,0x1e8(%rbx)
  0x00000001103554d6: jne    0x00000001103554ef
  0x00000001103554d8: mov    %rsi,0x1e8(%rbx)
  0x00000001103554df: movq   $0x1,0x1f0(%rbx)
  0x00000001103554ea: jmpq   0x0000000110355534
  0x00000001103554ef: cmpq   $0x0,0x1f8(%rbx)
  0x00000001103554fa: jne    0x0000000110355513
  0x00000001103554fc: mov    %rsi,0x1f8(%rbx)
  0x0000000110355503: movq   $0x1,0x200(%rbx)
  0x000000011035550e: jmpq   0x0000000110355534
  0x0000000110355513: jmpq   0x0000000110355534
  0x0000000110355518: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355522: subq   $0x1,0x1e0(%rbx)
  0x000000011035552a: jmpq   0x0000000110356076
  0x000000011035552f: jmpq   0x0000000110355534
  0x0000000110355534: mov    %rax,%rsi          ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)

  0x0000000110355537: mov    %rsi,%rbx          ;*astore_3
                                                ; - java.util.AbstractCollection::toArray@32 (line 179)

  0x000000011035553a: mov    %rbx,0x68(%rsp)
  0x000000011035553f: mov    0x58(%rsp),%rsi
  0x0000000110355544: mov    %rsi,%rdi
  0x0000000110355547: movabs $0x127280168,%rax  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355551: mov    0x8(%rdi),%edi
  0x0000000110355554: shl    $0x3,%rdi
  0x0000000110355558: cmp    0x248(%rax),%rdi
  0x000000011035555f: jne    0x000000011035556e
  0x0000000110355561: addq   $0x1,0x250(%rax)
  0x0000000110355569: jmpq   0x00000001103555d4
  0x000000011035556e: cmp    0x258(%rax),%rdi
  0x0000000110355575: jne    0x0000000110355584
  0x0000000110355577: addq   $0x1,0x260(%rax)
  0x000000011035557f: jmpq   0x00000001103555d4
  0x0000000110355584: cmpq   $0x0,0x248(%rax)
  0x000000011035558f: jne    0x00000001103555a8
  0x0000000110355591: mov    %rdi,0x248(%rax)
  0x0000000110355598: movq   $0x1,0x250(%rax)
  0x00000001103555a3: jmpq   0x00000001103555d4
  0x00000001103555a8: cmpq   $0x0,0x258(%rax)
  0x00000001103555b3: jne    0x00000001103555cc
  0x00000001103555b5: mov    %rdi,0x258(%rax)
  0x00000001103555bc: movq   $0x1,0x260(%rax)
  0x00000001103555c7: jmpq   0x00000001103555d4
  0x00000001103555cc: addq   $0x1,0x240(%rax)
  0x00000001103555d4: nop
  0x00000001103555d5: movabs $0xffffffffffffffff,%rax
  0x00000001103555df: callq  0x000000010ff582e0  ; OopMap{[80]=Oop [104]=Oop off=1188}
                                                ;*invokevirtual iterator
                                                ; - java.util.AbstractCollection::toArray@34 (line 180)
                                                ;   {virtual_call}
  0x00000001103555e4: mov    %rax,0x70(%rsp)
  0x00000001103555e9: mov    $0x0,%edi
  0x00000001103555ee: mov    0x68(%rsp),%rbx
  0x00000001103555f3: jmpq   0x000000011035590d  ;*iload
                                                ; - java.util.AbstractCollection::toArray@42 (line 182)

  0x00000001103555f8: mov    %edi,0x78(%rsp)
  0x00000001103555fc: mov    %rbx,0x68(%rsp)
  0x0000000110355601: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000011035607f
  0x0000000110355604: mov    %rax,%rsi
  0x0000000110355607: movabs $0x127280168,%rdx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355611: mov    0x8(%rsi),%esi
  0x0000000110355614: shl    $0x3,%rsi
  0x0000000110355618: cmp    0x298(%rdx),%rsi
  0x000000011035561f: jne    0x000000011035562e
  0x0000000110355621: addq   $0x1,0x2a0(%rdx)
  0x0000000110355629: jmpq   0x0000000110355694
  0x000000011035562e: cmp    0x2a8(%rdx),%rsi
  0x0000000110355635: jne    0x0000000110355644
  0x0000000110355637: addq   $0x1,0x2b0(%rdx)
  0x000000011035563f: jmpq   0x0000000110355694
  0x0000000110355644: cmpq   $0x0,0x298(%rdx)
  0x000000011035564f: jne    0x0000000110355668
  0x0000000110355651: mov    %rsi,0x298(%rdx)
  0x0000000110355658: movq   $0x1,0x2a0(%rdx)
  0x0000000110355663: jmpq   0x0000000110355694
  0x0000000110355668: cmpq   $0x0,0x2a8(%rdx)
  0x0000000110355673: jne    0x000000011035568c
  0x0000000110355675: mov    %rsi,0x2a8(%rdx)
  0x000000011035567c: movq   $0x1,0x2b0(%rdx)
  0x0000000110355687: jmpq   0x0000000110355694
  0x000000011035568c: addq   $0x1,0x290(%rdx)
  0x0000000110355694: mov    %rax,%rsi          ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@51 (line 183)

  0x0000000110355697: nop
  0x0000000110355698: nop
  0x0000000110355699: nop
  0x000000011035569a: nop
  0x000000011035569b: nop
  0x000000011035569c: nop
  0x000000011035569d: movabs $0xffffffffffffffff,%rax
  0x00000001103556a7: callq  0x000000010ff582e0  ; OopMap{[80]=Oop [104]=Oop [112]=Oop off=1388}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@51 (line 183)
                                                ;   {virtual_call}
  0x00000001103556ac: cmp    $0x0,%eax
  0x00000001103556af: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103556b9: movabs $0x2c0,%rdi
  0x00000001103556c3: jne    0x00000001103556d3
  0x00000001103556c9: movabs $0x2d0,%rdi
  0x00000001103556d3: mov    (%rsi,%rdi,1),%rbx
  0x00000001103556d7: lea    0x1(%rbx),%rbx
  0x00000001103556db: mov    %rbx,(%rsi,%rdi,1)
  0x00000001103556df: je     0x000000011035594d  ;*ifne
                                                ; - java.util.AbstractCollection::toArray@56 (line 183)

  0x00000001103556e5: mov    0x70(%rsp),%rax
  0x00000001103556ea: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103556f4: mov    0x8(%rax),%eax
  0x00000001103556f7: shl    $0x3,%rax
  0x00000001103556fb: cmp    0x3e0(%rsi),%rax
  0x0000000110355702: jne    0x0000000110355711
  0x0000000110355704: addq   $0x1,0x3e8(%rsi)
  0x000000011035570c: jmpq   0x0000000110355777
  0x0000000110355711: cmp    0x3f0(%rsi),%rax
  0x0000000110355718: jne    0x0000000110355727
  0x000000011035571a: addq   $0x1,0x3f8(%rsi)
  0x0000000110355722: jmpq   0x0000000110355777
  0x0000000110355727: cmpq   $0x0,0x3e0(%rsi)
  0x0000000110355732: jne    0x000000011035574b
  0x0000000110355734: mov    %rax,0x3e0(%rsi)
  0x000000011035573b: movq   $0x1,0x3e8(%rsi)
  0x0000000110355746: jmpq   0x0000000110355777
  0x000000011035574b: cmpq   $0x0,0x3f0(%rsi)
  0x0000000110355756: jne    0x000000011035576f
  0x0000000110355758: mov    %rax,0x3f0(%rsi)
  0x000000011035575f: movq   $0x1,0x3f8(%rsi)
  0x000000011035576a: jmpq   0x0000000110355777
  0x000000011035576f: addq   $0x1,0x3d8(%rsi)
  0x0000000110355777: mov    0x70(%rsp),%rsi    ;*invokeinterface next
                                                ; - java.util.AbstractCollection::toArray@114 (line 196)

  0x000000011035577c: nop
  0x000000011035577d: movabs $0xffffffffffffffff,%rax
  0x0000000110355787: callq  0x000000010ff582e0  ; OopMap{[80]=Oop [112]=Oop [104]=Oop off=1612}
                                                ;*invokeinterface next
                                                ; - java.util.AbstractCollection::toArray@114 (line 196)
                                                ;   {virtual_call}
  0x000000011035578c: mov    0x78(%rsp),%edi
  0x0000000110355790: movslq %edi,%rsi
  0x0000000110355793: mov    0x68(%rsp),%rbx
  0x0000000110355798: lea    0x10(%rbx,%rsi,4),%rsi
  0x000000011035579d: cmp    $0x0,%rax
  0x00000001103557a1: jne    0x00000001103557bc
  0x00000001103557a3: movabs $0x127280168,%rcx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103557ad: orl    $0x100,0x400(%rcx)
  0x00000001103557b7: jmpq   0x00000001103558a2
  0x00000001103557bc: mov    0x8(%rbx),%edx     ; implicit exception: dispatches to 0x0000000110356084
  0x00000001103557bf: shl    $0x3,%rdx
  0x00000001103557c3: mov    0x8(%rax),%ecx
  0x00000001103557c6: shl    $0x3,%rcx
  0x00000001103557ca: mov    0xe8(%rdx),%rdx
  0x00000001103557d1: cmp    %rdx,%rcx
  0x00000001103557d4: je     0x0000000110355804
  0x00000001103557da: mov    0xc(%rdx),%r8d
  0x00000001103557de: cmp    (%rcx,%r8,1),%rdx
  0x00000001103557e2: je     0x0000000110355804
  0x00000001103557e8: cmp    $0x18,%r8d
  0x00000001103557ec: jne    0x000000011035588b
  0x00000001103557f2: push   %rcx
  0x00000001103557f3: push   %rdx
  0x00000001103557f4: callq  0x00000001100108a0  ;   {runtime_call}
  0x00000001103557f9: pop    %rcx
  0x00000001103557fa: pop    %rdx
  0x00000001103557fb: cmp    $0x0,%edx
  0x00000001103557fe: je     0x000000011035588b
  0x0000000110355804: movabs $0x127280168,%rcx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x000000011035580e: mov    0x8(%rax),%edx
  0x0000000110355811: shl    $0x3,%rdx
  0x0000000110355815: cmp    0x410(%rcx),%rdx
  0x000000011035581c: jne    0x000000011035582b
  0x000000011035581e: addq   $0x1,0x418(%rcx)
  0x0000000110355826: jmpq   0x00000001103558a2
  0x000000011035582b: cmp    0x420(%rcx),%rdx
  0x0000000110355832: jne    0x0000000110355841
  0x0000000110355834: addq   $0x1,0x428(%rcx)
  0x000000011035583c: jmpq   0x00000001103558a2
  0x0000000110355841: cmpq   $0x0,0x410(%rcx)
  0x000000011035584c: jne    0x0000000110355865
  0x000000011035584e: mov    %rdx,0x410(%rcx)
  0x0000000110355855: movq   $0x1,0x418(%rcx)
  0x0000000110355860: jmpq   0x00000001103558a2
  0x0000000110355865: cmpq   $0x0,0x420(%rcx)
  0x0000000110355870: jne    0x0000000110355889
  0x0000000110355872: mov    %rdx,0x420(%rcx)
  0x0000000110355879: movq   $0x1,0x428(%rcx)
  0x0000000110355884: jmpq   0x00000001103558a2
  0x0000000110355889: jmp    0x00000001103558a2
  0x000000011035588b: movabs $0x127280168,%rcx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355895: subq   $0x1,0x408(%rcx)
  0x000000011035589d: jmpq   0x0000000110356089
  0x00000001103558a2: mov    %rax,%r10
  0x00000001103558a5: shr    $0x3,%r10
  0x00000001103558a9: mov    %r10d,(%rsi)
  0x00000001103558ac: shr    $0x9,%rsi
  0x00000001103558b0: movabs $0x109ac3000,%rdx
  0x00000001103558ba: movb   $0x0,(%rsi,%rdx,1)  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)

  0x00000001103558be: inc    %edi
  0x00000001103558c0: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103558ca: mov    0xe0(%rsi),%edx
  0x00000001103558d0: add    $0x8,%edx
  0x00000001103558d3: mov    %edx,0xe0(%rsi)
  0x00000001103558d9: movabs $0x126fdb148,%rsi  ;   {metadata({method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103558e3: and    $0xfff8,%edx
  0x00000001103558e9: cmp    $0x0,%edx
  0x00000001103558ec: je     0x0000000110356092  ; OopMap{[80]=Oop [112]=Oop rbx=Oop off=1970}
                                                ;*goto
                                                ; - java.util.AbstractCollection::toArray@123 (line 182)

  0x00000001103558f2: test   %eax,-0x373c7f8(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x00000001103558f8: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355902: incl   0x438(%rsi)        ;*goto
                                                ; - java.util.AbstractCollection::toArray@123 (line 182)

  0x0000000110355908: mov    0x70(%rsp),%rax
  0x000000011035590d: mov    0xc(%rbx),%esi     ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@45 (line 182)
                                                ; implicit exception: dispatches to 0x00000001103560a9
  0x0000000110355910: cmp    %esi,%edi
  0x0000000110355912: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x000000011035591c: movabs $0x270,%rdx
  0x0000000110355926: jge    0x0000000110355936
  0x000000011035592c: movabs $0x280,%rdx
  0x0000000110355936: mov    (%rsi,%rdx,1),%rcx
  0x000000011035593a: lea    0x1(%rcx),%rcx
  0x000000011035593e: mov    %rcx,(%rsi,%rdx,1)
  0x0000000110355942: jge    0x0000000110355b5c
  0x0000000110355948: jmpq   0x00000001103555f8  ;*if_icmpge
                                                ; - java.util.AbstractCollection::toArray@46 (line 182)

  0x000000011035594d: mov    0x78(%rsp),%edi
  0x0000000110355951: mov    0x68(%rsp),%rbx
  0x0000000110355956: mov    0x50(%rsp),%rdx
  0x000000011035595b: cmp    %rbx,%rdx
  0x000000011035595e: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355968: movabs $0x2e0,%rcx
  0x0000000110355972: jne    0x0000000110355982
  0x0000000110355978: movabs $0x2f0,%rcx
  0x0000000110355982: mov    (%rsi,%rcx,1),%r8
  0x0000000110355986: lea    0x1(%r8),%r8
  0x000000011035598a: mov    %r8,(%rsi,%rcx,1)
  0x000000011035598e: je     0x0000000110355eeb  ;*if_acmpne
                                                ; - java.util.AbstractCollection::toArray@61 (line 184)

  0x0000000110355994: mov    0x64(%rsp),%eax
  0x0000000110355998: cmp    %edi,%eax
  0x000000011035599a: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103559a4: movabs $0x348,%rcx
  0x00000001103559ae: jge    0x00000001103559be
  0x00000001103559b4: movabs $0x358,%rcx
  0x00000001103559be: mov    (%rsi,%rcx,1),%r8
  0x00000001103559c2: lea    0x1(%r8),%r8
  0x00000001103559c6: mov    %r8,(%rsi,%rcx,1)
  0x00000001103559ca: jl     0x0000000110355dde  ;*if_icmpge
                                                ; - java.util.AbstractCollection::toArray@76 (line 186)

  0x00000001103559d0: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x00000001103559da: addq   $0x1,0x378(%rsi)
  0x00000001103559e2: mov    %rbx,%rsi
  0x00000001103559e5: mov    %rdx,%rbx
  0x00000001103559e8: mov    $0x0,%edx
  0x00000001103559ed: mov    %rbx,%rcx
  0x00000001103559f0: mov    $0x0,%r8d
  0x00000001103559f6: mov    %rdi,%r9
  0x00000001103559f9: mov    %edi,0x78(%rsp)
  0x00000001103559fd: lea    (%rdx,%r9,1),%rdi
  0x0000000110355a01: cmp    0xc(%rsi),%edi
  0x0000000110355a04: ja     0x00000001103560ae
  0x0000000110355a0a: lea    (%r8,%r9,1),%rdi
  0x0000000110355a0e: cmp    0xc(%rcx),%edi
  0x0000000110355a11: ja     0x00000001103560ae
  0x0000000110355a17: test   %r9d,%r9d
  0x0000000110355a1a: jl     0x00000001103560ae
  0x0000000110355a20: je     0x0000000110355b14
  0x0000000110355a26: movslq %edx,%rdx
  0x0000000110355a29: movslq %r8d,%r8
  0x0000000110355a2c: push   %rsi
  0x0000000110355a2d: push   %rcx
  0x0000000110355a2e: mov    0x8(%rsi),%esi
  0x0000000110355a31: shl    $0x3,%rsi
  0x0000000110355a35: mov    0x8(%rcx),%ecx
  0x0000000110355a38: shl    $0x3,%rcx
  0x0000000110355a3c: cmp    %rcx,%rsi
  0x0000000110355a3f: je     0x0000000110355ae2
  0x0000000110355a45: mov    0xc(%rcx),%edi
  0x0000000110355a48: cmp    (%rsi,%rdi,1),%rcx
  0x0000000110355a4c: je     0x0000000110355ae2
  0x0000000110355a52: cmp    $0x18,%edi
  0x0000000110355a55: jne    0x0000000110355a6d
  0x0000000110355a5b: push   %rsi
  0x0000000110355a5c: push   %rcx
  0x0000000110355a5d: callq  0x00000001100108a0  ;   {runtime_call}
  0x0000000110355a62: pop    %rcx
  0x0000000110355a63: pop    %rsi
  0x0000000110355a64: cmp    $0x0,%esi
  0x0000000110355a67: jne    0x0000000110355ae2
  0x0000000110355a6d: pop    %rcx
  0x0000000110355a6e: pop    %rsi
  0x0000000110355a6f: mov    %rcx,(%rsp)
  0x0000000110355a73: mov    %r8,0x8(%rsp)
  0x0000000110355a78: mov    %r9,0x10(%rsp)
  0x0000000110355a7d: mov    %rdx,0x18(%rsp)
  0x0000000110355a82: mov    %rsi,0x20(%rsp)
  0x0000000110355a87: movslq %r9d,%r9
  0x0000000110355a8a: lea    0x10(%rsi,%rdx,4),%rdi
  0x0000000110355a8f: lea    0x10(%rcx,%r8,4),%rsi
  0x0000000110355a94: mov    %r9,%rdx
  0x0000000110355a97: mov    0x8(%rcx),%r8d
  0x0000000110355a9b: shl    $0x3,%r8
  0x0000000110355a9f: mov    0xe8(%r8),%r8
  0x0000000110355aa6: mov    0xc(%r8),%ecx
  0x0000000110355aaa: callq  Stub::checkcast_arraycopy
                                                ;   {runtime_call}
  0x0000000110355aaf: test   %eax,%eax
  0x0000000110355ab1: je     0x0000000110355b14
  0x0000000110355ab7: mov    %rax,%rdi
  0x0000000110355aba: xor    $0xffffffffffffffff,%edi
  0x0000000110355abd: mov    (%rsp),%rcx
  0x0000000110355ac1: mov    0x8(%rsp),%r8
  0x0000000110355ac6: mov    0x10(%rsp),%r9
  0x0000000110355acb: mov    0x18(%rsp),%rdx
  0x0000000110355ad0: mov    0x20(%rsp),%rsi
  0x0000000110355ad5: sub    %edi,%r9d
  0x0000000110355ad8: add    %edi,%edx
  0x0000000110355ada: add    %edi,%r8d
  0x0000000110355add: jmpq   0x00000001103560ae
  0x0000000110355ae2: pop    %rcx
  0x0000000110355ae3: pop    %rsi
  0x0000000110355ae4: lea    0x10(%rsi,%rdx,4),%rdi
  0x0000000110355ae9: lea    0x10(%rcx,%r8,4),%rsi
  0x0000000110355aee: mov    %r9,%rdx
  0x0000000110355af1: test   $0xf,%esp
  0x0000000110355af7: je     0x0000000110355b0f
  0x0000000110355afd: sub    $0x8,%rsp
  0x0000000110355b01: callq  Stub::oop_disjoint_arraycopy
                                                ;   {runtime_call}
  0x0000000110355b06: add    $0x8,%rsp
  0x0000000110355b0a: jmpq   0x0000000110355b14
  0x0000000110355b0f: callq  Stub::oop_disjoint_arraycopy
                                                ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)
                                                ;   {runtime_call}
  0x0000000110355b14: mov    0x64(%rsp),%edi
  0x0000000110355b18: cmp    0x78(%rsp),%edi
  0x0000000110355b1c: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355b26: movabs $0x388,%rdi
  0x0000000110355b30: jle    0x0000000110355b40
  0x0000000110355b36: movabs $0x398,%rdi
  0x0000000110355b40: mov    (%rsi,%rdi,1),%rbx
  0x0000000110355b44: lea    0x1(%rbx),%rbx
  0x0000000110355b48: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110355b4c: jg     0x0000000110355c9f  ;*if_icmple
                                                ; - java.util.AbstractCollection::toArray@99 (line 190)

  0x0000000110355b52: mov    0x50(%rsp),%rdx
  0x0000000110355b57: jmpq   0x000000011035602c  ;*aload_1
                                                ; - java.util.AbstractCollection::toArray@107 (line 194)

  0x0000000110355b5c: mov    %rbx,0x68(%rsp)
  0x0000000110355b61: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00000001103560b9
  0x0000000110355b64: mov    %rax,%rsi
  0x0000000110355b67: movabs $0x127280168,%rdi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355b71: mov    0x8(%rsi),%esi
  0x0000000110355b74: shl    $0x3,%rsi
  0x0000000110355b78: cmp    0x458(%rdi),%rsi
  0x0000000110355b7f: jne    0x0000000110355b8e
  0x0000000110355b81: addq   $0x1,0x460(%rdi)
  0x0000000110355b89: jmpq   0x0000000110355bf4
  0x0000000110355b8e: cmp    0x468(%rdi),%rsi
  0x0000000110355b95: jne    0x0000000110355ba4
  0x0000000110355b97: addq   $0x1,0x470(%rdi)
  0x0000000110355b9f: jmpq   0x0000000110355bf4
  0x0000000110355ba4: cmpq   $0x0,0x458(%rdi)
  0x0000000110355baf: jne    0x0000000110355bc8
  0x0000000110355bb1: mov    %rsi,0x458(%rdi)
  0x0000000110355bb8: movq   $0x1,0x460(%rdi)
  0x0000000110355bc3: jmpq   0x0000000110355bf4
  0x0000000110355bc8: cmpq   $0x0,0x468(%rdi)
  0x0000000110355bd3: jne    0x0000000110355bec
  0x0000000110355bd5: mov    %rsi,0x468(%rdi)
  0x0000000110355bdc: movq   $0x1,0x470(%rdi)
  0x0000000110355be7: jmpq   0x0000000110355bf4
  0x0000000110355bec: addq   $0x1,0x450(%rdi)
  0x0000000110355bf4: mov    %rax,%rsi          ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@128 (line 199)

  0x0000000110355bf7: nop
  0x0000000110355bf8: nop
  0x0000000110355bf9: nop
  0x0000000110355bfa: nop
  0x0000000110355bfb: nop
  0x0000000110355bfc: nop
  0x0000000110355bfd: movabs $0xffffffffffffffff,%rax
  0x0000000110355c07: callq  0x000000010ff582e0  ; OopMap{[104]=Oop [112]=Oop off=2764}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@128 (line 199)
                                                ;   {virtual_call}
  0x0000000110355c0c: cmp    $0x0,%eax
  0x0000000110355c0f: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355c19: movabs $0x480,%rdx
  0x0000000110355c23: je     0x0000000110355c33
  0x0000000110355c29: movabs $0x490,%rdx
  0x0000000110355c33: mov    (%rsi,%rdx,1),%rdi
  0x0000000110355c37: lea    0x1(%rdi),%rdi
  0x0000000110355c3b: mov    %rdi,(%rsi,%rdx,1)
  0x0000000110355c3f: je     0x0000000110355c8b  ;*ifeq
                                                ; - java.util.AbstractCollection::toArray@133 (line 199)

  0x0000000110355c45: mov    0x70(%rsp),%rax
  0x0000000110355c4a: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355c54: addq   $0x1,0x4a0(%rsi)
  0x0000000110355c5c: mov    0x68(%rsp),%rsi
  0x0000000110355c61: mov    %rax,%rdx          ;*invokestatic finishToArray
                                                ; - java.util.AbstractCollection::toArray@139 (line 199)

  0x0000000110355c64: nop
  0x0000000110355c65: nop
  0x0000000110355c66: nop
  0x0000000110355c67: callq  0x000000010ff58520  ; OopMap{off=2860}
                                                ;*invokestatic finishToArray
                                                ; - java.util.AbstractCollection::toArray@139 (line 199)
                                                ;   {static_call}
  0x0000000110355c6c: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355c76: incl   0x4b0(%rsi)        ;*goto
                                                ; - java.util.AbstractCollection::toArray@142 (line 199)

  0x0000000110355c7c: add    $0x90,%rsp
  0x0000000110355c83: pop    %rbp
  0x0000000110355c84: test   %eax,-0x373cb8a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110355c8a: retq
  0x0000000110355c8b: mov    0x68(%rsp),%rax
  0x0000000110355c90: add    $0x90,%rsp
  0x0000000110355c97: pop    %rbp
  0x0000000110355c98: test   %eax,-0x373cb9e(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110355c9e: retq                      ;*areturn
                                                ; - java.util.AbstractCollection::toArray@146 (line 199)

  0x0000000110355c9f: mov    0x78(%rsp),%edi
  0x0000000110355ca3: mov    0x50(%rsp),%rdx
  0x0000000110355ca8: movabs $0x0,%rsi          ;   {oop(NULL)}
  0x0000000110355cb2: movslq %edi,%rdi
  0x0000000110355cb5: lea    0x10(%rdx,%rdi,4),%rcx
  0x0000000110355cba: cmp    $0x0,%rsi
  0x0000000110355cbe: jne    0x0000000110355cd9
  0x0000000110355cc0: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355cca: orl    $0x100,0x3a0(%rbx)
  0x0000000110355cd4: jmpq   0x0000000110355dbd
  0x0000000110355cd9: mov    0x8(%rdx),%edi     ; implicit exception: dispatches to 0x00000001103560be
  0x0000000110355cdc: shl    $0x3,%rdi
  0x0000000110355ce0: mov    0x8(%rsi),%ebx
  0x0000000110355ce3: shl    $0x3,%rbx
  0x0000000110355ce7: mov    0xe8(%rdi),%rdi
  0x0000000110355cee: cmp    %rdi,%rbx
  0x0000000110355cf1: je     0x0000000110355d1f
  0x0000000110355cf7: mov    0xc(%rdi),%eax
  0x0000000110355cfa: cmp    (%rbx,%rax,1),%rdi
  0x0000000110355cfe: je     0x0000000110355d1f
  0x0000000110355d04: cmp    $0x18,%eax
  0x0000000110355d07: jne    0x0000000110355da6
  0x0000000110355d0d: push   %rbx
  0x0000000110355d0e: push   %rdi
  0x0000000110355d0f: callq  0x00000001100108a0  ;   {runtime_call}
  0x0000000110355d14: pop    %rbx
  0x0000000110355d15: pop    %rdi
  0x0000000110355d16: cmp    $0x0,%edi
  0x0000000110355d19: je     0x0000000110355da6
  0x0000000110355d1f: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355d29: mov    0x8(%rsi),%edi
  0x0000000110355d2c: shl    $0x3,%rdi
  0x0000000110355d30: cmp    0x3b0(%rbx),%rdi
  0x0000000110355d37: jne    0x0000000110355d46
  0x0000000110355d39: addq   $0x1,0x3b8(%rbx)
  0x0000000110355d41: jmpq   0x0000000110355dbd
  0x0000000110355d46: cmp    0x3c0(%rbx),%rdi
  0x0000000110355d4d: jne    0x0000000110355d5c
  0x0000000110355d4f: addq   $0x1,0x3c8(%rbx)
  0x0000000110355d57: jmpq   0x0000000110355dbd
  0x0000000110355d5c: cmpq   $0x0,0x3b0(%rbx)
  0x0000000110355d67: jne    0x0000000110355d80
  0x0000000110355d69: mov    %rdi,0x3b0(%rbx)
  0x0000000110355d70: movq   $0x1,0x3b8(%rbx)
  0x0000000110355d7b: jmpq   0x0000000110355dbd
  0x0000000110355d80: cmpq   $0x0,0x3c0(%rbx)
  0x0000000110355d8b: jne    0x0000000110355da4
  0x0000000110355d8d: mov    %rdi,0x3c0(%rbx)
  0x0000000110355d94: movq   $0x1,0x3c8(%rbx)
  0x0000000110355d9f: jmpq   0x0000000110355dbd
  0x0000000110355da4: jmp    0x0000000110355dbd
  0x0000000110355da6: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355db0: subq   $0x1,0x3a8(%rbx)
  0x0000000110355db8: jmpq   0x00000001103560c3
  0x0000000110355dbd: mov    %rsi,%r10
  0x0000000110355dc0: shr    $0x3,%r10
  0x0000000110355dc4: mov    %r10d,(%rcx)
  0x0000000110355dc7: shr    $0x9,%rcx
  0x0000000110355dcb: movabs $0x109ac3000,%rsi
  0x0000000110355dd5: movb   $0x0,(%rcx,%rsi,1)  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@106 (line 191)

  0x0000000110355dd9: jmpq   0x000000011035602c  ;*aload_1
                                                ; - java.util.AbstractCollection::toArray@107 (line 194)

  0x0000000110355dde: movabs $0x127280168,%rsi  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355de8: addq   $0x1,0x368(%rsi)
  0x0000000110355df0: movabs $0x1271c4ad8,%rsi  ;   {metadata(method data for {method} {0x000000012702ceb8} 'copyOf' '([Ljava/lang/Object;I)[Ljava/lang/Object;' in 'java/util/Arrays')}
  0x0000000110355dfa: mov    0xdc(%rsi),%edx
  0x0000000110355e00: add    $0x8,%edx
  0x0000000110355e03: mov    %edx,0xdc(%rsi)
  0x0000000110355e09: movabs $0x12702ceb8,%rsi  ;   {metadata({method} {0x000000012702ceb8} 'copyOf' '([Ljava/lang/Object;I)[Ljava/lang/Object;' in 'java/util/Arrays')}
  0x0000000110355e13: and    $0x7ffff8,%edx
  0x0000000110355e19: cmp    $0x0,%edx
  0x0000000110355e1c: je     0x00000001103560cc
  0x0000000110355e22: mov    %rbx,%rsi
  0x0000000110355e25: movabs $0x1271c4ad8,%rdx  ;   {metadata(method data for {method} {0x000000012702ceb8} 'copyOf' '([Ljava/lang/Object;I)[Ljava/lang/Object;' in 'java/util/Arrays')}
  0x0000000110355e2f: mov    0x8(%rsi),%esi
  0x0000000110355e32: shl    $0x3,%rsi
  0x0000000110355e36: cmp    0x110(%rdx),%rsi
  0x0000000110355e3d: jne    0x0000000110355e4c
  0x0000000110355e3f: addq   $0x1,0x118(%rdx)
  0x0000000110355e47: jmpq   0x0000000110355eb2
  0x0000000110355e4c: cmp    0x120(%rdx),%rsi
  0x0000000110355e53: jne    0x0000000110355e62
  0x0000000110355e55: addq   $0x1,0x128(%rdx)
  0x0000000110355e5d: jmpq   0x0000000110355eb2
  0x0000000110355e62: cmpq   $0x0,0x110(%rdx)
  0x0000000110355e6d: jne    0x0000000110355e86
  0x0000000110355e6f: mov    %rsi,0x110(%rdx)
  0x0000000110355e76: movq   $0x1,0x118(%rdx)
  0x0000000110355e81: jmpq   0x0000000110355eb2
  0x0000000110355e86: cmpq   $0x0,0x120(%rdx)
  0x0000000110355e91: jne    0x0000000110355eaa
  0x0000000110355e93: mov    %rsi,0x120(%rdx)
  0x0000000110355e9a: movq   $0x1,0x128(%rdx)
  0x0000000110355ea5: jmpq   0x0000000110355eb2
  0x0000000110355eaa: addq   $0x1,0x108(%rdx)
  0x0000000110355eb2: mov    0x8(%rbx),%esi
  0x0000000110355eb5: shl    $0x3,%rsi
  0x0000000110355eb9: mov    0x68(%rsi),%rcx    ;*invokevirtual getClass
                                                ; - java.util.Arrays::copyOf@3 (line 3181)
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)

  0x0000000110355ebd: movabs $0x1271c4ad8,%rsi  ;   {metadata(method data for {method} {0x000000012702ceb8} 'copyOf' '([Ljava/lang/Object;I)[Ljava/lang/Object;' in 'java/util/Arrays')}
  0x0000000110355ec7: addq   $0x1,0x138(%rsi)
  0x0000000110355ecf: mov    %rbx,%rsi
  0x0000000110355ed2: mov    %rdi,%rdx          ;*invokestatic copyOf
                                                ; - java.util.Arrays::copyOf@6 (line 3181)
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)

  0x0000000110355ed5: nop
  0x0000000110355ed6: nop
  0x0000000110355ed7: callq  0x000000010ff58520  ; OopMap{off=3484}
                                                ;*invokestatic copyOf
                                                ; - java.util.Arrays::copyOf@6 (line 3181)
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)
                                                ;   {static_call}
  0x0000000110355edc: add    $0x90,%rsp
  0x0000000110355ee3: pop    %rbp
  0x0000000110355ee4: test   %eax,-0x373cdea(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110355eea: retq                      ;*areturn
                                                ; - java.util.AbstractCollection::toArray@85 (line 187)

  0x0000000110355eeb: movabs $0x0,%rax          ;   {oop(NULL)}
  0x0000000110355ef5: movslq %edi,%rdi
  0x0000000110355ef8: lea    0x10(%rbx,%rdi,4),%rsi
  0x0000000110355efd: cmp    $0x0,%rax
  0x0000000110355f01: jne    0x0000000110355f1c
  0x0000000110355f03: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355f0d: orl    $0x100,0x2f8(%rbx)
  0x0000000110355f17: jmpq   0x0000000110356000
  0x0000000110355f1c: mov    0x8(%rbx),%edi     ; implicit exception: dispatches to 0x00000001103560e3
  0x0000000110355f1f: shl    $0x3,%rdi
  0x0000000110355f23: mov    0x8(%rax),%ebx
  0x0000000110355f26: shl    $0x3,%rbx
  0x0000000110355f2a: mov    0xe8(%rdi),%rdi
  0x0000000110355f31: cmp    %rdi,%rbx
  0x0000000110355f34: je     0x0000000110355f62
  0x0000000110355f3a: mov    0xc(%rdi),%ecx
  0x0000000110355f3d: cmp    (%rbx,%rcx,1),%rdi
  0x0000000110355f41: je     0x0000000110355f62
  0x0000000110355f47: cmp    $0x18,%ecx
  0x0000000110355f4a: jne    0x0000000110355fe9
  0x0000000110355f50: push   %rbx
  0x0000000110355f51: push   %rdi
  0x0000000110355f52: callq  0x00000001100108a0  ;   {runtime_call}
  0x0000000110355f57: pop    %rbx
  0x0000000110355f58: pop    %rdi
  0x0000000110355f59: cmp    $0x0,%edi
  0x0000000110355f5c: je     0x0000000110355fe9
  0x0000000110355f62: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355f6c: mov    0x8(%rax),%edi
  0x0000000110355f6f: shl    $0x3,%rdi
  0x0000000110355f73: cmp    0x308(%rbx),%rdi
  0x0000000110355f7a: jne    0x0000000110355f89
  0x0000000110355f7c: addq   $0x1,0x310(%rbx)
  0x0000000110355f84: jmpq   0x0000000110356000
  0x0000000110355f89: cmp    0x318(%rbx),%rdi
  0x0000000110355f90: jne    0x0000000110355f9f
  0x0000000110355f92: addq   $0x1,0x320(%rbx)
  0x0000000110355f9a: jmpq   0x0000000110356000
  0x0000000110355f9f: cmpq   $0x0,0x308(%rbx)
  0x0000000110355faa: jne    0x0000000110355fc3
  0x0000000110355fac: mov    %rdi,0x308(%rbx)
  0x0000000110355fb3: movq   $0x1,0x310(%rbx)
  0x0000000110355fbe: jmpq   0x0000000110356000
  0x0000000110355fc3: cmpq   $0x0,0x318(%rbx)
  0x0000000110355fce: jne    0x0000000110355fe7
  0x0000000110355fd0: mov    %rdi,0x318(%rbx)
  0x0000000110355fd7: movq   $0x1,0x320(%rbx)
  0x0000000110355fe2: jmpq   0x0000000110356000
  0x0000000110355fe7: jmp    0x0000000110356000
  0x0000000110355fe9: movabs $0x127280168,%rbx  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110355ff3: subq   $0x1,0x300(%rbx)
  0x0000000110355ffb: jmpq   0x00000001103560e8
  0x0000000110356000: mov    %rax,%r10
  0x0000000110356003: shr    $0x3,%r10
  0x0000000110356007: mov    %r10d,(%rsi)
  0x000000011035600a: shr    $0x9,%rsi
  0x000000011035600e: movabs $0x109ac3000,%rax
  0x0000000110356018: movb   $0x0,(%rsi,%rax,1)  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)

  0x000000011035601c: movabs $0x127280168,%rax  ;   {metadata(method data for {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection')}
  0x0000000110356026: incl   0x330(%rax)        ;*goto
                                                ; - java.util.AbstractCollection::toArray@69 (line 185)

  0x000000011035602c: mov    %rdx,%rax
  0x000000011035602f: add    $0x90,%rsp
  0x0000000110356036: pop    %rbp
  0x0000000110356037: test   %eax,-0x373cf3d(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035603d: retq
  0x000000011035603e: mov    %rdi,0x8(%rsp)
  0x0000000110356043: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035604b: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop [80]=Oop off=3856}
                                                ;*synchronization entry
                                                ; - java.util.AbstractCollection::toArray@-1 (line 176)
                                                ;   {runtime_call}
  0x0000000110356050: jmpq   0x00000001103551a3
  0x0000000110356055: callq  0x000000011000e080  ; OopMap{[88]=Oop rdx=Oop [80]=Oop off=3866}
                                                ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@6 (line 177)
                                                ;   {runtime_call}
  0x000000011035605a: callq  0x000000011000e080  ; OopMap{[88]=Oop rdx=Oop [80]=Oop rsi=Oop off=3871}
                                                ;*invokevirtual getComponentType
                                                ; - java.util.AbstractCollection::toArray@19 (line 179)
                                                ;   {runtime_call}
  0x000000011035605f: mov    %rsi,0x8(%rsp)
  0x0000000110356064: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035606c: callq  0x00000001100129e0  ; OopMap{[88]=Oop [80]=Oop rax=Oop off=3889}
                                                ;*synchronization entry
                                                ; - java.lang.reflect.Array::newInstance@-1 (line 75)
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)
                                                ;   {runtime_call}
  0x0000000110356071: jmpq   0x0000000110355430
  0x0000000110356076: mov    %rax,(%rsp)
  0x000000011035607a: callq  0x0000000110010440  ; OopMap{[88]=Oop [80]=Oop off=3903}
                                                ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)
                                                ;   {runtime_call}
  0x000000011035607f: callq  0x000000011000e080  ; OopMap{[80]=Oop rax=Oop [112]=Oop [104]=Oop off=3908}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@51 (line 183)
                                                ;   {runtime_call}
  0x0000000110356084: callq  0x000000011000e080  ; OopMap{[80]=Oop [112]=Oop rax=Oop rbx=Oop off=3913}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x0000000110356089: mov    %rax,(%rsp)
  0x000000011035608d: callq  0x0000000110010200  ; OopMap{[80]=Oop [112]=Oop rax=Oop rbx=Oop off=3922}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x0000000110356092: mov    %rsi,0x8(%rsp)
  0x0000000110356097: movq   $0x7b,(%rsp)
  0x000000011035609f: callq  0x00000001100129e0  ; OopMap{[80]=Oop [112]=Oop rbx=Oop off=3940}
                                                ;*goto
                                                ; - java.util.AbstractCollection::toArray@123 (line 182)
                                                ;   {runtime_call}
  0x00000001103560a4: jmpq   0x00000001103558f2
  0x00000001103560a9: callq  0x000000011000e080  ; OopMap{[80]=Oop rax=Oop [112]=Oop rbx=Oop off=3950}
                                                ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@45 (line 182)
                                                ;   {runtime_call}
  0x00000001103560ae: nop
  0x00000001103560af: callq  0x000000010ff58520  ; OopMap{[80]=Oop off=3956}
                                                ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)
                                                ;   {static_call}
  0x00000001103560b4: jmpq   0x0000000110355b14
  0x00000001103560b9: callq  0x000000011000e080  ; OopMap{[104]=Oop rax=Oop [112]=Oop off=3966}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@128 (line 199)
                                                ;   {runtime_call}
  0x00000001103560be: callq  0x000000011000e080  ; OopMap{rdx=Oop [80]=Oop rsi=Oop off=3971}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@106 (line 191)
                                                ;   {runtime_call}
  0x00000001103560c3: mov    %rsi,(%rsp)
  0x00000001103560c7: callq  0x0000000110010200  ; OopMap{rdx=Oop [80]=Oop rsi=Oop off=3980}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@106 (line 191)
                                                ;   {runtime_call}
  0x00000001103560cc: mov    %rsi,0x8(%rsp)
  0x00000001103560d1: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103560d9: callq  0x00000001100129e0  ; OopMap{rbx=Oop off=3998}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOf@-1 (line 3181)
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)
                                                ;   {runtime_call}
  0x00000001103560de: jmpq   0x0000000110355e22
  0x00000001103560e3: callq  0x000000011000e080  ; OopMap{rdx=Oop [80]=Oop rax=Oop off=4008}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)
                                                ;   {runtime_call}
  0x00000001103560e8: mov    %rax,(%rsp)
  0x00000001103560ec: callq  0x0000000110010200  ; OopMap{rdx=Oop [80]=Oop rax=Oop off=4017}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)
                                                ;   {runtime_call}
  0x00000001103560f1: nop
  0x00000001103560f2: nop
  0x00000001103560f3: mov    0x2a8(%r15),%rax
  0x00000001103560fa: movabs $0x0,%r10
  0x0000000110356104: mov    %r10,0x2a8(%r15)
  0x000000011035610b: movabs $0x0,%r10
  0x0000000110356115: mov    %r10,0x2b0(%r15)
  0x000000011035611c: add    $0x90,%rsp
  0x0000000110356123: pop    %rbp
  0x0000000110356124: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110356129: hlt
  0x000000011035612a: hlt
  0x000000011035612b: hlt
  0x000000011035612c: hlt
  0x000000011035612d: hlt
  0x000000011035612e: hlt
  0x000000011035612f: hlt
  0x0000000110356130: hlt
  0x0000000110356131: hlt
  0x0000000110356132: hlt
  0x0000000110356133: hlt
  0x0000000110356134: hlt
  0x0000000110356135: hlt
  0x0000000110356136: hlt
  0x0000000110356137: hlt
  0x0000000110356138: hlt
  0x0000000110356139: hlt
  0x000000011035613a: hlt
  0x000000011035613b: hlt
  0x000000011035613c: hlt
  0x000000011035613d: hlt
  0x000000011035613e: hlt
  0x000000011035613f: hlt
[Stub Code]
  0x0000000110356140: nop                       ;   {no_reloc}
  0x0000000110356141: nop
  0x0000000110356142: nop
  0x0000000110356143: nop
  0x0000000110356144: nop
  0x0000000110356145: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035614f: jmpq   0x000000011035614f  ;   {runtime_call}
  0x0000000110356154: nop
  0x0000000110356155: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035615f: jmpq   0x000000011035615f  ;   {runtime_call}
  0x0000000110356164: nop
  0x0000000110356165: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035616f: jmpq   0x000000011035616f  ;   {runtime_call}
  0x0000000110356174: nop
  0x0000000110356175: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035617f: jmpq   0x000000011035617f  ;   {runtime_call}
  0x0000000110356184: nop
  0x0000000110356185: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035618f: jmpq   0x000000011035618f  ;   {runtime_call}
  0x0000000110356194: nop
  0x0000000110356195: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035619f: jmpq   0x000000011035619f  ;   {runtime_call}
  0x00000001103561a4: nop
  0x00000001103561a5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103561af: jmpq   0x00000001103561af  ;   {runtime_call}
  0x00000001103561b4: nop
  0x00000001103561b5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103561bf: jmpq   0x00000001103561bf  ;   {runtime_call}
  0x00000001103561c4: nop
  0x00000001103561c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103561cf: jmpq   0x00000001103561cf  ;   {runtime_call}
  0x00000001103561d4: nop
  0x00000001103561d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103561df: jmpq   0x00000001103561df  ;   {runtime_call}
[Exception Handler]
  0x00000001103561e4: callq  0x00000001100100e0  ;   {runtime_call}
  0x00000001103561e9: mov    %rsp,-0x28(%rsp)
  0x00000001103561ee: sub    $0x80,%rsp
  0x00000001103561f5: mov    %rax,0x78(%rsp)
  0x00000001103561fa: mov    %rcx,0x70(%rsp)
  0x00000001103561ff: mov    %rdx,0x68(%rsp)
  0x0000000110356204: mov    %rbx,0x60(%rsp)
  0x0000000110356209: mov    %rbp,0x50(%rsp)
  0x000000011035620e: mov    %rsi,0x48(%rsp)
  0x0000000110356213: mov    %rdi,0x40(%rsp)
  0x0000000110356218: mov    %r8,0x38(%rsp)
  0x000000011035621d: mov    %r9,0x30(%rsp)
  0x0000000110356222: mov    %r10,0x28(%rsp)
  0x0000000110356227: mov    %r11,0x20(%rsp)
  0x000000011035622c: mov    %r12,0x18(%rsp)
  0x0000000110356231: mov    %r13,0x10(%rsp)
  0x0000000110356236: mov    %r14,0x8(%rsp)
  0x000000011035623b: mov    %r15,(%rsp)
  0x000000011035623f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110356249: movabs $0x1103561e9,%rsi  ;   {internal_word}
  0x0000000110356253: mov    %rsp,%rdx
  0x0000000110356256: and    $0xfffffffffffffff0,%rsp
  0x000000011035625a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035625f: hlt
[Deopt Handler Code]
  0x0000000110356260: movabs $0x110356260,%r10  ;   {section_word}
  0x000000011035626a: push   %r10
  0x000000011035626c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110356271: hlt
  0x0000000110356272: hlt
  0x0000000110356273: hlt
  0x0000000110356274: hlt
  0x0000000110356275: hlt
  0x0000000110356276: hlt
  0x0000000110356277: hlt
Decoding compiled method 0x0000000110351d10:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127211fd0} 'getCalendarDate' '(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;' in 'sun/util/calendar/AbstractCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/AbstractCalendar'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = 'sun/util/calendar/CalendarDate'
  #           [sp+0x40]  (sp of caller)
  0x0000000110351ec0: mov    0x8(%rsi),%r10d
  0x0000000110351ec4: shl    $0x3,%r10
  0x0000000110351ec8: cmp    %r10,%rax
  0x0000000110351ecb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110351ed1: data32 xchg %ax,%ax
  0x0000000110351ed4: nopl   0x0(%rax,%rax,1)
  0x0000000110351edc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110351ee0: mov    %eax,-0x14000(%rsp)
  0x0000000110351ee7: push   %rbp
  0x0000000110351ee8: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@-1 (line 116)

  0x0000000110351eec: mov    %rdx,0x8(%rsp)
  0x0000000110351ef1: mov    %rsi,(%rsp)
  0x0000000110351ef5: mov    %rcx,0x10(%rsp)
  0x0000000110351efa: test   %rcx,%rcx
  0x0000000110351efd: je     0x00000001103520cd
  0x0000000110351f03: mov    %rcx,%rsi
  0x0000000110351f06: nop
  0x0000000110351f07: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=76}
                                                ;*invokevirtual getZone
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)
                                                ;   {optimized virtual_call}
  0x0000000110351f0c: mov    %rax,0x18(%rsp)
  0x0000000110351f11: test   %rax,%rax
  0x0000000110351f14: je     0x00000001103520a1  ;*ifnull
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@20 (line 123)

  0x0000000110351f1a: mov    0x60(%r15),%rax
  0x0000000110351f1e: mov    %rax,%r10
  0x0000000110351f21: add    $0x18,%r10
  0x0000000110351f25: cmp    0x70(%r15),%r10
  0x0000000110351f29: jae    0x00000001103520b0
  0x0000000110351f2f: mov    %r10,0x60(%r15)
  0x0000000110351f33: prefetchw 0xc0(%r10)
  0x0000000110351f3b: movq   $0x1,(%rax)
  0x0000000110351f42: prefetchw 0x100(%r10)
  0x0000000110351f4a: movl   $0xf800016d,0x8(%rax)  ;   {metadata({type array int})}
  0x0000000110351f51: prefetchw 0x140(%r10)
  0x0000000110351f59: movl   $0x2,0xc(%rax)
  0x0000000110351f60: prefetchw 0x180(%r10)
  0x0000000110351f68: mov    %r12,0x10(%rax)
  0x0000000110351f6c: mov    %rax,%rbp          ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)

  0x0000000110351f6f: mov    0x18(%rsp),%rsi
  0x0000000110351f74: mov    0x8(%rsp),%rdx
  0x0000000110351f79: mov    %rbp,%rcx
  0x0000000110351f7c: data32 xchg %ax,%ax
  0x0000000110351f7f: callq  0x000000010ff580a0  ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=196}
                                                ;*invokevirtual getOffsets
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)
                                                ;   {optimized virtual_call}
  0x0000000110351f84: mov    0x14(%rbp),%r10d   ;*iaload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@98 (line 141)

  0x0000000110351f88: mov    %eax,%r9d
  0x0000000110351f8b: sar    $0x1f,%r9d
  0x0000000110351f8f: movslq %eax,%r11
  0x0000000110351f92: imul   $0x31b5d43b,%r11,%r11
  0x0000000110351f99: sar    $0x38,%r11
  0x0000000110351f9d: mov    %r11d,%r11d
  0x0000000110351fa0: sub    %r9d,%r11d         ;*idiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@84 (line 139)

  0x0000000110351fa3: movslq %r11d,%r8          ;*i2l  ; - sun.util.calendar.AbstractCalendar::getCalendarDate@85 (line 139)

  0x0000000110351fa6: imul   $0x5265c00,%r11d,%r11d
  0x0000000110351fad: mov    %eax,%ebp
  0x0000000110351faf: sub    %r11d,%ebp         ;*irem
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@92 (line 140)

  0x0000000110351fb2: mov    %eax,%edx          ;*aload_3
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@101 (line 143)

  0x0000000110351fb4: mov    %r10d,0x1c(%rsp)
  0x0000000110351fb9: mov    %ebp,0x18(%rsp)
  0x0000000110351fbd: mov    %r8,%rbp
  0x0000000110351fc0: mov    0x10(%rsp),%rsi
  0x0000000110351fc5: xchg   %ax,%ax
  0x0000000110351fc7: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=268}
                                                ;*invokevirtual setZoneOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@104 (line 143)
                                                ;   {optimized virtual_call}
  0x0000000110351fcc: mov    0x10(%rsp),%rsi
  0x0000000110351fd1: mov    0x1c(%rsp),%edx
  0x0000000110351fd5: xchg   %ax,%ax
  0x0000000110351fd7: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=284}
                                                ;*invokevirtual setDaylightSaving
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@110 (line 144)
                                                ;   {optimized virtual_call}
  0x0000000110351fdc: mov    0x8(%rsp),%r10
  0x0000000110351fe1: sar    $0x3f,%r10
  0x0000000110351fe5: movabs $0x636ba875fd33dc87,%rax
  0x0000000110351fef: mov    0x8(%rsp),%r11
  0x0000000110351ff4: imul   %r11
  0x0000000110351ff7: sar    $0x19,%rdx
  0x0000000110351ffb: sub    %r10,%rdx          ;*ldiv
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@119 (line 146)

  0x0000000110351ffe: mov    %rbp,%r8
  0x0000000110352001: add    %rdx,%r8           ;*ladd
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@120 (line 146)

  0x0000000110352004: imul   $0x5265c00,%rdx,%r10
  0x000000011035200b: sub    %r10,%r11
  0x000000011035200e: mov    %r11d,%ebp
  0x0000000110352011: add    0x18(%rsp),%ebp    ;*iadd
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@131 (line 147)

  0x0000000110352015: cmp    $0x5265c00,%ebp
  0x000000011035201b: jge    0x0000000110352030  ;*if_icmplt
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@138 (line 148)

  0x000000011035201d: test   %ebp,%ebp
  0x000000011035201f: jge    0x000000011035203a  ;*iload
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@162 (line 156)

  0x0000000110352021: dec    %r8                ;*lsub
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@172 (line 157)

  0x0000000110352024: add    $0x5265c00,%ebp    ;*iadd
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@166 (line 156)

  0x000000011035202a: test   %ebp,%ebp
  0x000000011035202c: jl     0x0000000110352021  ;*ifge
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@159 (line 155)

  0x000000011035202e: jmp    0x000000011035203a
  0x0000000110352030: add    $0xfad9a400,%ebp   ;*isub
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@145 (line 150)

  0x0000000110352036: add    $0x1,%r8           ;*ifge
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@159 (line 155)

  0x000000011035203a: mov    %r8,%rcx
  0x000000011035203d: add    $0xaf93b,%rcx      ;*ladd
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@183 (line 162)

  0x0000000110352044: mov    (%rsp),%rsi
  0x0000000110352048: mov    0x10(%rsp),%rdx
  0x000000011035204d: xchg   %ax,%ax
  0x000000011035204f: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=404}
                                                ;*invokevirtual getCalendarDateFromFixedDate
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@190 (line 165)
                                                ;   {optimized virtual_call}
  0x0000000110352054: mov    (%rsp),%rsi
  0x0000000110352058: mov    0x10(%rsp),%rdx
  0x000000011035205d: mov    %ebp,%ecx
  0x000000011035205f: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [16]=Oop off=420}
                                                ;*invokevirtual setTimeOfDay
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@197 (line 168)
                                                ;   {optimized virtual_call}
  0x0000000110352064: mov    (%rsp),%rsi
  0x0000000110352068: mov    0x10(%rsp),%rdx
  0x000000011035206d: xchg   %ax,%ax
  0x000000011035206f: callq  0x000000010ff580a0  ; OopMap{[16]=Oop off=436}
                                                ;*invokevirtual isLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@204 (line 169)
                                                ;   {optimized virtual_call}
  0x0000000110352074: mov    0x10(%rsp),%rsi
  0x0000000110352079: mov    %eax,%edx
  0x000000011035207b: callq  0x000000010ff580a0  ; OopMap{[16]=Oop off=448}
                                                ;*invokevirtual setLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@207 (line 169)
                                                ;   {optimized virtual_call}
  0x0000000110352080: mov    $0x1,%edx
  0x0000000110352085: mov    0x10(%rsp),%rsi
  0x000000011035208a: nop
  0x000000011035208b: callq  0x000000010ff580a0  ; OopMap{[16]=Oop off=464}
                                                ;*invokevirtual setNormalized
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@212 (line 170)
                                                ;   {optimized virtual_call}
  0x0000000110352090: mov    0x10(%rsp),%rax
  0x0000000110352095: add    $0x30,%rsp
  0x0000000110352099: pop    %rbp
  0x000000011035209a: test   %eax,-0x37390a0(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x00000001103520a0: retq
  0x00000001103520a1: xor    %edx,%edx
  0x00000001103520a3: xor    %r8d,%r8d
  0x00000001103520a6: xor    %ebp,%ebp
  0x00000001103520a8: xor    %r10d,%r10d
  0x00000001103520ab: jmpq   0x0000000110351fb4
  0x00000001103520b0: mov    $0x2,%edx
  0x00000001103520b5: movabs $0x7c0000b68,%rsi  ;   {metadata({type array int})}
  0x00000001103520bf: mov    (%rsp),%rbp
  0x00000001103520c3: callq  0x00000001100141e0  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=520}
                                                ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)
                                                ;   {runtime_call}
  0x00000001103520c8: jmpq   0x0000000110351f6c
  0x00000001103520cd: mov    $0xfffffff6,%esi
  0x00000001103520d2: nop
  0x00000001103520d3: callq  0x000000010ff576a0  ; OopMap{off=536}
                                                ;*invokevirtual getZone
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)
                                                ;   {runtime_call}
  0x00000001103520d8: callq  0x000000010e0276f4  ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)
                                                ;   {runtime_call}
  0x00000001103520dd: mov    %rax,%rsi
  0x00000001103520e0: jmp    0x000000011035210d  ;*invokevirtual getOffsets
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@44 (line 126)

  0x00000001103520e2: mov    %rax,%rsi
  0x00000001103520e5: jmp    0x000000011035210d  ;*invokevirtual setNormalized
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@212 (line 170)

  0x00000001103520e7: mov    %rax,%rsi
  0x00000001103520ea: jmp    0x000000011035210d  ;*invokevirtual setLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@207 (line 169)

  0x00000001103520ec: mov    %rax,%rsi
  0x00000001103520ef: jmp    0x000000011035210d  ;*invokevirtual isLeapYear
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@204 (line 169)

  0x00000001103520f1: mov    %rax,%rsi
  0x00000001103520f4: jmp    0x000000011035210d  ;*invokevirtual setTimeOfDay
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@197 (line 168)

  0x00000001103520f6: mov    %rax,%rsi
  0x00000001103520f9: jmp    0x000000011035210d  ;*invokevirtual getCalendarDateFromFixedDate
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@190 (line 165)

  0x00000001103520fb: mov    %rax,%rsi
  0x00000001103520fe: jmp    0x000000011035210d  ;*invokevirtual setDaylightSaving
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@110 (line 144)

  0x0000000110352100: mov    %rax,%rsi
  0x0000000110352103: jmp    0x000000011035210d  ;*invokevirtual setZoneOffset
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@104 (line 143)

  0x0000000110352105: mov    %rax,%rsi
  0x0000000110352108: jmp    0x000000011035210d  ;*invokevirtual getZone
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@13 (line 122)

  0x000000011035210a: mov    %rax,%rsi          ;*newarray
                                                ; - sun.util.calendar.AbstractCalendar::getCalendarDate@24 (line 124)

  0x000000011035210d: add    $0x30,%rsp
  0x0000000110352111: pop    %rbp
  0x0000000110352112: jmpq   0x0000000110019060  ;   {runtime_call}
  0x0000000110352117: hlt
  0x0000000110352118: hlt
  0x0000000110352119: hlt
  0x000000011035211a: hlt
  0x000000011035211b: hlt
  0x000000011035211c: hlt
  0x000000011035211d: hlt
  0x000000011035211e: hlt
  0x000000011035211f: hlt
[Stub Code]
  0x0000000110352120: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035212a: jmpq   0x000000011035212a  ;   {runtime_call}
  0x000000011035212f: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352139: jmpq   0x0000000110352139  ;   {runtime_call}
  0x000000011035213e: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352148: jmpq   0x0000000110352148  ;   {runtime_call}
  0x000000011035214d: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352157: jmpq   0x0000000110352157  ;   {runtime_call}
  0x000000011035215c: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352166: jmpq   0x0000000110352166  ;   {runtime_call}
  0x000000011035216b: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352175: jmpq   0x0000000110352175  ;   {runtime_call}
  0x000000011035217a: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352184: jmpq   0x0000000110352184  ;   {runtime_call}
  0x0000000110352189: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110352193: jmpq   0x0000000110352193  ;   {runtime_call}
  0x0000000110352198: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103521a2: jmpq   0x00000001103521a2  ;   {runtime_call}
[Exception Handler]
  0x00000001103521a7: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x00000001103521ac: callq  0x00000001103521b1
  0x00000001103521b1: subq   $0x5,(%rsp)
  0x00000001103521b6: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103521bb: hlt
  0x00000001103521bc: hlt
  0x00000001103521bd: hlt
  0x00000001103521be: hlt
  0x00000001103521bf: hlt
Decoding compiled method 0x0000000110358610:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126f45798} 'remove' '(Ljava/lang/Thread;)V' in 'java/lang/ThreadGroup'
  # this:     rsi:rsi   = 'java/lang/ThreadGroup'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x0000000110358760: mov    0x8(%rsi),%r10d
  0x0000000110358764: shl    $0x3,%r10
  0x0000000110358768: cmp    %r10,%rax
  0x000000011035876b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110358771: data32 xchg %ax,%ax
  0x0000000110358774: nopl   0x0(%rax,%rax,1)
  0x000000011035877c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110358780: mov    %eax,-0x14000(%rsp)
  0x0000000110358787: push   %rbp
  0x0000000110358788: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - java.lang.ThreadGroup::remove@-1 (line 963)

  0x000000011035878c: mov    %rdx,(%rsp)
  0x0000000110358790: mov    %rsi,0x10(%rsp)
  0x0000000110358795: mov    (%rsi),%rax
  0x0000000110358798: mov    %rax,%r10
  0x000000011035879b: and    $0x7,%r10
  0x000000011035879f: cmp    $0x5,%r10
  0x00000001103587a3: jne    0x0000000110358b0e
  0x00000001103587a9: mov    $0xf8000e22,%r11d  ;   {metadata('java/lang/ThreadGroup')}
  0x00000001103587af: movabs $0x0,%r10
  0x00000001103587b9: lea    (%r10,%r11,8),%r10
  0x00000001103587bd: mov    0xa8(%r10),%r10
  0x00000001103587c4: mov    %r10,%r11
  0x00000001103587c7: or     %r15,%r11
  0x00000001103587ca: mov    %r11,%r8
  0x00000001103587cd: xor    %rax,%r8
  0x00000001103587d0: test   $0xffffffffffffff87,%r8
  0x00000001103587d7: jne    0x0000000110358b75  ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)

  0x00000001103587dd: mov    0x10(%rsp),%r10
  0x00000001103587e2: movzbl 0x1c(%r10),%r10d
  0x00000001103587e7: test   %r10d,%r10d
  0x00000001103587ea: je     0x0000000110358810  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@12 (line 965)

  0x00000001103587ec: mov    $0x7,%r10d
  0x00000001103587f2: mov    0x10(%rsp),%r11
  0x00000001103587f7: and    (%r11),%r10
  0x00000001103587fa: cmp    $0x5,%r10
  0x00000001103587fe: jne    0x0000000110358ba0  ;*synchronization entry
                                                ; - java.lang.ThreadGroup::remove@-1 (line 963)

  0x0000000110358804: add    $0x30,%rsp
  0x0000000110358808: pop    %rbp
  0x0000000110358809: test   %eax,-0x373f80f(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035880f: retq
  0x0000000110358810: mov    0x10(%rsp),%r10
  0x0000000110358815: mov    0x14(%r10),%r14d   ;*getfield nthreads
                                                ; - java.lang.ThreadGroup::remove@18 (line 967)

  0x0000000110358819: test   %r14d,%r14d
  0x000000011035881c: jle    0x000000011035896d  ;*if_icmpge
                                                ; - java.lang.ThreadGroup::remove@21 (line 967)

  0x0000000110358822: mov    0x28(%r10),%r8d    ;*getfield threads
                                                ; - java.lang.ThreadGroup::remove@25 (line 968)

  0x0000000110358826: mov    0xc(%r12,%r8,8),%r10d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)
                                                ; implicit exception: dispatches to 0x0000000110358c46
  0x000000011035882b: test   %r10d,%r10d
  0x000000011035882e: jbe    0x0000000110358c46
  0x0000000110358834: movslq %r10d,%r9
  0x0000000110358837: movslq %r14d,%r11
  0x000000011035883a: dec    %r11
  0x000000011035883d: cmp    %r9,%r11
  0x0000000110358840: jae    0x0000000110358c46  ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@24 (line 968)

  0x0000000110358846: mov    0x10(%r12,%r8,8),%r11d
  0x000000011035884b: lea    (%r12,%r8,8),%rcx  ;*getfield threads
                                                ; - java.lang.ThreadGroup::remove@25 (line 968)

  0x000000011035884f: shl    $0x3,%r11
  0x0000000110358853: mov    $0x1,%edx
  0x0000000110358858: cmp    (%rsp),%r11
  0x000000011035885c: je     0x0000000110358acb  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110358862: mov    %r14d,%edi
  0x0000000110358865: add    $0xfffffffffffffff9,%edi
  0x0000000110358868: mov    $0x80000000,%r8d
  0x000000011035886e: cmp    %edi,%r14d
  0x0000000110358871: cmovl  %r8d,%edi
  0x0000000110358875: cmp    $0x1,%edi
  0x0000000110358878: jle    0x0000000110358caa
  0x000000011035887e: mov    $0x7,%r13d
  0x0000000110358884: nopl   0x0(%rax,%rax,1)
  0x000000011035888c: data32 data32 xchg %ax,%ax  ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@24 (line 968)

  0x0000000110358890: mov    0x10(%rcx,%rdx,4),%r11d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110358895: mov    %edx,%r8d
  0x0000000110358898: inc    %r8d               ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x000000011035889b: shl    $0x3,%r11
  0x000000011035889f: cmp    (%rsp),%r11
  0x00000001103588a3: je     0x0000000110358978  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x00000001103588a9: movslq %edx,%rsi
  0x00000001103588ac: mov    0x14(%rcx,%rsi,4),%r11d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x00000001103588b1: mov    %edx,%r9d
  0x00000001103588b4: add    $0x2,%r9d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x00000001103588b8: shl    $0x3,%r11
  0x00000001103588bc: cmp    (%rsp),%r11
  0x00000001103588c0: je     0x0000000110358983  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x00000001103588c6: mov    0x18(%rcx,%rsi,4),%ebx  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x00000001103588ca: mov    %edx,%r8d
  0x00000001103588cd: add    $0x3,%r8d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x00000001103588d1: mov    %rbx,%r11
  0x00000001103588d4: shl    $0x3,%r11
  0x00000001103588d8: cmp    (%rsp),%r11
  0x00000001103588dc: je     0x000000011035897b  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x00000001103588e2: mov    0x1c(%rcx,%rsi,4),%r11d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x00000001103588e7: mov    %edx,%r9d
  0x00000001103588ea: add    $0x4,%r9d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x00000001103588ee: shl    $0x3,%r11
  0x00000001103588f2: cmp    (%rsp),%r11
  0x00000001103588f6: je     0x0000000110358ac3  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x00000001103588fc: mov    0x20(%rcx,%rsi,4),%ebx  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110358900: mov    %edx,%r8d
  0x0000000110358903: add    $0x5,%r8d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x0000000110358907: mov    %rbx,%r11
  0x000000011035890a: shl    $0x3,%r11
  0x000000011035890e: cmp    (%rsp),%r11
  0x0000000110358912: je     0x000000011035897b  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110358914: mov    0x24(%rcx,%rsi,4),%r11d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110358919: mov    %edx,%r9d
  0x000000011035891c: add    $0x6,%r9d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x0000000110358920: shl    $0x3,%r11
  0x0000000110358924: cmp    (%rsp),%r11
  0x0000000110358928: je     0x0000000110358983  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x000000011035892a: mov    0x28(%rcx,%rsi,4),%ebx  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x000000011035892e: mov    %edx,%r8d
  0x0000000110358931: add    $0x7,%r8d          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x0000000110358935: mov    %rbx,%r11
  0x0000000110358938: shl    $0x3,%r11
  0x000000011035893c: cmp    (%rsp),%r11
  0x0000000110358940: je     0x000000011035897b  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110358942: mov    0x2c(%rcx,%rsi,4),%r9d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110358947: add    $0x8,%edx          ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x000000011035894a: mov    %r9,%r11
  0x000000011035894d: shl    $0x3,%r11
  0x0000000110358951: cmp    (%rsp),%r11
  0x0000000110358955: je     0x0000000110358986  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110358957: cmp    %edi,%edx
  0x0000000110358959: jl     0x0000000110358890  ;*if_icmpge
                                                ; - java.lang.ThreadGroup::remove@21 (line 967)

  0x000000011035895f: cmp    %r14d,%edx
  0x0000000110358962: jge    0x0000000110358a06
  0x0000000110358968: jmpq   0x0000000110358adf
  0x000000011035896d: mov    $0x7,%r13d
  0x0000000110358973: jmpq   0x0000000110358a06
  0x0000000110358978: mov    %edx,%r9d
  0x000000011035897b: mov    %r8d,%edx
  0x000000011035897e: mov    %r9d,%r8d
  0x0000000110358981: jmp    0x0000000110358986
  0x0000000110358983: mov    %r9d,%edx
  0x0000000110358986: mov    %r14d,%r9d
  0x0000000110358989: sub    %r8d,%r9d
  0x000000011035898c: mov    %r14d,%ebx
  0x000000011035898f: dec    %ebx               ;*isub
                                                ; - java.lang.ThreadGroup::remove@52 (line 969)

  0x0000000110358991: mov    0x10(%rsp),%r11
  0x0000000110358996: mov    %ebx,0x14(%r11)    ;*putfield nthreads
                                                ; - java.lang.ThreadGroup::remove@54 (line 969)

  0x000000011035899a: dec    %r9d               ;*isub
                                                ; - java.lang.ThreadGroup::remove@58 (line 969)

  0x000000011035899d: test   %edx,%edx
  0x000000011035899f: jl     0x0000000110358c7e
  0x00000001103589a5: test   %r8d,%r8d
  0x00000001103589a8: jl     0x0000000110358c7e
  0x00000001103589ae: cmp    %r14d,%r10d
  0x00000001103589b1: jb     0x0000000110358c7e
  0x00000001103589b7: cmp    %ebx,%r10d
  0x00000001103589ba: jb     0x0000000110358c7e
  0x00000001103589c0: test   %r9d,%r9d
  0x00000001103589c3: jle    0x0000000110358c75
  0x00000001103589c9: lea    0x10(%rcx,%r8,4),%rsi
  0x00000001103589ce: movslq %r8d,%r10
  0x00000001103589d1: lea    0x14(%rcx,%r10,4),%rdi
  0x00000001103589d6: movslq %r9d,%rdx
  0x00000001103589d9: movabs $0x10ff64ca0,%r10
  0x00000001103589e3: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.lang.ThreadGroup::remove@59 (line 969)

  0x00000001103589e6: mov    0x10(%rsp),%r10
  0x00000001103589eb: mov    0x28(%r10),%ebp    ;*getfield threads
                                                ; - java.lang.ThreadGroup::remove@63 (line 972)

  0x00000001103589ef: mov    0xc(%r12,%rbp,8),%r11d  ; implicit exception: dispatches to 0x0000000110358cb5
  0x00000001103589f4: cmp    %r11d,%ebx
  0x00000001103589f7: jae    0x0000000110358c5d
  0x00000001103589fd: lea    (%r12,%rbp,8),%r10
  0x0000000110358a01: mov    %r12d,0xc(%r10,%r14,4)  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@82 (line 976)

  0x0000000110358a06: mov    0x10(%rsp),%r10
  0x0000000110358a0b: and    (%r10),%r13
  0x0000000110358a0e: cmp    $0x5,%r13
  0x0000000110358a12: je     0x0000000110358804
  0x0000000110358a18: lea    0x20(%rsp),%rax
  0x0000000110358a1d: mov    0x10(%rsp),%r11
  0x0000000110358a22: cmpq   $0x0,(%rax)
  0x0000000110358a29: je     0x0000000110358aa3
  0x0000000110358a2f: mov    (%r11),%r10
  0x0000000110358a32: test   $0x2,%r10
  0x0000000110358a39: je     0x0000000110358a9b
  0x0000000110358a3b: mov    0x16(%r10),%rax
  0x0000000110358a3f: xor    %r15,%rax
  0x0000000110358a42: or     0x26(%r10),%rax
  0x0000000110358a46: jne    0x0000000110358aa3
  0x0000000110358a48: mov    0x36(%r10),%rax
  0x0000000110358a4c: or     0x3e(%r10),%rax
  0x0000000110358a50: jne    0x0000000110358a5c
  0x0000000110358a52: movq   $0x0,0x16(%r10)
  0x0000000110358a5a: jmp    0x0000000110358aa3
  0x0000000110358a5c: cmpq   $0x0,0x46(%r10)
  0x0000000110358a64: je     0x0000000110358a8f
  0x0000000110358a66: movq   $0x0,0x16(%r10)
  0x0000000110358a6e: lock addl $0x0,(%rsp)
  0x0000000110358a73: cmpq   $0x0,0x46(%r10)
  0x0000000110358a7b: jne    0x0000000110358a94
  0x0000000110358a7d: movabs $0x0,%rax
  0x0000000110358a87: lock cmpxchg %r15,0x16(%r10)
  0x0000000110358a8d: jne    0x0000000110358a94
  0x0000000110358a8f: or     $0x1,%eax
  0x0000000110358a92: jmp    0x0000000110358aa3
  0x0000000110358a94: test   $0x0,%eax
  0x0000000110358a99: jmp    0x0000000110358aa3
  0x0000000110358a9b: mov    (%rax),%r10
  0x0000000110358a9e: lock cmpxchg %r10,(%r11)
  0x0000000110358aa3: je     0x0000000110358804
  0x0000000110358aa9: mov    %r11,%rdi
  0x0000000110358aac: lea    0x20(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)

  0x0000000110358ab1: movabs $0x10e087a5a,%r10
  0x0000000110358abb: callq  *%r10              ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@82 (line 976)

  0x0000000110358abe: jmpq   0x0000000110358804
  0x0000000110358ac3: mov    %r9d,%edx
  0x0000000110358ac6: jmpq   0x0000000110358986
  0x0000000110358acb: xor    %r8d,%r8d
  0x0000000110358ace: mov    $0x7,%r13d
  0x0000000110358ad4: jmpq   0x0000000110358986
  0x0000000110358ad9: data32 xchg %ax,%ax
  0x0000000110358adc: mov    %r11d,%edx         ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@24 (line 968)

  0x0000000110358adf: mov    0x10(%rcx,%rdx,4),%r8d  ;*aaload
                                                ; - java.lang.ThreadGroup::remove@29 (line 968)

  0x0000000110358ae4: mov    %edx,%r11d
  0x0000000110358ae7: inc    %r11d              ;*iadd
                                                ; - java.lang.ThreadGroup::remove@40 (line 969)

  0x0000000110358aea: shl    $0x3,%r8
  0x0000000110358aee: cmp    (%rsp),%r8
  0x0000000110358af2: je     0x0000000110358afe  ;*if_acmpne
                                                ; - java.lang.ThreadGroup::remove@31 (line 968)

  0x0000000110358af4: cmp    %r14d,%r11d
  0x0000000110358af7: jl     0x0000000110358adc  ;*if_icmpge
                                                ; - java.lang.ThreadGroup::remove@21 (line 967)

  0x0000000110358af9: jmpq   0x0000000110358a06
  0x0000000110358afe: mov    %edx,%r8d
  0x0000000110358b01: mov    %r11d,%edx
  0x0000000110358b04: jmpq   0x0000000110358986
  0x0000000110358b09: lock cmpxchg %r10,(%rsi)
  0x0000000110358b0e: lea    0x20(%rsp),%rbx
  0x0000000110358b13: mov    (%rsi),%rax
  0x0000000110358b16: test   $0x2,%rax
  0x0000000110358b1c: jne    0x0000000110358b42
  0x0000000110358b1e: or     $0x1,%rax
  0x0000000110358b22: mov    %rax,(%rbx)
  0x0000000110358b25: lock cmpxchg %rbx,(%rsi)
  0x0000000110358b2a: je     0x0000000110358b5b
  0x0000000110358b30: sub    %rsp,%rax
  0x0000000110358b33: and    $0xfffffffffffff007,%rax
  0x0000000110358b3a: mov    %rax,(%rbx)
  0x0000000110358b3d: jmpq   0x0000000110358b5b
  0x0000000110358b42: movq   $0x3,(%rbx)
  0x0000000110358b49: mov    %rax,%rbx
  0x0000000110358b4c: mov    0x16(%rbx),%rax
  0x0000000110358b50: test   %rax,%rax
  0x0000000110358b53: jne    0x0000000110358b5b
  0x0000000110358b55: lock cmpxchg %r15,0x16(%rbx)
  0x0000000110358b5b: je     0x00000001103587dd
  0x0000000110358b61: lea    0x20(%rsp),%rdx
  0x0000000110358b66: mov    %rsi,0x8(%rsp)
  0x0000000110358b6b: callq  0x0000000110018f60  ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=1040}
                                                ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)
                                                ;   {runtime_call}
  0x0000000110358b70: jmpq   0x00000001103587dd
  0x0000000110358b75: test   $0x7,%r8
  0x0000000110358b7c: jne    0x0000000110358b09
  0x0000000110358b7e: test   $0x300,%r8
  0x0000000110358b85: jne    0x0000000110358b94
  0x0000000110358b87: and    $0x37f,%rax
  0x0000000110358b8e: mov    %rax,%r11
  0x0000000110358b91: or     %r15,%r11
  0x0000000110358b94: lock cmpxchg %r11,(%rsi)
  0x0000000110358b99: jne    0x0000000110358b61
  0x0000000110358b9b: jmpq   0x00000001103587dd
  0x0000000110358ba0: lea    0x20(%rsp),%rax
  0x0000000110358ba5: cmpq   $0x0,(%rax)
  0x0000000110358bac: je     0x0000000110358c26
  0x0000000110358bb2: mov    (%r11),%r10
  0x0000000110358bb5: test   $0x2,%r10
  0x0000000110358bbc: je     0x0000000110358c1e
  0x0000000110358bbe: mov    0x16(%r10),%rax
  0x0000000110358bc2: xor    %r15,%rax
  0x0000000110358bc5: or     0x26(%r10),%rax
  0x0000000110358bc9: jne    0x0000000110358c26
  0x0000000110358bcb: mov    0x36(%r10),%rax
  0x0000000110358bcf: or     0x3e(%r10),%rax
  0x0000000110358bd3: jne    0x0000000110358bdf
  0x0000000110358bd5: movq   $0x0,0x16(%r10)
  0x0000000110358bdd: jmp    0x0000000110358c26
  0x0000000110358bdf: cmpq   $0x0,0x46(%r10)
  0x0000000110358be7: je     0x0000000110358c12
  0x0000000110358be9: movq   $0x0,0x16(%r10)
  0x0000000110358bf1: lock addl $0x0,(%rsp)
  0x0000000110358bf6: cmpq   $0x0,0x46(%r10)
  0x0000000110358bfe: jne    0x0000000110358c17
  0x0000000110358c00: movabs $0x0,%rax
  0x0000000110358c0a: lock cmpxchg %r15,0x16(%r10)
  0x0000000110358c10: jne    0x0000000110358c17
  0x0000000110358c12: or     $0x1,%eax
  0x0000000110358c15: jmp    0x0000000110358c26
  0x0000000110358c17: test   $0x0,%eax
  0x0000000110358c1c: jmp    0x0000000110358c26
  0x0000000110358c1e: mov    (%rax),%r10
  0x0000000110358c21: lock cmpxchg %r10,(%r11)
  0x0000000110358c26: je     0x0000000110358804
  0x0000000110358c2c: mov    %r11,%rdi
  0x0000000110358c2f: lea    0x20(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)

  0x0000000110358c34: movabs $0x10e087a5a,%r10
  0x0000000110358c3e: callq  *%r10              ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@12 (line 965)

  0x0000000110358c41: jmpq   0x0000000110358804
  0x0000000110358c46: mov    $0xffffff86,%esi
  0x0000000110358c4b: mov    0x10(%rsp),%rbp
  0x0000000110358c50: data32 xchg %ax,%ax
  0x0000000110358c53: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop off=1272}
                                                ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@24 (line 968)
                                                ;   {runtime_call}
  0x0000000110358c58: callq  0x000000010e0276f4  ;*aload_0
                                                ; - java.lang.ThreadGroup::remove@24 (line 968)
                                                ;   {runtime_call}
  0x0000000110358c5d: mov    $0xffffffe4,%esi
  0x0000000110358c62: mov    %r10,0x8(%rsp)
  0x0000000110358c67: mov    %ebx,0x10(%rsp)
  0x0000000110358c6b: callq  0x000000010ff576a0  ; OopMap{rbp=NarrowOop [8]=Oop off=1296}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110358c70: callq  0x000000010e0276f4  ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110358c75: test   %r9d,%r9d
  0x0000000110358c78: jge    0x00000001103589e6
  0x0000000110358c7e: mov    %ebx,0xc(%rsp)
  0x0000000110358c82: mov    %r14d,0x8(%rsp)
  0x0000000110358c87: mov    %r13,(%rsp)
  0x0000000110358c8b: mov    0x10(%rsp),%rbp
  0x0000000110358c90: mov    %rcx,%rsi
  0x0000000110358c93: callq  0x0000000110019160  ; OopMap{rbp=Oop [16]=Oop off=1336}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.ThreadGroup::remove@59 (line 969)
                                                ;   {runtime_call}
  0x0000000110358c98: mov    (%rsp),%r13
  0x0000000110358c9c: mov    0x8(%rsp),%r14d
  0x0000000110358ca1: mov    0xc(%rsp),%ebx
  0x0000000110358ca5: jmpq   0x00000001103589e6
  0x0000000110358caa: mov    $0x7,%r13d
  0x0000000110358cb0: jmpq   0x000000011035895f
  0x0000000110358cb5: mov    $0xfffffff6,%esi
  0x0000000110358cba: mov    %r10,(%rsp)
  0x0000000110358cbe: mov    %ebx,0x8(%rsp)
  0x0000000110358cc2: nop
  0x0000000110358cc3: callq  0x000000010ff576a0  ; OopMap{[0]=Oop [16]=Oop off=1384}
                                                ;*aastore
                                                ; - java.lang.ThreadGroup::remove@71 (line 972)
                                                ;   {runtime_call}
  0x0000000110358cc8: callq  0x000000010e0276f4  ;*invokestatic arraycopy
                                                ; - java.lang.ThreadGroup::remove@59 (line 969)
                                                ;   {runtime_call}
  0x0000000110358ccd: mov    %rax,%rbx
  0x0000000110358cd0: mov    %rbp,%r11
  0x0000000110358cd3: mov    (%rsp),%r10
  0x0000000110358cd7: and    (%r11),%r10
  0x0000000110358cda: cmp    $0x5,%r10
  0x0000000110358cde: jne    0x0000000110358ced  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@89 (line 976)

  0x0000000110358ce0: mov    %rbx,%rsi
  0x0000000110358ce3: add    $0x30,%rsp
  0x0000000110358ce7: pop    %rbp
  0x0000000110358ce8: jmpq   0x0000000110019060  ;   {runtime_call}
  0x0000000110358ced: lea    0x20(%rsp),%rax
  0x0000000110358cf2: cmpq   $0x0,(%rax)
  0x0000000110358cf9: je     0x0000000110358d73
  0x0000000110358cff: mov    (%r11),%r10
  0x0000000110358d02: test   $0x2,%r10
  0x0000000110358d09: je     0x0000000110358d6b
  0x0000000110358d0b: mov    0x16(%r10),%rax
  0x0000000110358d0f: xor    %r15,%rax
  0x0000000110358d12: or     0x26(%r10),%rax
  0x0000000110358d16: jne    0x0000000110358d73
  0x0000000110358d18: mov    0x36(%r10),%rax
  0x0000000110358d1c: or     0x3e(%r10),%rax
  0x0000000110358d20: jne    0x0000000110358d2c
  0x0000000110358d22: movq   $0x0,0x16(%r10)
  0x0000000110358d2a: jmp    0x0000000110358d73
  0x0000000110358d2c: cmpq   $0x0,0x46(%r10)
  0x0000000110358d34: je     0x0000000110358d5f
  0x0000000110358d36: movq   $0x0,0x16(%r10)
  0x0000000110358d3e: lock addl $0x0,(%rsp)
  0x0000000110358d43: cmpq   $0x0,0x46(%r10)
  0x0000000110358d4b: jne    0x0000000110358d64
  0x0000000110358d4d: movabs $0x0,%rax
  0x0000000110358d57: lock cmpxchg %r15,0x16(%r10)
  0x0000000110358d5d: jne    0x0000000110358d64
  0x0000000110358d5f: or     $0x1,%eax
  0x0000000110358d62: jmp    0x0000000110358d73
  0x0000000110358d64: test   $0x0,%eax
  0x0000000110358d69: jmp    0x0000000110358d73
  0x0000000110358d6b: mov    (%rax),%r10
  0x0000000110358d6e: lock cmpxchg %r10,(%r11)
  0x0000000110358d73: je     0x0000000110358ce0
  0x0000000110358d79: mov    %r11,%rdi
  0x0000000110358d7c: lea    0x20(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.ThreadGroup::remove@3 (line 963)

  0x0000000110358d81: movabs $0x10e087a5a,%r10
  0x0000000110358d8b: callq  *%r10              ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@89 (line 976)

  0x0000000110358d8e: jmpq   0x0000000110358ce0  ;*monitorexit
                                                ; - java.lang.ThreadGroup::remove@82 (line 976)

  0x0000000110358d93: hlt
  0x0000000110358d94: hlt
  0x0000000110358d95: hlt
  0x0000000110358d96: hlt
  0x0000000110358d97: hlt
  0x0000000110358d98: hlt
  0x0000000110358d99: hlt
  0x0000000110358d9a: hlt
  0x0000000110358d9b: hlt
  0x0000000110358d9c: hlt
  0x0000000110358d9d: hlt
  0x0000000110358d9e: hlt
  0x0000000110358d9f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110358da0: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110358da5: callq  0x0000000110358daa
  0x0000000110358daa: subq   $0x5,(%rsp)
  0x0000000110358daf: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110358db4: hlt
  0x0000000110358db5: hlt
  0x0000000110358db6: hlt
  0x0000000110358db7: hlt
Decoding compiled method 0x0000000110356bd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo'
  # this:     rsi:rsi   = 'sun/util/calendar/ZoneInfo'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = '[I'
  # parm2:    r8        = int
  #           [sp+0xb0]  (sp of caller)
  0x0000000110356e00: mov    0x8(%rsi),%r10d
  0x0000000110356e04: shl    $0x3,%r10
  0x0000000110356e08: cmp    %rax,%r10
  0x0000000110356e0b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110356e11: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110356e1c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110356e20: mov    %eax,-0x14000(%rsp)
  0x0000000110356e27: push   %rbp
  0x0000000110356e28: sub    $0xa0,%rsp
  0x0000000110356e2f: mov    %rsi,0x48(%rsp)
  0x0000000110356e34: mov    %rcx,0x50(%rsp)
  0x0000000110356e39: mov    %r8d,0x58(%rsp)
  0x0000000110356e3e: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356e48: mov    0xdc(%rdi),%ebx
  0x0000000110356e4e: add    $0x8,%ebx
  0x0000000110356e51: mov    %ebx,0xdc(%rdi)
  0x0000000110356e57: movabs $0x12722fbe8,%rdi  ;   {metadata({method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356e61: and    $0x0,%ebx
  0x0000000110356e64: cmp    $0x0,%ebx
  0x0000000110356e67: je     0x00000001103578cd  ;*aload_0
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@0 (line 249)

  0x0000000110356e6d: mov    0x24(%rsi),%edi
  0x0000000110356e70: shl    $0x3,%rdi          ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@1 (line 249)

  0x0000000110356e74: cmp    $0x0,%rdi
  0x0000000110356e78: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356e82: movabs $0x108,%rbx
  0x0000000110356e8c: jne    0x0000000110356e9c
  0x0000000110356e92: movabs $0x118,%rbx
  0x0000000110356e9c: mov    (%rdi,%rbx,1),%rax
  0x0000000110356ea0: lea    0x1(%rax),%rax
  0x0000000110356ea4: mov    %rax,(%rdi,%rbx,1)
  0x0000000110356ea8: jne    0x0000000110356f3c  ;*ifnonnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@4 (line 249)

  0x0000000110356eae: mov    %rsi,%rdx
  0x0000000110356eb1: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356ebb: addq   $0x1,0x128(%rdi)
  0x0000000110356ec3: movabs $0x127280958,%rdx  ;   {metadata(method data for {method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356ecd: mov    0xdc(%rdx),%edi
  0x0000000110356ed3: add    $0x8,%edi
  0x0000000110356ed6: mov    %edi,0xdc(%rdx)
  0x0000000110356edc: movabs $0x127230108,%rdx  ;   {metadata({method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356ee6: and    $0x7ffff8,%edi
  0x0000000110356eec: cmp    $0x0,%edi
  0x0000000110356eef: je     0x00000001103578e4
  0x0000000110356ef5: mov    0x10(%rsi),%edx    ;*getfield rawOffset
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@8 (line 250)

  0x0000000110356ef8: mov    0x14(%rsi),%esi    ;*getfield rawOffsetDiff
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@5 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@8 (line 250)

  0x0000000110356efb: add    %esi,%edx
  0x0000000110356efd: cmp    $0x0,%rcx
  0x0000000110356f01: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356f0b: movabs $0x138,%rdi
  0x0000000110356f15: je     0x0000000110356f25
  0x0000000110356f1b: movabs $0x148,%rdi
  0x0000000110356f25: mov    (%rsi,%rdi,1),%rbx
  0x0000000110356f29: lea    0x1(%rbx),%rbx
  0x0000000110356f2d: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110356f31: je     0x0000000110357861
  0x0000000110356f37: jmpq   0x000000011035783d  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@14 (line 251)

  0x0000000110356f3c: mov    0x14(%rsi),%edi    ;*getfield rawOffsetDiff
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@31 (line 258)

  0x0000000110356f3f: movslq %edi,%rdi
  0x0000000110356f42: sub    %rdi,%rdx
  0x0000000110356f45: mov    %rsi,%rdi
  0x0000000110356f48: movabs $0x12727ddd8,%rbx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356f52: addq   $0x1,0x158(%rbx)
  0x0000000110356f5a: mov    %rdx,%rdi
  0x0000000110356f5d: mov    %rdi,%rdx
  0x0000000110356f60: mov    %r8,%rcx
  0x0000000110356f63: mov    %rsi,%rax
  0x0000000110356f66: mov    %rax,%rsi          ;*invokespecial getTransitionIndex
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@41 (line 259)

  0x0000000110356f69: mov    %rdi,0x60(%rsp)
  0x0000000110356f6e: nop
  0x0000000110356f6f: callq  0x000000010ff580a0  ; OopMap{[72]=Oop [80]=Oop off=372}
                                                ;*invokespecial getTransitionIndex
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@41 (line 259)
                                                ;   {optimized virtual_call}
  0x0000000110356f74: cmp    $0x0,%eax
  0x0000000110356f77: movabs $0x12727ddd8,%rcx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356f81: movabs $0x168,%rsi
  0x0000000110356f8b: jge    0x0000000110356f9b
  0x0000000110356f91: movabs $0x178,%rsi
  0x0000000110356f9b: mov    (%rcx,%rsi,1),%rdi
  0x0000000110356f9f: lea    0x1(%rdi),%rdi
  0x0000000110356fa3: mov    %rdi,(%rcx,%rsi,1)
  0x0000000110356fa7: mov    0x50(%rsp),%rcx
  0x0000000110356fac: mov    0x48(%rsp),%rsi
  0x0000000110356fb1: jge    0x0000000110357045  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@48 (line 263)

  0x0000000110356fb7: mov    %rsi,%rax
  0x0000000110356fba: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356fc4: addq   $0x1,0x188(%rdi)
  0x0000000110356fcc: movabs $0x127280958,%rax  ;   {metadata(method data for {method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356fd6: mov    0xdc(%rax),%edi
  0x0000000110356fdc: add    $0x8,%edi
  0x0000000110356fdf: mov    %edi,0xdc(%rax)
  0x0000000110356fe5: movabs $0x127230108,%rax  ;   {metadata({method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110356fef: and    $0x7ffff8,%edi
  0x0000000110356ff5: cmp    $0x0,%edi
  0x0000000110356ff8: je     0x00000001103578fb
  0x0000000110356ffe: mov    0x10(%rsi),%eax    ;*getfield rawOffset
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@52 (line 264)

  0x0000000110357001: mov    0x14(%rsi),%esi    ;*getfield rawOffsetDiff
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@5 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@52 (line 264)

  0x0000000110357004: add    %esi,%eax
  0x0000000110357006: cmp    $0x0,%rcx
  0x000000011035700a: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357014: movabs $0x198,%rdi
  0x000000011035701e: je     0x000000011035702e
  0x0000000110357024: movabs $0x1a8,%rdi
  0x000000011035702e: mov    (%rsi,%rdi,1),%rbx
  0x0000000110357032: lea    0x1(%rbx),%rbx
  0x0000000110357036: mov    %rbx,(%rsi,%rdi,1)
  0x000000011035703a: je     0x000000011035782e
  0x0000000110357040: jmpq   0x000000011035780a  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@58 (line 265)

  0x0000000110357045: mov    0x24(%rsi),%edi
  0x0000000110357048: shl    $0x3,%rdi          ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@76 (line 272)

  0x000000011035704c: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@79 (line 272)
                                                ; implicit exception: dispatches to 0x0000000110357912
  0x000000011035704f: cmp    %ebx,%eax
  0x0000000110357051: movabs $0x12727ddd8,%rbx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035705b: movabs $0x1b8,%rdx
  0x0000000110357065: jge    0x0000000110357075
  0x000000011035706b: movabs $0x1c8,%rdx
  0x0000000110357075: mov    (%rbx,%rdx,1),%r8
  0x0000000110357079: lea    0x1(%r8),%r8
  0x000000011035707d: mov    %r8,(%rbx,%rdx,1)
  0x0000000110357081: jge    0x0000000110357179  ;*if_icmpge
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@80 (line 272)

  0x0000000110357087: movslq %eax,%rax
  0x000000011035708a: mov    0x10(%rdi,%rax,8),%rbx  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@89 (line 273)

  0x000000011035708f: mov    0x28(%rsi),%eax
  0x0000000110357092: shl    $0x3,%rax          ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@93 (line 274)

  0x0000000110357096: movabs $0xf,%rdi
  0x00000001103570a0: mov    %rbx,%rdx
  0x00000001103570a3: and    %rdi,%rdx
  0x00000001103570a6: mov    %edx,%edx
  0x00000001103570a8: movslq %edx,%rdi
  0x00000001103570ab: cmp    0xc(%rax),%edx     ; implicit exception: dispatches to 0x0000000110357917
  0x00000001103570ae: jae    0x0000000110357921
  0x00000001103570b4: mov    0x10(%rax,%rdi,4),%edi  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)

  0x00000001103570b8: mov    0x14(%rsi),%esi    ;*getfield rawOffsetDiff
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@105 (line 274)

  0x00000001103570bb: add    %esi,%edi
  0x00000001103570bd: cmp    $0x0,%rcx
  0x00000001103570c1: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103570cb: movabs $0x1d8,%rdx
  0x00000001103570d5: je     0x00000001103570e5
  0x00000001103570db: movabs $0x1e8,%rdx
  0x00000001103570e5: mov    (%rsi,%rdx,1),%r8
  0x00000001103570e9: lea    0x1(%r8),%r8
  0x00000001103570ed: mov    %r8,(%rsi,%rdx,1)
  0x00000001103570f1: je     0x00000001103577f8  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@112 (line 275)

  0x00000001103570f7: mov    $0x4,%ecx
  0x00000001103570fc: shr    %cl,%rbx
  0x00000001103570ff: movabs $0xf,%rsi
  0x0000000110357109: and    %rsi,%rbx
  0x000000011035710c: mov    %ebx,%ebx
  0x000000011035710e: cmp    $0x0,%ebx
  0x0000000110357111: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035711b: movabs $0x1f8,%rcx
  0x0000000110357125: jne    0x0000000110357135
  0x000000011035712b: movabs $0x208,%rcx
  0x0000000110357135: mov    (%rsi,%rcx,1),%r8
  0x0000000110357139: lea    0x1(%r8),%r8
  0x000000011035713d: mov    %r8,(%rsi,%rcx,1)
  0x0000000110357141: jne    0x0000000110357161  ;*ifne
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@128 (line 277)

  0x0000000110357147: movabs $0x12727ddd8,%rax  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357151: incl   0x218(%rax)
  0x0000000110357157: mov    $0x0,%esi
  0x000000011035715c: jmpq   0x00000001103577ce  ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@132 (line 277)

  0x0000000110357161: movslq %ebx,%rsi
  0x0000000110357164: cmp    0xc(%rax),%ebx
  0x0000000110357167: jae    0x000000011035792a
  0x000000011035716d: mov    0x10(%rax,%rsi,4),%eax  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@141 (line 277)

  0x0000000110357171: mov    %rax,%rsi
  0x0000000110357174: jmpq   0x00000001103577ce  ;*istore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@142 (line 277)

  0x0000000110357179: mov    %rsi,%rax
  0x000000011035717c: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357186: addq   $0x1,0x230(%rdi)
  0x000000011035718e: lea    0x80(%rsp),%rdi
  0x0000000110357196: mov    %rsi,0x8(%rdi)
  0x000000011035719a: mov    (%rsi),%rax
  0x000000011035719d: mov    %rax,%rbx
  0x00000001103571a0: and    $0x7,%rbx
  0x00000001103571a4: cmp    $0x5,%rbx
  0x00000001103571a8: jne    0x000000011035722f
  0x00000001103571ae: mov    0x8(%rsi),%ebx
  0x00000001103571b1: shl    $0x3,%rbx
  0x00000001103571b5: mov    0xa8(%rbx),%rbx
  0x00000001103571bc: or     %r15,%rbx
  0x00000001103571bf: xor    %rax,%rbx
  0x00000001103571c2: and    $0xffffffffffffff87,%rbx
  0x00000001103571c6: je     0x0000000110357257
  0x00000001103571cc: test   $0x7,%rbx
  0x00000001103571d3: jne    0x000000011035721c
  0x00000001103571d5: test   $0x300,%rbx
  0x00000001103571dc: jne    0x00000001103571fb
  0x00000001103571de: and    $0x37f,%rax
  0x00000001103571e5: mov    %rax,%rbx
  0x00000001103571e8: or     %r15,%rbx
  0x00000001103571eb: lock cmpxchg %rbx,(%rsi)
  0x00000001103571f0: jne    0x0000000110357933
  0x00000001103571f6: jmpq   0x0000000110357257
  0x00000001103571fb: mov    0x8(%rsi),%ebx
  0x00000001103571fe: shl    $0x3,%rbx
  0x0000000110357202: mov    0xa8(%rbx),%rbx
  0x0000000110357209: or     %r15,%rbx
  0x000000011035720c: lock cmpxchg %rbx,(%rsi)
  0x0000000110357211: jne    0x0000000110357933
  0x0000000110357217: jmpq   0x0000000110357257
  0x000000011035721c: mov    0x8(%rsi),%ebx
  0x000000011035721f: shl    $0x3,%rbx
  0x0000000110357223: mov    0xa8(%rbx),%rbx
  0x000000011035722a: lock cmpxchg %rbx,(%rsi)
  0x000000011035722f: mov    (%rsi),%rax
  0x0000000110357232: or     $0x1,%rax
  0x0000000110357236: mov    %rax,(%rdi)
  0x0000000110357239: lock cmpxchg %rdi,(%rsi)
  0x000000011035723e: je     0x0000000110357257
  0x0000000110357244: sub    %rsp,%rax
  0x0000000110357247: and    $0xfffffffffffff007,%rax
  0x000000011035724e: mov    %rax,(%rdi)
  0x0000000110357251: jne    0x0000000110357933  ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@-1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x0000000110357257: movabs $0x127281158,%rdi  ;   {metadata(method data for {method} {0x00000001272307b8} 'getLastRule' '()Ljava/util/SimpleTimeZone;' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357261: mov    0xdc(%rdi),%ebx
  0x0000000110357267: add    $0x8,%ebx
  0x000000011035726a: mov    %ebx,0xdc(%rdi)
  0x0000000110357270: movabs $0x1272307b8,%rdi  ;   {metadata({method} {0x00000001272307b8} 'getLastRule' '()Ljava/util/SimpleTimeZone;' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035727a: and    $0x7ffff8,%ebx
  0x0000000110357280: cmp    $0x0,%ebx
  0x0000000110357283: je     0x0000000110357946
  0x0000000110357289: mov    0x30(%rsi),%edi
  0x000000011035728c: shl    $0x3,%rdi          ;*getfield lastRule
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x0000000110357290: cmp    $0x0,%rdi
  0x0000000110357294: movabs $0x127281158,%rdi  ;   {metadata(method data for {method} {0x00000001272307b8} 'getLastRule' '()Ljava/util/SimpleTimeZone;' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035729e: movabs $0x108,%rbx
  0x00000001103572a8: jne    0x00000001103572b8
  0x00000001103572ae: movabs $0x118,%rbx
  0x00000001103572b8: mov    (%rdi,%rbx,1),%rax
  0x00000001103572bc: lea    0x1(%rax),%rax
  0x00000001103572c0: mov    %rax,(%rdi,%rbx,1)
  0x00000001103572c4: jne    0x0000000110357321  ;*ifnonnull
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@4 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x00000001103572ca: mov    %rsi,%rdi
  0x00000001103572cd: movabs $0x127281158,%rbx  ;   {metadata(method data for {method} {0x00000001272307b8} 'getLastRule' '()Ljava/util/SimpleTimeZone;' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103572d7: movabs $0x7c0055508,%r10  ;   {metadata('sun/util/calendar/ZoneInfo')}
  0x00000001103572e1: mov    %r10,0x130(%rbx)
  0x00000001103572e8: addq   $0x1,0x138(%rbx)
  0x00000001103572f0: mov    %rsi,%rdi
  0x00000001103572f3: mov    %rdi,%rsi          ;*invokevirtual getLastRuleInstance
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@9 (line 601)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x00000001103572f6: nop
  0x00000001103572f7: callq  0x000000010ff580a0  ; OopMap{[72]=Oop [80]=Oop [136]=Oop off=1276}
                                                ;*invokevirtual getLastRuleInstance
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@9 (line 601)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)
                                                ;   {optimized virtual_call}
  0x00000001103572fc: mov    0x48(%rsp),%rsi
  0x0000000110357301: mov    %rax,%r10
  0x0000000110357304: shr    $0x3,%r10
  0x0000000110357308: mov    %r10d,0x30(%rsi)
  0x000000011035730c: mov    %rsi,%rax
  0x000000011035730f: shr    $0x9,%rax
  0x0000000110357313: movabs $0x109ac3000,%rdi
  0x000000011035731d: movb   $0x0,(%rax,%rdi,1)  ;*putfield lastRule
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@12 (line 601)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x0000000110357321: mov    0x30(%rsi),%edi
  0x0000000110357324: shl    $0x3,%rdi          ;*getfield lastRule
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@16 (line 603)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x0000000110357328: lea    0x80(%rsp),%rax
  0x0000000110357330: mov    0x8(%rax),%rdx
  0x0000000110357334: mov    (%rdx),%rbx
  0x0000000110357337: and    $0x7,%rbx
  0x000000011035733b: cmp    $0x5,%rbx
  0x000000011035733f: je     0x000000011035735c
  0x0000000110357345: mov    (%rax),%rbx
  0x0000000110357348: test   %rbx,%rbx
  0x000000011035734b: je     0x000000011035735c
  0x0000000110357351: lock cmpxchg %rbx,(%rdx)
  0x0000000110357356: jne    0x000000011035795d  ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@-1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x000000011035735c: cmp    $0x0,%rdi
  0x0000000110357360: movabs $0x12727ddd8,%rbx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035736a: movabs $0x240,%rax
  0x0000000110357374: je     0x0000000110357384
  0x000000011035737a: movabs $0x250,%rax
  0x0000000110357384: mov    (%rbx,%rax,1),%rdx
  0x0000000110357388: lea    0x1(%rdx),%rdx
  0x000000011035738c: mov    %rdx,(%rbx,%rax,1)
  0x0000000110357390: je     0x00000001103576dc  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@168 (line 287)

  0x0000000110357396: cmp    (%rdi),%rax        ; implicit exception: dispatches to 0x0000000110357973
  0x0000000110357399: mov    %rdi,%rbx
  0x000000011035739c: movabs $0x12727ddd8,%rax  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103573a6: mov    0x8(%rbx),%ebx
  0x00000001103573a9: shl    $0x3,%rbx
  0x00000001103573ad: cmp    0x268(%rax),%rbx
  0x00000001103573b4: jne    0x00000001103573c3
  0x00000001103573b6: addq   $0x1,0x270(%rax)
  0x00000001103573be: jmpq   0x0000000110357429
  0x00000001103573c3: cmp    0x278(%rax),%rbx
  0x00000001103573ca: jne    0x00000001103573d9
  0x00000001103573cc: addq   $0x1,0x280(%rax)
  0x00000001103573d4: jmpq   0x0000000110357429
  0x00000001103573d9: cmpq   $0x0,0x268(%rax)
  0x00000001103573e4: jne    0x00000001103573fd
  0x00000001103573e6: mov    %rbx,0x268(%rax)
  0x00000001103573ed: movq   $0x1,0x270(%rax)
  0x00000001103573f8: jmpq   0x0000000110357429
  0x00000001103573fd: cmpq   $0x0,0x278(%rax)
  0x0000000110357408: jne    0x0000000110357421
  0x000000011035740a: mov    %rbx,0x278(%rax)
  0x0000000110357411: movq   $0x1,0x280(%rax)
  0x000000011035741c: jmpq   0x0000000110357429
  0x0000000110357421: addq   $0x1,0x260(%rax)
  0x0000000110357429: mov    %rdi,%rsi          ;*invokevirtual getRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@173 (line 288)

  0x000000011035742c: mov    %rdi,0x68(%rsp)
  0x0000000110357431: nop
  0x0000000110357432: nop
  0x0000000110357433: nop
  0x0000000110357434: nop
  0x0000000110357435: movabs $0xffffffffffffffff,%rax
  0x000000011035743f: callq  0x000000010ff582e0  ; OopMap{[80]=Oop [72]=Oop [104]=Oop off=1604}
                                                ;*invokevirtual getRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@173 (line 288)
                                                ;   {virtual_call}
  0x0000000110357444: mov    0x58(%rsp),%r8d
  0x0000000110357449: cmp    $0x0,%r8d
  0x000000011035744d: movabs $0x12727ddd8,%rdx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357457: movabs $0x290,%rsi
  0x0000000110357461: je     0x0000000110357471
  0x0000000110357467: movabs $0x2a0,%rsi
  0x0000000110357471: mov    (%rdx,%rsi,1),%rdi
  0x0000000110357475: lea    0x1(%rdi),%rdi
  0x0000000110357479: mov    %rdi,(%rdx,%rsi,1)  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@183 (line 290)

  0x000000011035747d: mov    0x60(%rsp),%rdx    ;*aload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@196 (line 293)

  0x0000000110357482: je     0x0000000110357496  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@183 (line 290)

  0x0000000110357488: mov    0x48(%rsp),%rsi
  0x000000011035748d: mov    0x10(%rsi),%edi    ;*getfield rawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@189 (line 291)

  0x0000000110357490: movslq %edi,%rdi
  0x0000000110357493: sub    %rdi,%rdx
  0x0000000110357496: mov    %eax,0x5c(%rsp)
  0x000000011035749a: mov    0x68(%rsp),%rdi
  0x000000011035749f: movabs $0x12727ddd8,%rbx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103574a9: mov    0x8(%rdi),%edi
  0x00000001103574ac: shl    $0x3,%rdi
  0x00000001103574b0: cmp    0x2b8(%rbx),%rdi
  0x00000001103574b7: jne    0x00000001103574c6
  0x00000001103574b9: addq   $0x1,0x2c0(%rbx)
  0x00000001103574c1: jmpq   0x000000011035752c
  0x00000001103574c6: cmp    0x2c8(%rbx),%rdi
  0x00000001103574cd: jne    0x00000001103574dc
  0x00000001103574cf: addq   $0x1,0x2d0(%rbx)
  0x00000001103574d7: jmpq   0x000000011035752c
  0x00000001103574dc: cmpq   $0x0,0x2b8(%rbx)
  0x00000001103574e7: jne    0x0000000110357500
  0x00000001103574e9: mov    %rdi,0x2b8(%rbx)
  0x00000001103574f0: movq   $0x1,0x2c0(%rbx)
  0x00000001103574fb: jmpq   0x000000011035752c
  0x0000000110357500: cmpq   $0x0,0x2c8(%rbx)
  0x000000011035750b: jne    0x0000000110357524
  0x000000011035750d: mov    %rdi,0x2c8(%rbx)
  0x0000000110357514: movq   $0x1,0x2d0(%rbx)
  0x000000011035751f: jmpq   0x000000011035752c
  0x0000000110357524: addq   $0x1,0x2b0(%rbx)
  0x000000011035752c: mov    %rdx,%rdi
  0x000000011035752f: mov    %rdi,%rdx
  0x0000000110357532: mov    0x68(%rsp),%rsi    ;*invokevirtual getOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@200 (line 293)

  0x0000000110357537: mov    %rdi,0x70(%rsp)
  0x000000011035753c: nop
  0x000000011035753d: movabs $0xffffffffffffffff,%rax
  0x0000000110357547: callq  0x000000010ff582e0  ; OopMap{[80]=Oop [104]=Oop [72]=Oop off=1868}
                                                ;*invokevirtual getOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@200 (line 293)
                                                ;   {virtual_call}
  0x000000011035754c: mov    0x48(%rsp),%rsi
  0x0000000110357551: mov    0x10(%rsi),%edx    ;*getfield rawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@204 (line 293)

  0x0000000110357554: sub    %edx,%eax
  0x0000000110357556: cmp    $0x0,%eax
  0x0000000110357559: movabs $0x12727ddd8,%rdx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357563: movabs $0x2e0,%rsi
  0x000000011035756d: jle    0x000000011035757d
  0x0000000110357573: movabs $0x2f0,%rsi
  0x000000011035757d: mov    (%rdx,%rsi,1),%rdi
  0x0000000110357581: lea    0x1(%rdi),%rdi
  0x0000000110357585: mov    %rdi,(%rdx,%rsi,1)
  0x0000000110357589: jle    0x0000000110357694  ;*ifle
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@212 (line 296)

  0x000000011035758f: mov    0x70(%rsp),%rdx
  0x0000000110357594: mov    0x68(%rsp),%rdi
  0x0000000110357599: mov    %rdi,%rsi
  0x000000011035759c: movabs $0x12727ddd8,%rbx  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103575a6: mov    0x8(%rsi),%esi
  0x00000001103575a9: shl    $0x3,%rsi
  0x00000001103575ad: cmp    0x308(%rbx),%rsi
  0x00000001103575b4: jne    0x00000001103575c3
  0x00000001103575b6: addq   $0x1,0x310(%rbx)
  0x00000001103575be: jmpq   0x0000000110357629
  0x00000001103575c3: cmp    0x318(%rbx),%rsi
  0x00000001103575ca: jne    0x00000001103575d9
  0x00000001103575cc: addq   $0x1,0x320(%rbx)
  0x00000001103575d4: jmpq   0x0000000110357629
  0x00000001103575d9: cmpq   $0x0,0x308(%rbx)
  0x00000001103575e4: jne    0x00000001103575fd
  0x00000001103575e6: mov    %rsi,0x308(%rbx)
  0x00000001103575ed: movq   $0x1,0x310(%rbx)
  0x00000001103575f8: jmpq   0x0000000110357629
  0x00000001103575fd: cmpq   $0x0,0x318(%rbx)
  0x0000000110357608: jne    0x0000000110357621
  0x000000011035760a: mov    %rsi,0x318(%rbx)
  0x0000000110357611: movq   $0x1,0x320(%rbx)
  0x000000011035761c: jmpq   0x0000000110357629
  0x0000000110357621: addq   $0x1,0x300(%rbx)
  0x0000000110357629: movslq %eax,%rsi
  0x000000011035762c: sub    %rsi,%rdx
  0x000000011035762f: mov    %rdi,%rsi          ;*invokevirtual getOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@223 (line 296)

  0x0000000110357632: mov    %eax,0x78(%rsp)
  0x0000000110357636: nop
  0x0000000110357637: nop
  0x0000000110357638: nop
  0x0000000110357639: nop
  0x000000011035763a: nop
  0x000000011035763b: nop
  0x000000011035763c: nop
  0x000000011035763d: movabs $0xffffffffffffffff,%rax
  0x0000000110357647: callq  0x000000010ff582e0  ; OopMap{[80]=Oop off=2124}
                                                ;*invokevirtual getOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@223 (line 296)
                                                ;   {virtual_call}
  0x000000011035764c: cmp    0x5c(%rsp),%eax
  0x0000000110357650: movabs $0x12727ddd8,%rax  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035765a: movabs $0x330,%rsi
  0x0000000110357664: jne    0x0000000110357674
  0x000000011035766a: movabs $0x340,%rsi
  0x0000000110357674: mov    (%rax,%rsi,1),%rdi
  0x0000000110357678: lea    0x1(%rdi),%rdi
  0x000000011035767c: mov    %rdi,(%rax,%rsi,1)
  0x0000000110357680: je     0x000000011035768f  ;*if_icmpne
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@228 (line 296)

  0x0000000110357686: mov    0x78(%rsp),%eax
  0x000000011035768a: jmpq   0x0000000110357694
  0x000000011035768f: mov    $0x0,%eax          ;*aload_3
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@234 (line 300)

  0x0000000110357694: mov    0x50(%rsp),%rcx
  0x0000000110357699: cmp    $0x0,%rcx
  0x000000011035769d: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103576a7: movabs $0x350,%rdi
  0x00000001103576b1: je     0x00000001103576c1
  0x00000001103576b7: movabs $0x360,%rdi
  0x00000001103576c1: mov    (%rsi,%rdi,1),%rbx
  0x00000001103576c5: lea    0x1(%rbx),%rbx
  0x00000001103576c9: mov    %rbx,(%rsi,%rdi,1)
  0x00000001103576cd: mov    0x5c(%rsp),%esi
  0x00000001103576d1: je     0x00000001103577bd
  0x00000001103576d7: jmpq   0x000000011035779d  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@235 (line 300)

  0x00000001103576dc: mov    0x50(%rsp),%rcx
  0x00000001103576e1: mov    %rsi,%rax
  0x00000001103576e4: movabs $0x12727ddd8,%rdi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103576ee: addq   $0x1,0x370(%rdi)
  0x00000001103576f6: movabs $0x127280958,%rax  ;   {metadata(method data for {method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357700: mov    0xdc(%rax),%edi
  0x0000000110357706: add    $0x8,%edi
  0x0000000110357709: mov    %edi,0xdc(%rax)
  0x000000011035770f: movabs $0x127230108,%rax  ;   {metadata({method} {0x0000000127230108} 'getLastRawOffset' '()I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110357719: and    $0x7ffff8,%edi
  0x000000011035771f: cmp    $0x0,%edi
  0x0000000110357722: je     0x0000000110357978
  0x0000000110357728: mov    0x10(%rsi),%eax    ;*getfield rawOffset
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@255 (line 306)

  0x000000011035772b: mov    0x14(%rsi),%esi    ;*getfield rawOffsetDiff
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@5 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@255 (line 306)

  0x000000011035772e: add    %esi,%eax
  0x0000000110357730: cmp    $0x0,%rcx
  0x0000000110357734: movabs $0x12727ddd8,%rsi  ;   {metadata(method data for {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035773e: movabs $0x380,%rdi
  0x0000000110357748: je     0x0000000110357758
  0x000000011035774e: movabs $0x390,%rdi
  0x0000000110357758: mov    (%rsi,%rdi,1),%rbx
  0x000000011035775c: lea    0x1(%rbx),%rbx
  0x0000000110357760: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110357764: je     0x000000011035778e  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@261 (line 307)

  0x000000011035776a: cmpl   $0x0,0xc(%rcx)     ; implicit exception: dispatches to 0x000000011035798f
  0x0000000110357771: jbe    0x0000000110357999
  0x0000000110357777: mov    %eax,0x10(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)

  0x000000011035777a: cmpl   $0x1,0xc(%rcx)
  0x0000000110357781: jbe    0x00000001103579a6
  0x0000000110357787: movl   $0x0,0x14(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@272 (line 309)

  0x000000011035778e: add    $0xa0,%rsp
  0x0000000110357795: pop    %rbp
  0x0000000110357796: test   %eax,-0x373e69c(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035779c: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@275 (line 311)

  0x000000011035779d: cmpl   $0x0,0xc(%rcx)     ; implicit exception: dispatches to 0x00000001103579b3
  0x00000001103577a4: jbe    0x00000001103579bd
  0x00000001103577aa: mov    %esi,0x10(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@242 (line 301)

  0x00000001103577ad: cmpl   $0x1,0xc(%rcx)
  0x00000001103577b4: jbe    0x00000001103579ca
  0x00000001103577ba: mov    %eax,0x14(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@247 (line 302)

  0x00000001103577bd: add    %esi,%eax
  0x00000001103577bf: add    $0xa0,%rsp
  0x00000001103577c6: pop    %rbp
  0x00000001103577c7: test   %eax,-0x373e6cd(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103577cd: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@253 (line 304)

  0x00000001103577ce: mov    0x50(%rsp),%rcx
  0x00000001103577d3: mov    %rdi,%rax
  0x00000001103577d6: sub    %esi,%eax
  0x00000001103577d8: cmpl   $0x0,0xc(%rcx)     ; implicit exception: dispatches to 0x00000001103579d7
  0x00000001103577df: jbe    0x00000001103579e1
  0x00000001103577e5: mov    %eax,0x10(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)

  0x00000001103577e8: cmpl   $0x1,0xc(%rcx)
  0x00000001103577ef: jbe    0x00000001103579ee
  0x00000001103577f5: mov    %esi,0x14(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@156 (line 279)

  0x00000001103577f8: mov    %rdi,%rax
  0x00000001103577fb: add    $0xa0,%rsp
  0x0000000110357802: pop    %rbp
  0x0000000110357803: test   %eax,-0x373e709(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110357809: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@159 (line 281)

  0x000000011035780a: cmpl   $0x0,0xc(%rcx)     ; implicit exception: dispatches to 0x00000001103579fb
  0x0000000110357811: jbe    0x0000000110357a05
  0x0000000110357817: mov    %eax,0x10(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)

  0x000000011035781a: cmpl   $0x1,0xc(%rcx)
  0x0000000110357821: jbe    0x0000000110357a12
  0x0000000110357827: movl   $0x0,0x14(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@69 (line 267)

  0x000000011035782e: add    $0xa0,%rsp
  0x0000000110357835: pop    %rbp
  0x0000000110357836: test   %eax,-0x373e73c(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035783c: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@72 (line 269)

  0x000000011035783d: cmpl   $0x0,0xc(%rcx)     ; implicit exception: dispatches to 0x0000000110357a1f
  0x0000000110357844: jbe    0x0000000110357a29
  0x000000011035784a: mov    %edx,0x10(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)

  0x000000011035784d: cmpl   $0x1,0xc(%rcx)
  0x0000000110357854: jbe    0x0000000110357a36
  0x000000011035785a: movl   $0x0,0x14(%rcx)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@25 (line 253)

  0x0000000110357861: mov    %rdx,%rax
  0x0000000110357864: add    $0xa0,%rsp
  0x000000011035786b: pop    %rbp
  0x000000011035786c: test   %eax,-0x373e772(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110357872: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@28 (line 255)

  0x0000000110357873: mov    0x2a8(%r15),%rax
  0x000000011035787a: xor    %r10,%r10
  0x000000011035787d: mov    %r10,0x2a8(%r15)
  0x0000000110357884: xor    %r10,%r10
  0x0000000110357887: mov    %r10,0x2b0(%r15)
  0x000000011035788e: mov    %rax,%rsi
  0x0000000110357891: lea    0x80(%rsp),%rax
  0x0000000110357899: mov    0x8(%rax),%rbx
  0x000000011035789d: mov    (%rbx),%rdi
  0x00000001103578a0: and    $0x7,%rdi
  0x00000001103578a4: cmp    $0x5,%rdi
  0x00000001103578a8: je     0x00000001103578c5
  0x00000001103578ae: mov    (%rax),%rdi
  0x00000001103578b1: test   %rdi,%rdi
  0x00000001103578b4: je     0x00000001103578c5
  0x00000001103578ba: lock cmpxchg %rdi,(%rbx)
  0x00000001103578bf: jne    0x0000000110357a43  ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@-1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x00000001103578c5: mov    %rsi,%rax
  0x00000001103578c8: jmpq   0x0000000110357a84
  0x00000001103578cd: mov    %rdi,0x8(%rsp)
  0x00000001103578d2: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103578da: callq  0x00000001100129e0  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop off=2783}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@-1 (line 249)
                                                ;   {runtime_call}
  0x00000001103578df: jmpq   0x0000000110356e6d
  0x00000001103578e4: mov    %rdx,0x8(%rsp)
  0x00000001103578e9: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103578f1: callq  0x00000001100129e0  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop off=2806}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@-1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@8 (line 250)
                                                ;   {runtime_call}
  0x00000001103578f6: jmpq   0x0000000110356ef5
  0x00000001103578fb: mov    %rax,0x8(%rsp)
  0x0000000110357900: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110357908: callq  0x00000001100129e0  ; OopMap{rcx=Oop [80]=Oop rsi=Oop [72]=Oop off=2829}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@-1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@52 (line 264)
                                                ;   {runtime_call}
  0x000000011035790d: jmpq   0x0000000110356ffe
  0x0000000110357912: callq  0x000000011000e080  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop rdi=Oop off=2839}
                                                ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@79 (line 272)
                                                ;   {runtime_call}
  0x0000000110357917: callq  0x000000011000e080  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop rax=Oop off=2844}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x000000011035791c: callq  0x000000011000e080  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop rax=Oop off=2849}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x0000000110357921: mov    %rdx,(%rsp)
  0x0000000110357925: callq  0x000000010ff80440  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop rax=Oop off=2858}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x000000011035792a: mov    %rbx,(%rsp)
  0x000000011035792e: callq  0x000000010ff80440  ; OopMap{[80]=Oop rax=Oop off=2867}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@141 (line 277)
                                                ;   {runtime_call}
  0x0000000110357933: mov    %rsi,0x8(%rsp)
  0x0000000110357938: mov    %rdi,(%rsp)
  0x000000011035793c: callq  0x0000000110010c20  ; OopMap{[80]=Oop rsi=Oop [72]=Oop [136]=Oop off=2881}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@-1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)
                                                ;   {runtime_call}
  0x0000000110357941: jmpq   0x0000000110357257
  0x0000000110357946: mov    %rdi,0x8(%rsp)
  0x000000011035794b: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110357953: callq  0x00000001100129e0  ; OopMap{[80]=Oop rsi=Oop [72]=Oop [136]=Oop off=2904}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRule@-1 (line 600)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)
                                                ;   {runtime_call}
  0x0000000110357958: jmpq   0x0000000110357289
  0x000000011035795d: lea    0x80(%rsp),%rax
  0x0000000110357965: mov    %rax,(%rsp)
  0x0000000110357969: callq  0x0000000110011060  ;   {runtime_call}
  0x000000011035796e: jmpq   0x000000011035735c
  0x0000000110357973: callq  0x000000011000e080  ; OopMap{[80]=Oop rdi=Oop [72]=Oop off=2936}
                                                ;*invokevirtual getRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@173 (line 288)
                                                ;   {runtime_call}
  0x0000000110357978: mov    %rax,0x8(%rsp)
  0x000000011035797d: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110357985: callq  0x00000001100129e0  ; OopMap{rsi=Oop [72]=Oop rcx=Oop [80]=Oop off=2954}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getLastRawOffset@-1 (line 444)
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@255 (line 306)
                                                ;   {runtime_call}
  0x000000011035798a: jmpq   0x0000000110357728
  0x000000011035798f: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=2964}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)
                                                ;   {runtime_call}
  0x0000000110357994: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=2969}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)
                                                ;   {runtime_call}
  0x0000000110357999: movq   $0x0,(%rsp)
  0x00000001103579a1: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=2982}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)
                                                ;   {runtime_call}
  0x00000001103579a6: movq   $0x1,(%rsp)
  0x00000001103579ae: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=2995}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@272 (line 309)
                                                ;   {runtime_call}
  0x00000001103579b3: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3000}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@242 (line 301)
                                                ;   {runtime_call}
  0x00000001103579b8: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3005}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@242 (line 301)
                                                ;   {runtime_call}
  0x00000001103579bd: movq   $0x0,(%rsp)
  0x00000001103579c5: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3018}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@242 (line 301)
                                                ;   {runtime_call}
  0x00000001103579ca: movq   $0x1,(%rsp)
  0x00000001103579d2: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3031}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@247 (line 302)
                                                ;   {runtime_call}
  0x00000001103579d7: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3036}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)
                                                ;   {runtime_call}
  0x00000001103579dc: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3041}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)
                                                ;   {runtime_call}
  0x00000001103579e1: movq   $0x0,(%rsp)
  0x00000001103579e9: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3054}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)
                                                ;   {runtime_call}
  0x00000001103579ee: movq   $0x1,(%rsp)
  0x00000001103579f6: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3067}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@156 (line 279)
                                                ;   {runtime_call}
  0x00000001103579fb: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3072}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)
                                                ;   {runtime_call}
  0x0000000110357a00: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3077}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)
                                                ;   {runtime_call}
  0x0000000110357a05: movq   $0x0,(%rsp)
  0x0000000110357a0d: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3090}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)
                                                ;   {runtime_call}
  0x0000000110357a12: movq   $0x1,(%rsp)
  0x0000000110357a1a: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3103}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@69 (line 267)
                                                ;   {runtime_call}
  0x0000000110357a1f: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3108}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)
                                                ;   {runtime_call}
  0x0000000110357a24: callq  0x000000011000e080  ; OopMap{rcx=Oop [80]=Oop off=3113}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)
                                                ;   {runtime_call}
  0x0000000110357a29: movq   $0x0,(%rsp)
  0x0000000110357a31: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3126}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)
                                                ;   {runtime_call}
  0x0000000110357a36: movq   $0x1,(%rsp)
  0x0000000110357a3e: callq  0x000000010ff80440  ; OopMap{rcx=Oop [80]=Oop off=3139}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@25 (line 253)
                                                ;   {runtime_call}
  0x0000000110357a43: lea    0x80(%rsp),%rax
  0x0000000110357a4b: mov    %rax,(%rsp)
  0x0000000110357a4f: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110357a54: jmpq   0x00000001103578c5
  0x0000000110357a59: nop
  0x0000000110357a5a: nop
  0x0000000110357a5b: mov    0x2a8(%r15),%rax
  0x0000000110357a62: movabs $0x0,%r10
  0x0000000110357a6c: mov    %r10,0x2a8(%r15)
  0x0000000110357a73: movabs $0x0,%r10
  0x0000000110357a7d: mov    %r10,0x2b0(%r15)
  0x0000000110357a84: add    $0xa0,%rsp
  0x0000000110357a8b: pop    %rbp
  0x0000000110357a8c: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110357a91: hlt
  0x0000000110357a92: hlt
  0x0000000110357a93: hlt
  0x0000000110357a94: hlt
  0x0000000110357a95: hlt
  0x0000000110357a96: hlt
  0x0000000110357a97: hlt
  0x0000000110357a98: hlt
  0x0000000110357a99: hlt
  0x0000000110357a9a: hlt
  0x0000000110357a9b: hlt
  0x0000000110357a9c: hlt
  0x0000000110357a9d: hlt
  0x0000000110357a9e: hlt
  0x0000000110357a9f: hlt
[Stub Code]
  0x0000000110357aa0: nop                       ;   {no_reloc}
  0x0000000110357aa1: nop
  0x0000000110357aa2: nop
  0x0000000110357aa3: nop
  0x0000000110357aa4: nop
  0x0000000110357aa5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110357aaf: jmpq   0x0000000110357aaf  ;   {runtime_call}
  0x0000000110357ab4: nop
  0x0000000110357ab5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110357abf: jmpq   0x0000000110357abf  ;   {runtime_call}
  0x0000000110357ac4: nop
  0x0000000110357ac5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110357acf: jmpq   0x0000000110357acf  ;   {runtime_call}
  0x0000000110357ad4: nop
  0x0000000110357ad5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110357adf: jmpq   0x0000000110357adf  ;   {runtime_call}
  0x0000000110357ae4: nop
  0x0000000110357ae5: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110357aef: jmpq   0x0000000110357aef  ;   {runtime_call}
[Exception Handler]
  0x0000000110357af4: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110357af9: mov    %rsp,-0x28(%rsp)
  0x0000000110357afe: sub    $0x80,%rsp
  0x0000000110357b05: mov    %rax,0x78(%rsp)
  0x0000000110357b0a: mov    %rcx,0x70(%rsp)
  0x0000000110357b0f: mov    %rdx,0x68(%rsp)
  0x0000000110357b14: mov    %rbx,0x60(%rsp)
  0x0000000110357b19: mov    %rbp,0x50(%rsp)
  0x0000000110357b1e: mov    %rsi,0x48(%rsp)
  0x0000000110357b23: mov    %rdi,0x40(%rsp)
  0x0000000110357b28: mov    %r8,0x38(%rsp)
  0x0000000110357b2d: mov    %r9,0x30(%rsp)
  0x0000000110357b32: mov    %r10,0x28(%rsp)
  0x0000000110357b37: mov    %r11,0x20(%rsp)
  0x0000000110357b3c: mov    %r12,0x18(%rsp)
  0x0000000110357b41: mov    %r13,0x10(%rsp)
  0x0000000110357b46: mov    %r14,0x8(%rsp)
  0x0000000110357b4b: mov    %r15,(%rsp)
  0x0000000110357b4f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110357b59: movabs $0x110357af9,%rsi  ;   {internal_word}
  0x0000000110357b63: mov    %rsp,%rdx
  0x0000000110357b66: and    $0xfffffffffffffff0,%rsp
  0x0000000110357b6a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110357b6f: hlt
[Deopt Handler Code]
  0x0000000110357b70: movabs $0x110357b70,%r10  ;   {section_word}
  0x0000000110357b7a: push   %r10
  0x0000000110357b7c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110357b81: hlt
  0x0000000110357b82: hlt
  0x0000000110357b83: hlt
  0x0000000110357b84: hlt
  0x0000000110357b85: hlt
  0x0000000110357b86: hlt
  0x0000000110357b87: hlt
Decoding compiled method 0x000000011035ca90:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown'
  #           [sp+0x50]  (sp of caller)
  0x000000011035cc60: mov    %eax,-0x14000(%rsp)
  0x000000011035cc67: push   %rbp
  0x000000011035cc68: sub    $0x40,%rsp
  0x000000011035cc6c: movabs $0x127282230,%rbx  ;   {metadata(method data for {method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown')}
  0x000000011035cc76: mov    0xdc(%rbx),%edx
  0x000000011035cc7c: add    $0x8,%edx
  0x000000011035cc7f: mov    %edx,0xdc(%rbx)
  0x000000011035cc85: movabs $0x127281cc8,%rbx  ;   {metadata({method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown')}
  0x000000011035cc8f: and    $0x0,%edx
  0x000000011035cc92: cmp    $0x0,%edx
  0x000000011035cc95: je     0x000000011035ce6b  ;*iconst_0
                                                ; - java.lang.Shutdown::<clinit>@0 (line 43)

  0x000000011035cc9b: nopl   0x0(%rax,%rax,1)
  0x000000011035cca0: jmpq   0x000000011035cedf  ;   {no_reloc}
  0x000000011035cca5: add    %al,(%rax)
  0x000000011035cca7: add    %al,(%rax)
  0x000000011035cca9: add    %al,%bh
  0x000000011035ccab: addl   $0x0,0x0(%rax)
  0x000000011035ccb2: add    %al,(%rax)         ;*putstatic state
                                                ; - java.lang.Shutdown::<clinit>@1 (line 43)

  0x000000011035ccb4: nopl   0x0(%rax)
  0x000000011035ccb8: jmpq   0x000000011035cf46  ;   {no_reloc}
  0x000000011035ccbd: add    %al,(%rax)
  0x000000011035ccbf: add    %al,(%rax)
  0x000000011035ccc1: add    %al,%dh
  0x000000011035ccc3: orl    $0xa,-0x45000000(%rax,%rax,1)
                                                ;*putstatic runFinalizersOnExit
                                                ; - java.lang.Shutdown::<clinit>@5 (line 46)

  0x000000011035cccb: add    %al,(%rax)
  0x000000011035cccd: add    %cl,-0x46(%rax)    ;   {metadata('java/lang/Runnable'[])}
  0x000000011035ccd0: js     0x000000011035cc7b
  0x000000011035ccd2: add    %eax,%eax
  0x000000011035ccd4: (bad)
  0x000000011035ccd5: add    %al,(%rax)
  0x000000011035ccd7: add    %cl,0x63(%rax)
  0x000000011035ccda: fisttpl -0x75(%rax)
  0x000000011035ccdd: sti
  0x000000011035ccde: cmp    $0xffffff,%rbx
  0x000000011035cce5: ja     0x000000011035cf50
  0x000000011035cceb: movabs $0x17,%rsi
  0x000000011035ccf5: lea    (%rsi,%rbx,4),%rsi
  0x000000011035ccf9: and    $0xfffffffffffffff8,%rsi
  0x000000011035ccfd: mov    0x60(%r15),%rax
  0x000000011035cd01: lea    (%rax,%rsi,1),%rsi
  0x000000011035cd05: cmp    0x70(%r15),%rsi
  0x000000011035cd09: ja     0x000000011035cf50
  0x000000011035cd0f: mov    %rsi,0x60(%r15)
  0x000000011035cd13: sub    %rax,%rsi
  0x000000011035cd16: movq   $0x1,(%rax)
  0x000000011035cd1d: mov    %rdx,%rcx
  0x000000011035cd20: shr    $0x3,%rcx
  0x000000011035cd24: mov    %ecx,0x8(%rax)
  0x000000011035cd27: mov    %ebx,0xc(%rax)
  0x000000011035cd2a: sub    $0x10,%rsi
  0x000000011035cd2e: je     0x000000011035cd45
  0x000000011035cd34: xor    %rbx,%rbx
  0x000000011035cd37: shr    $0x3,%rsi
  0x000000011035cd3b: mov    %rbx,0x8(%rax,%rsi,8)
  0x000000011035cd40: dec    %rsi
  0x000000011035cd43: jne    0x000000011035cd3b  ;*anewarray
                                                ; - java.lang.Shutdown::<clinit>@10 (line 54)

  0x000000011035cd45: data32 xchg %ax,%ax
  0x000000011035cd48: jmpq   0x000000011035cfb7  ;   {no_reloc}
  0x000000011035cd4d: add    %al,(%rax)
  0x000000011035cd4f: add    %al,(%rax)
  0x000000011035cd51: add    %cl,-0x30(%rbx,%rcx,4)
  0x000000011035cd55: shr    $0x3,%r10
  0x000000011035cd59: mov    %r10d,0x68(%rdx)
  0x000000011035cd5d: shr    $0x9,%rdx
  0x000000011035cd61: movabs $0x109ac3000,%rdi
  0x000000011035cd6b: mov    %rdi,0x28(%rsp)
  0x000000011035cd70: movb   $0x0,(%rdx,%rdi,1)  ;*putstatic hooks
                                                ; - java.lang.Shutdown::<clinit>@13 (line 54)

  0x000000011035cd74: nopl   0x0(%rax)
  0x000000011035cd78: jmpq   0x000000011035d01e  ;   {no_reloc}
  0x000000011035cd7d: add    %al,(%rax)
  0x000000011035cd7f: add    %al,(%rax)
  0x000000011035cd81: add    %al,%bh
  0x000000011035cd83: (bad)
  0x000000011035cd84: mov    %al,(%rax)
  0x000000011035cd86: add    %al,(%rax)
  0x000000011035cd88: add    %al,(%rax)
  0x000000011035cd8a: add    %al,(%rax)         ;*putstatic currentRunningHook
                                                ; - java.lang.Shutdown::<clinit>@17 (line 57)

  0x000000011035cd8c: nopl   0x0(%rax)
  0x000000011035cd90: jmpq   0x000000011035d037  ;   {no_reloc}
  0x000000011035cd95: add    %al,(%rax)
  0x000000011035cd97: add    %al,(%rax)
  0x000000011035cd99: add    %ch,%cl
  0x000000011035cd9b: movabs %al,0xbe48d08b48000002  ;*new
                                                ; - java.lang.Shutdown::<clinit>@20 (line 61)
                                                ;   {metadata(method data for {method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown')}
  0x000000011035cda4: xor    %ah,(%rdx)
  0x000000011035cda6: sub    %ah,(%rdi)
  0x000000011035cda8: add    %eax,(%rax)
  0x000000011035cdaa: add    %al,(%rax)
  0x000000011035cdac: addq   $0x1,0x108(%rsi)
  0x000000011035cdb4: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000011035cdbe: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.Shutdown::<clinit>@25 (line 61)

  0x000000011035cdc1: mov    %rax,0x20(%rsp)
  0x000000011035cdc6: nop
  0x000000011035cdc7: callq  0x000000010ff580a0  ; OopMap{[32]=Oop off=364}
                                                ;*invokespecial <init>
                                                ; - java.lang.Shutdown::<clinit>@25 (line 61)
                                                ;   {optimized virtual_call}
  0x000000011035cdcc: nopl   0x0(%rax)
  0x000000011035cdd0: jmpq   0x000000011035d0ab  ;   {no_reloc}
  0x000000011035cdd5: add    %al,(%rax)
  0x000000011035cdd7: add    %al,(%rax)
  0x000000011035cdd9: add    %cl,-0x75(%rax)
  0x000000011035cddc: rex.R and $0x20,%al
  0x000000011035cddf: mov    %rax,%r10
  0x000000011035cde2: shr    $0x3,%r10
  0x000000011035cde6: mov    %r10d,0x6c(%rdx)
  0x000000011035cdea: shr    $0x9,%rdx
  0x000000011035cdee: mov    0x28(%rsp),%rdi
  0x000000011035cdf3: movb   $0x0,(%rdx,%rdi,1)  ;*putstatic lock
                                                ; - java.lang.Shutdown::<clinit>@28 (line 61)

  0x000000011035cdf7: nop
  0x000000011035cdf8: jmpq   0x000000011035d0c4  ;   {no_reloc}
  0x000000011035cdfd: add    %al,(%rax)
  0x000000011035cdff: add    %al,(%rax)
  0x000000011035ce01: add    %ch,%cl
  0x000000011035ce03: movl   $0x8b480000,(%rdx)  ;*new
                                                ; - java.lang.Shutdown::<clinit>@31 (line 64)

  0x000000011035ce09: rorb   -0x42(%rax)        ;   {metadata(method data for {method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown')}
  0x000000011035ce0c: xor    %ah,(%rdx)
  0x000000011035ce0e: sub    %ah,(%rdi)
  0x000000011035ce10: add    %eax,(%rax)
  0x000000011035ce12: add    %al,(%rax)
  0x000000011035ce14: addq   $0x1,0x118(%rsi)
  0x000000011035ce1c: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000011035ce26: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.lang.Shutdown::<clinit>@36 (line 64)

  0x000000011035ce29: mov    %rax,0x30(%rsp)
  0x000000011035ce2e: nop
  0x000000011035ce2f: callq  0x000000010ff580a0  ; OopMap{[48]=Oop off=468}
                                                ;*invokespecial <init>
                                                ; - java.lang.Shutdown::<clinit>@36 (line 64)
                                                ;   {optimized virtual_call}
  0x000000011035ce34: nopl   0x0(%rax)
  0x000000011035ce38: jmpq   0x000000011035d138  ;   {no_reloc}
  0x000000011035ce3d: add    %al,(%rax)
  0x000000011035ce3f: add    %al,(%rax)
  0x000000011035ce41: add    %cl,-0x75(%rax)
  0x000000011035ce44: rex.R and $0x30,%al
  0x000000011035ce47: mov    %rax,%r10
  0x000000011035ce4a: shr    $0x3,%r10
  0x000000011035ce4e: mov    %r10d,0x70(%rsi)
  0x000000011035ce52: shr    $0x9,%rsi
  0x000000011035ce56: mov    0x28(%rsp),%rdi
  0x000000011035ce5b: movb   $0x0,(%rsi,%rdi,1)  ;*putstatic haltLock
                                                ; - java.lang.Shutdown::<clinit>@39 (line 64)

  0x000000011035ce5f: add    $0x40,%rsp
  0x000000011035ce63: pop    %rbp
  0x000000011035ce64: test   %eax,-0x3743d6a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035ce6a: retq
  0x000000011035ce6b: mov    %rbx,0x8(%rsp)
  0x000000011035ce70: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035ce78: callq  0x00000001100129e0  ; OopMap{off=541}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown::<clinit>@-1 (line 43)
                                                ;   {runtime_call}
  0x000000011035ce7d: jmpq   0x000000011035cc9b
  0x000000011035ce82: movabs $0x0,%rbx          ;   {oop(NULL)}
  0x000000011035ce8c: push   %rax
  0x000000011035ce8d: push   %rbx
  0x000000011035ce8e: mov    0x48(%rbx),%rbx
  0x000000011035ce92: push   %rdi
  0x000000011035ce93: push   %rsi
  0x000000011035ce94: push   %rdx
  0x000000011035ce95: push   %rcx
  0x000000011035ce96: push   %r8
  0x000000011035ce98: push   %r9
  0x000000011035ce9a: push   %r10
  0x000000011035ce9c: mov    %rsp,%r10
  0x000000011035ce9f: and    $0xfffffffffffffff0,%rsp
  0x000000011035cea3: push   %r10
  0x000000011035cea5: push   %r11
  0x000000011035cea7: mov    $0x109,%edi
  0x000000011035ceac: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035ceb6: callq  *%r10
  0x000000011035ceb9: pop    %r11
  0x000000011035cebb: pop    %rsp
  0x000000011035cebc: pop    %r10
  0x000000011035cebe: pop    %r9
  0x000000011035cec0: pop    %r8
  0x000000011035cec2: pop    %rcx
  0x000000011035cec3: pop    %rdx
  0x000000011035cec4: pop    %rsi
  0x000000011035cec5: pop    %rdi
  0x000000011035cec6: cmp    0x118(%rbx),%rax
  0x000000011035cecd: pop    %rbx
  0x000000011035cece: pop    %rax
  0x000000011035cecf: jne    0x000000011035cedf
  0x000000011035ced5: jmpq   0x000000011035ccaa
  0x000000011035ceda: mov    $0xa535d00,%eax
  0x000000011035cedf: callq  0x0000000110011ca0  ; OopMap{off=644}
                                                ;*putstatic state
                                                ; - java.lang.Shutdown::<clinit>@1 (line 43)
                                                ;   {runtime_call}
  0x000000011035cee4: jmpq   0x000000011035cca0
  0x000000011035cee9: movabs $0x0,%rbx          ;   {oop(NULL)}
  0x000000011035cef3: push   %rax
  0x000000011035cef4: push   %rbx
  0x000000011035cef5: mov    0x48(%rbx),%rbx
  0x000000011035cef9: push   %rdi
  0x000000011035cefa: push   %rsi
  0x000000011035cefb: push   %rdx
  0x000000011035cefc: push   %rcx
  0x000000011035cefd: push   %r8
  0x000000011035ceff: push   %r9
  0x000000011035cf01: push   %r10
  0x000000011035cf03: mov    %rsp,%r10
  0x000000011035cf06: and    $0xfffffffffffffff0,%rsp
  0x000000011035cf0a: push   %r10
  0x000000011035cf0c: push   %r11
  0x000000011035cf0e: mov    $0x109,%edi
  0x000000011035cf13: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035cf1d: callq  *%r10
  0x000000011035cf20: pop    %r11
  0x000000011035cf22: pop    %rsp
  0x000000011035cf23: pop    %r10
  0x000000011035cf25: pop    %r9
  0x000000011035cf27: pop    %r8
  0x000000011035cf29: pop    %rcx
  0x000000011035cf2a: pop    %rdx
  0x000000011035cf2b: pop    %rsi
  0x000000011035cf2c: pop    %rdi
  0x000000011035cf2d: cmp    0x118(%rbx),%rax
  0x000000011035cf34: pop    %rbx
  0x000000011035cf35: pop    %rax
  0x000000011035cf36: jne    0x000000011035cf46
  0x000000011035cf3c: jmpq   0x000000011035ccc2
  0x000000011035cf41: mov    $0xa535d00,%eax
  0x000000011035cf46: callq  0x0000000110011ca0  ; OopMap{off=747}
                                                ;*putstatic runFinalizersOnExit
                                                ; - java.lang.Shutdown::<clinit>@5 (line 46)
                                                ;   {runtime_call}
  0x000000011035cf4b: jmpq   0x000000011035ccb8
  0x000000011035cf50: callq  0x000000011000f5a0  ; OopMap{off=757}
                                                ;*anewarray
                                                ; - java.lang.Shutdown::<clinit>@10 (line 54)
                                                ;   {runtime_call}
  0x000000011035cf55: jmpq   0x000000011035cd45
  0x000000011035cf5a: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000011035cf64: push   %rax
  0x000000011035cf65: push   %rbx
  0x000000011035cf66: mov    0x48(%rdx),%rbx
  0x000000011035cf6a: push   %rdi
  0x000000011035cf6b: push   %rsi
  0x000000011035cf6c: push   %rdx
  0x000000011035cf6d: push   %rcx
  0x000000011035cf6e: push   %r8
  0x000000011035cf70: push   %r9
  0x000000011035cf72: push   %r10
  0x000000011035cf74: mov    %rsp,%r10
  0x000000011035cf77: and    $0xfffffffffffffff0,%rsp
  0x000000011035cf7b: push   %r10
  0x000000011035cf7d: push   %r11
  0x000000011035cf7f: mov    $0x109,%edi
  0x000000011035cf84: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035cf8e: callq  *%r10
  0x000000011035cf91: pop    %r11
  0x000000011035cf93: pop    %rsp
  0x000000011035cf94: pop    %r10
  0x000000011035cf96: pop    %r9
  0x000000011035cf98: pop    %r8
  0x000000011035cf9a: pop    %rcx
  0x000000011035cf9b: pop    %rdx
  0x000000011035cf9c: pop    %rsi
  0x000000011035cf9d: pop    %rdi
  0x000000011035cf9e: cmp    0x118(%rbx),%rax
  0x000000011035cfa5: pop    %rbx
  0x000000011035cfa6: pop    %rax
  0x000000011035cfa7: jne    0x000000011035cfb7
  0x000000011035cfad: jmpq   0x000000011035cd52
  0x000000011035cfb2: mov    $0xa535d00,%eax
  0x000000011035cfb7: callq  0x0000000110011ca0  ; OopMap{rax=Oop off=860}
                                                ;*putstatic hooks
                                                ; - java.lang.Shutdown::<clinit>@13 (line 54)
                                                ;   {runtime_call}
  0x000000011035cfbc: jmpq   0x000000011035cd48
  0x000000011035cfc1: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000011035cfcb: push   %rax
  0x000000011035cfcc: push   %rbx
  0x000000011035cfcd: mov    0x48(%rdx),%rbx
  0x000000011035cfd1: push   %rdi
  0x000000011035cfd2: push   %rsi
  0x000000011035cfd3: push   %rdx
  0x000000011035cfd4: push   %rcx
  0x000000011035cfd5: push   %r8
  0x000000011035cfd7: push   %r9
  0x000000011035cfd9: push   %r10
  0x000000011035cfdb: mov    %rsp,%r10
  0x000000011035cfde: and    $0xfffffffffffffff0,%rsp
  0x000000011035cfe2: push   %r10
  0x000000011035cfe4: push   %r11
  0x000000011035cfe6: mov    $0x109,%edi
  0x000000011035cfeb: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035cff5: callq  *%r10
  0x000000011035cff8: pop    %r11
  0x000000011035cffa: pop    %rsp
  0x000000011035cffb: pop    %r10
  0x000000011035cffd: pop    %r9
  0x000000011035cfff: pop    %r8
  0x000000011035d001: pop    %rcx
  0x000000011035d002: pop    %rdx
  0x000000011035d003: pop    %rsi
  0x000000011035d004: pop    %rdi
  0x000000011035d005: cmp    0x118(%rbx),%rax
  0x000000011035d00c: pop    %rbx
  0x000000011035d00d: pop    %rax
  0x000000011035d00e: jne    0x000000011035d01e
  0x000000011035d014: jmpq   0x000000011035cd82
  0x000000011035d019: mov    $0xa535d00,%eax
  0x000000011035d01e: callq  0x0000000110011ca0  ; OopMap{off=963}
                                                ;*putstatic currentRunningHook
                                                ; - java.lang.Shutdown::<clinit>@17 (line 57)
                                                ;   {runtime_call}
  0x000000011035d023: jmpq   0x000000011035cd78
  0x000000011035d028: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035d032: mov    $0xa050f00,%eax
  0x000000011035d037: callq  0x00000001100118a0  ; OopMap{off=988}
                                                ;*new  ; - java.lang.Shutdown::<clinit>@20 (line 61)
                                                ;   {runtime_call}
  0x000000011035d03c: jmpq   0x000000011035cd90
  0x000000011035d041: mov    %rdx,%rdx
  0x000000011035d044: callq  0x000000011000e520  ; OopMap{off=1001}
                                                ;*new  ; - java.lang.Shutdown::<clinit>@20 (line 61)
                                                ;   {runtime_call}
  0x000000011035d049: jmpq   0x000000011035cd9f
  0x000000011035d04e: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000011035d058: push   %rax
  0x000000011035d059: push   %rbx
  0x000000011035d05a: mov    0x48(%rdx),%rbx
  0x000000011035d05e: push   %rdi
  0x000000011035d05f: push   %rsi
  0x000000011035d060: push   %rdx
  0x000000011035d061: push   %rcx
  0x000000011035d062: push   %r8
  0x000000011035d064: push   %r9
  0x000000011035d066: push   %r10
  0x000000011035d068: mov    %rsp,%r10
  0x000000011035d06b: and    $0xfffffffffffffff0,%rsp
  0x000000011035d06f: push   %r10
  0x000000011035d071: push   %r11
  0x000000011035d073: mov    $0x109,%edi
  0x000000011035d078: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035d082: callq  *%r10
  0x000000011035d085: pop    %r11
  0x000000011035d087: pop    %rsp
  0x000000011035d088: pop    %r10
  0x000000011035d08a: pop    %r9
  0x000000011035d08c: pop    %r8
  0x000000011035d08e: pop    %rcx
  0x000000011035d08f: pop    %rdx
  0x000000011035d090: pop    %rsi
  0x000000011035d091: pop    %rdi
  0x000000011035d092: cmp    0x118(%rbx),%rax
  0x000000011035d099: pop    %rbx
  0x000000011035d09a: pop    %rax
  0x000000011035d09b: jne    0x000000011035d0ab
  0x000000011035d0a1: jmpq   0x000000011035cdda
  0x000000011035d0a6: mov    $0xa535d00,%eax
  0x000000011035d0ab: callq  0x0000000110011ca0  ; OopMap{[32]=Oop off=1104}
                                                ;*putstatic lock
                                                ; - java.lang.Shutdown::<clinit>@28 (line 61)
                                                ;   {runtime_call}
  0x000000011035d0b0: jmpq   0x000000011035cdd0
  0x000000011035d0b5: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035d0bf: mov    $0xa050f00,%eax
  0x000000011035d0c4: callq  0x00000001100118a0  ; OopMap{off=1129}
                                                ;*new  ; - java.lang.Shutdown::<clinit>@31 (line 64)
                                                ;   {runtime_call}
  0x000000011035d0c9: jmpq   0x000000011035cdf8
  0x000000011035d0ce: mov    %rdx,%rdx
  0x000000011035d0d1: callq  0x000000011000e520  ; OopMap{off=1142}
                                                ;*new  ; - java.lang.Shutdown::<clinit>@31 (line 64)
                                                ;   {runtime_call}
  0x000000011035d0d6: jmpq   0x000000011035ce07
  0x000000011035d0db: movabs $0x0,%rsi          ;   {oop(NULL)}
  0x000000011035d0e5: push   %rax
  0x000000011035d0e6: push   %rbx
  0x000000011035d0e7: mov    0x48(%rsi),%rbx
  0x000000011035d0eb: push   %rdi
  0x000000011035d0ec: push   %rsi
  0x000000011035d0ed: push   %rdx
  0x000000011035d0ee: push   %rcx
  0x000000011035d0ef: push   %r8
  0x000000011035d0f1: push   %r9
  0x000000011035d0f3: push   %r10
  0x000000011035d0f5: mov    %rsp,%r10
  0x000000011035d0f8: and    $0xfffffffffffffff0,%rsp
  0x000000011035d0fc: push   %r10
  0x000000011035d0fe: push   %r11
  0x000000011035d100: mov    $0x109,%edi
  0x000000011035d105: movabs $0x7ff800a7c099,%r10  ;   {runtime_call}
  0x000000011035d10f: callq  *%r10
  0x000000011035d112: pop    %r11
  0x000000011035d114: pop    %rsp
  0x000000011035d115: pop    %r10
  0x000000011035d117: pop    %r9
  0x000000011035d119: pop    %r8
  0x000000011035d11b: pop    %rcx
  0x000000011035d11c: pop    %rdx
  0x000000011035d11d: pop    %rsi
  0x000000011035d11e: pop    %rdi
  0x000000011035d11f: cmp    0x118(%rbx),%rax
  0x000000011035d126: pop    %rbx
  0x000000011035d127: pop    %rax
  0x000000011035d128: jne    0x000000011035d138
  0x000000011035d12e: jmpq   0x000000011035ce42
  0x000000011035d133: mov    $0xa535d00,%eax
  0x000000011035d138: callq  0x0000000110011ca0  ; OopMap{[48]=Oop off=1245}
                                                ;*putstatic haltLock
                                                ; - java.lang.Shutdown::<clinit>@39 (line 64)
                                                ;   {runtime_call}
  0x000000011035d13d: jmpq   0x000000011035ce38
  0x000000011035d142: nop
  0x000000011035d143: nop
  0x000000011035d144: mov    0x2a8(%r15),%rax
  0x000000011035d14b: movabs $0x0,%r10
  0x000000011035d155: mov    %r10,0x2a8(%r15)
  0x000000011035d15c: movabs $0x0,%r10
  0x000000011035d166: mov    %r10,0x2b0(%r15)
  0x000000011035d16d: add    $0x40,%rsp
  0x000000011035d171: pop    %rbp
  0x000000011035d172: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035d177: hlt
  0x000000011035d178: hlt
  0x000000011035d179: hlt
  0x000000011035d17a: hlt
  0x000000011035d17b: hlt
  0x000000011035d17c: hlt
  0x000000011035d17d: hlt
  0x000000011035d17e: hlt
  0x000000011035d17f: hlt
[Stub Code]
  0x000000011035d180: nop                       ;   {no_reloc}
  0x000000011035d181: nop
  0x000000011035d182: nop
  0x000000011035d183: nop
  0x000000011035d184: nop
  0x000000011035d185: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035d18f: jmpq   0x000000011035d18f  ;   {runtime_call}
  0x000000011035d194: nop
  0x000000011035d195: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035d19f: jmpq   0x000000011035d19f  ;   {runtime_call}
[Exception Handler]
  0x000000011035d1a4: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011035d1a9: mov    %rsp,-0x28(%rsp)
  0x000000011035d1ae: sub    $0x80,%rsp
  0x000000011035d1b5: mov    %rax,0x78(%rsp)
  0x000000011035d1ba: mov    %rcx,0x70(%rsp)
  0x000000011035d1bf: mov    %rdx,0x68(%rsp)
  0x000000011035d1c4: mov    %rbx,0x60(%rsp)
  0x000000011035d1c9: mov    %rbp,0x50(%rsp)
  0x000000011035d1ce: mov    %rsi,0x48(%rsp)
  0x000000011035d1d3: mov    %rdi,0x40(%rsp)
  0x000000011035d1d8: mov    %r8,0x38(%rsp)
  0x000000011035d1dd: mov    %r9,0x30(%rsp)
  0x000000011035d1e2: mov    %r10,0x28(%rsp)
  0x000000011035d1e7: mov    %r11,0x20(%rsp)
  0x000000011035d1ec: mov    %r12,0x18(%rsp)
  0x000000011035d1f1: mov    %r13,0x10(%rsp)
  0x000000011035d1f6: mov    %r14,0x8(%rsp)
  0x000000011035d1fb: mov    %r15,(%rsp)
  0x000000011035d1ff: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035d209: movabs $0x11035d1a9,%rsi  ;   {internal_word}
  0x000000011035d213: mov    %rsp,%rdx
  0x000000011035d216: and    $0xfffffffffffffff0,%rsp
  0x000000011035d21a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035d21f: hlt
[Deopt Handler Code]
  0x000000011035d220: movabs $0x11035d220,%r10  ;   {section_word}
  0x000000011035d22a: push   %r10
  0x000000011035d22c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035d231: hlt
  0x000000011035d232: hlt
  0x000000011035d233: hlt
  0x000000011035d234: hlt
  0x000000011035d235: hlt
  0x000000011035d236: hlt
  0x000000011035d237: hlt
Decoding compiled method 0x000000011035e9d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126fdb148} 'toArray' '([Ljava/lang/Object;)[Ljava/lang/Object;' in 'java/util/AbstractCollection'
  # this:     rsi:rsi   = 'java/util/AbstractCollection'
  # parm0:    rdx:rdx   = '[Ljava/lang/Object;'
  #           [sp+0x70]  (sp of caller)
  0x000000011035eb60: mov    0x8(%rsi),%r10d
  0x000000011035eb64: shl    $0x3,%r10
  0x000000011035eb68: cmp    %r10,%rax
  0x000000011035eb6b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035eb71: data32 xchg %ax,%ax
  0x000000011035eb74: nopl   0x0(%rax,%rax,1)
  0x000000011035eb7c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035eb80: mov    %eax,-0x14000(%rsp)
  0x000000011035eb87: push   %rbp
  0x000000011035eb88: sub    $0x60,%rsp         ;*synchronization entry
                                                ; - java.util.AbstractCollection::toArray@-1 (line 176)

  0x000000011035eb8c: mov    %rdx,%rbp
  0x000000011035eb8f: mov    %rsi,(%rsp)
  0x000000011035eb93: xchg   %ax,%ax
  0x000000011035eb95: movabs $0xffffffffffffffff,%rax
  0x000000011035eb9f: callq  0x000000010ff582e0  ; OopMap{rbp=Oop [0]=Oop off=68}
                                                ;*invokevirtual size
                                                ; - java.util.AbstractCollection::toArray@1 (line 176)
                                                ;   {virtual_call}
  0x000000011035eba4: mov    0xc(%rbp),%r10d    ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@6 (line 177)
                                                ; implicit exception: dispatches to 0x000000011035ef61
  0x000000011035eba8: mov    0x8(%rbp),%r8d     ;*invokevirtual getClass
                                                ; - java.util.AbstractCollection::toArray@16 (line 179)

  0x000000011035ebac: movabs $0x0,%r11
  0x000000011035ebb6: lea    (%r11,%r8,8),%r11
  0x000000011035ebba: cmp    %eax,%r10d
  0x000000011035ebbd: jge    0x000000011035ec07  ;*if_icmplt
                                                ; - java.util.AbstractCollection::toArray@8 (line 177)

  0x000000011035ebbf: mov    %r8d,0xc(%rsp)
  0x000000011035ebc4: mov    %r10d,0x8(%rsp)
  0x000000011035ebc9: mov    0xe0(%r11),%rsi    ;*invokevirtual getComponentType
                                                ; - java.util.AbstractCollection::toArray@19 (line 179)

  0x000000011035ebd0: mov    %r11,0x10(%rsp)
  0x000000011035ebd5: mov    %eax,%edx
  0x000000011035ebd7: callq  0x000000010ff58520  ; OopMap{rbp=Oop [0]=Oop off=124}
                                                ;*invokestatic newInstance
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)
                                                ;   {static_call}
  0x000000011035ebdc: mov    0x8(%rax),%r10d    ; implicit exception: dispatches to 0x000000011035ef71
  0x000000011035ebe0: shl    $0x3,%r10
  0x000000011035ebe4: mov    0x30(%r10),%r10
  0x000000011035ebe8: movabs $0x7c0011a60,%r11  ;   {metadata('java/lang/Object'[])}
  0x000000011035ebf2: cmp    %r11,%r10
  0x000000011035ebf5: jne    0x000000011035eecd  ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)

  0x000000011035ebfb: mov    %rax,0x20(%rsp)
  0x000000011035ec00: mov    %rax,0x38(%rsp)
  0x000000011035ec05: jmp    0x000000011035ec20
  0x000000011035ec07: mov    %rbp,0x38(%rsp)
  0x000000011035ec0c: mov    %rbp,0x20(%rsp)
  0x000000011035ec11: mov    %r10d,0x8(%rsp)
  0x000000011035ec16: mov    %r8d,0xc(%rsp)
  0x000000011035ec1b: mov    %r11,0x10(%rsp)    ;*astore_3
                                                ; - java.util.AbstractCollection::toArray@32 (line 179)

  0x000000011035ec20: mov    %rbp,0x18(%rsp)
  0x000000011035ec25: mov    (%rsp),%rsi
  0x000000011035ec29: movabs $0xffffffffffffffff,%rax
  0x000000011035ec33: callq  0x000000010ff582e0  ; OopMap{rbp=Oop [24]=Oop [32]=Oop [56]=Oop off=216}
                                                ;*invokevirtual iterator
                                                ; - java.util.AbstractCollection::toArray@34 (line 180)
                                                ;   {virtual_call}
  0x000000011035ec38: mov    %rax,0x28(%rsp)
  0x000000011035ec3d: mov    0x20(%rsp),%rbp
  0x000000011035ec42: mov    0xc(%rbp),%r11d    ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@45 (line 182)

  0x000000011035ec46: test   %r11d,%r11d
  0x000000011035ec49: jle    0x000000011035ed0a  ;*if_icmpge
                                                ; - java.util.AbstractCollection::toArray@46 (line 182)

  0x000000011035ec4f: mov    0x8(%rbp),%r10d    ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)

  0x000000011035ec53: xor    %r9d,%r9d
  0x000000011035ec56: mov    %r11d,0x40(%rsp)
  0x000000011035ec5b: mov    %r10d,0x44(%rsp)
  0x000000011035ec60: jmp    0x000000011035ec6a
  0x000000011035ec62: mov    %r10d,%r9d
  0x000000011035ec65: mov    0x20(%rsp),%rbp    ;*aload
                                                ; - java.util.AbstractCollection::toArray@49 (line 183)

  0x000000011035ec6a: mov    %r9d,(%rsp)
  0x000000011035ec6e: mov    0x28(%rsp),%rsi
  0x000000011035ec73: xchg   %ax,%ax
  0x000000011035ec75: movabs $0xffffffffffffffff,%rax
  0x000000011035ec7f: callq  0x000000010ff582e0  ; OopMap{rbp=Oop [24]=Oop [40]=Oop [56]=Oop off=292}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@51 (line 183)
                                                ;   {virtual_call}
  0x000000011035ec84: movslq (%rsp),%r13
  0x000000011035ec88: shl    $0x2,%r13
  0x000000011035ec8c: mov    %rbp,%r11
  0x000000011035ec8f: lea    0x10(%rbp,%r13,1),%rbp  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)

  0x000000011035ec94: test   %eax,%eax
  0x000000011035ec96: je     0x000000011035ed44  ;*ifne
                                                ; - java.util.AbstractCollection::toArray@56 (line 183)

  0x000000011035ec9c: mov    %r11,0x20(%rsp)
  0x000000011035eca1: mov    0x28(%rsp),%rsi
  0x000000011035eca6: data32 xchg %ax,%ax
  0x000000011035eca9: movabs $0xffffffffffffffff,%rax
  0x000000011035ecb3: callq  0x000000010ff582e0  ; OopMap{rbp=Derived_oop_[32] [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=344}
                                                ;*invokeinterface next
                                                ; - java.util.AbstractCollection::toArray@114 (line 196)
                                                ;   {virtual_call}
  0x000000011035ecb8: mov    (%rsp),%r10d
  0x000000011035ecbc: cmp    0x40(%rsp),%r10d
  0x000000011035ecc1: jae    0x000000011035ee7b
  0x000000011035ecc7: mov    0x44(%rsp),%ecx
  0x000000011035eccb: cmp    $0xf800234c,%ecx   ;   {metadata('java/lang/Object'[])}
  0x000000011035ecd1: jne    0x000000011035eea5
  0x000000011035ecd7: mov    %rbp,%r11
  0x000000011035ecda: mov    %rax,%r9
  0x000000011035ecdd: shr    $0x3,%r9
  0x000000011035ece1: mov    %r9d,0x0(%rbp)
  0x000000011035ece5: shr    $0x9,%r11
  0x000000011035ece9: movabs $0x109ac3000,%r8
  0x000000011035ecf3: mov    %r12b,(%r8,%r11,1)  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)

  0x000000011035ecf7: inc    %r10d              ;*iinc
                                                ; - java.util.AbstractCollection::toArray@120 (line 182)

  0x000000011035ecfa: cmp    0x40(%rsp),%r10d
  0x000000011035ecff: jl     0x000000011035ec62
  0x000000011035ed05: mov    0x20(%rsp),%rbp    ;*if_icmpge
                                                ; - java.util.AbstractCollection::toArray@46 (line 182)

  0x000000011035ed0a: mov    0x28(%rsp),%rsi
  0x000000011035ed0f: xchg   %ax,%ax
  0x000000011035ed11: movabs $0xffffffffffffffff,%rax
  0x000000011035ed1b: callq  0x000000010ff582e0  ; OopMap{rbp=Oop [40]=Oop off=448}
                                                ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@128 (line 199)
                                                ;   {virtual_call}
  0x000000011035ed20: test   %eax,%eax
  0x000000011035ed22: je     0x000000011035edf1  ;*ifeq
                                                ; - java.util.AbstractCollection::toArray@133 (line 199)

  0x000000011035ed28: mov    %rbp,%rsi
  0x000000011035ed2b: mov    0x28(%rsp),%rdx
  0x000000011035ed30: data32 xchg %ax,%ax
  0x000000011035ed33: callq  0x000000010ff58520  ; OopMap{off=472}
                                                ;*invokestatic finishToArray
                                                ; - java.util.AbstractCollection::toArray@139 (line 199)
                                                ;   {static_call}
  0x000000011035ed38: add    $0x60,%rsp
  0x000000011035ed3c: pop    %rbp
  0x000000011035ed3d: test   %eax,-0x3745d43(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035ed43: retq
  0x000000011035ed44: mov    0x18(%rsp),%r14
  0x000000011035ed49: cmp    %r11,%r14
  0x000000011035ed4c: je     0x000000011035edf9  ;*if_acmpne
                                                ; - java.util.AbstractCollection::toArray@61 (line 184)

  0x000000011035ed52: mov    0x8(%rsp),%ebx
  0x000000011035ed56: cmp    (%rsp),%ebx
  0x000000011035ed59: jge    0x000000011035ed6a  ;*if_icmpge
                                                ; - java.util.AbstractCollection::toArray@76 (line 186)

  0x000000011035ed5b: mov    %r11,%rsi
  0x000000011035ed5e: mov    (%rsp),%edx
  0x000000011035ed61: xchg   %ax,%ax
  0x000000011035ed63: callq  0x000000010ff58520  ; OopMap{off=520}
                                                ;*invokestatic copyOf
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)
                                                ;   {static_call}
  0x000000011035ed68: jmp    0x000000011035ed38
  0x000000011035ed6a: mov    0x40(%rsp),%r8d
  0x000000011035ed6f: cmp    (%rsp),%r8d
  0x000000011035ed73: jb     0x000000011035eee1
  0x000000011035ed79: cmp    (%rsp),%ebx
  0x000000011035ed7c: jb     0x000000011035eee6
  0x000000011035ed82: mov    (%rsp),%ebp
  0x000000011035ed85: test   %ebp,%ebp
  0x000000011035ed87: jle    0x000000011035ef28
  0x000000011035ed8d: mov    0x10(%rsp),%r9
  0x000000011035ed92: mov    0xc(%r9),%r8d      ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)

  0x000000011035ed96: mov    %r11,%r10
  0x000000011035ed99: add    $0x10,%r10         ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)

  0x000000011035ed9d: mov    %r14,%r11
  0x000000011035eda0: add    $0x10,%r11
  0x000000011035eda4: movslq %ebp,%rdx
  0x000000011035eda7: movslq %r8d,%rdi
  0x000000011035edaa: mov    0x44(%rsp),%ecx
  0x000000011035edae: movabs $0x0,%rsi
  0x000000011035edb8: lea    (%rsi,%rcx,8),%rsi
  0x000000011035edbc: mov    (%rsi,%rdi,1),%rdi
  0x000000011035edc0: cmp    %rdi,%r9
  0x000000011035edc3: jne    0x000000011035ee0e
  0x000000011035edc5: mov    %r10,%rdi
  0x000000011035edc8: mov    %r11,%rsi
  0x000000011035edcb: movabs $0x10ff64be0,%r10
  0x000000011035edd5: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)

  0x000000011035edd8: cmp    %ebp,%ebx
  0x000000011035edda: jle    0x000000011035ede9
  0x000000011035eddc: cmp    %ebx,%ebp
  0x000000011035edde: jae    0x000000011035ef31
  0x000000011035ede4: mov    %r12d,0x10(%r14,%r13,1)  ;*if_icmple
                                                ; - java.util.AbstractCollection::toArray@99 (line 190)

  0x000000011035ede9: mov    %r14,%rax
  0x000000011035edec: jmpq   0x000000011035ed38
  0x000000011035edf1: mov    %rbp,%rax
  0x000000011035edf4: jmpq   0x000000011035ed38
  0x000000011035edf9: mov    (%rsp),%r10d
  0x000000011035edfd: cmp    0x40(%rsp),%r10d
  0x000000011035ee02: jae    0x000000011035ef45
  0x000000011035ee08: mov    %r12d,0x0(%rbp)    ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)

  0x000000011035ee0c: jmp    0x000000011035ede9
  0x000000011035ee0e: cmp    $0x18,%r8d
  0x000000011035ee12: jne    0x000000011035ee48
  0x000000011035ee14: mov    0xc(%rsp),%r8d
  0x000000011035ee19: cmp    %r8d,%ecx
  0x000000011035ee1c: je     0x000000011035edc5
  0x000000011035ee1e: mov    0x10(%rsp),%rax
  0x000000011035ee23: push   %rax
  0x000000011035ee24: mov    %rax,%rax
  0x000000011035ee27: mov    0x20(%rsi),%rdi
  0x000000011035ee2b: mov    (%rdi),%ecx
  0x000000011035ee2d: add    $0x8,%rdi
  0x000000011035ee31: test   %rax,%rax
  0x000000011035ee34: repnz scas %es:(%rdi),%rax
  0x000000011035ee37: pop    %rax
  0x000000011035ee38: jne    0x000000011035ee42
  0x000000011035ee3e: mov    %rax,0x18(%rsi)
  0x000000011035ee42: je     0x000000011035edc5
  0x000000011035ee48: mov    0xe8(%r9),%r8
  0x000000011035ee4f: movslq 0xc(%r8),%rcx
  0x000000011035ee53: mov    %r10,%rdi
  0x000000011035ee56: mov    %r11,%rsi
  0x000000011035ee59: movabs $0x10ff64f20,%r10
  0x000000011035ee63: callq  *%r10
  0x000000011035ee66: test   %eax,%eax
  0x000000011035ee68: je     0x000000011035edd8
  0x000000011035ee6e: not    %eax
  0x000000011035ee70: mov    %ebp,%r9d
  0x000000011035ee73: sub    %eax,%r9d          ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)

  0x000000011035ee76: mov    %eax,%r11d
  0x000000011035ee79: jmp    0x000000011035eeef
  0x000000011035ee7b: mov    $0xffffffe4,%esi
  0x000000011035ee80: mov    0x18(%rsp),%rbp
  0x000000011035ee85: rex.W pushq 0x20(%rsp)
  0x000000011035ee8a: rex.W popq (%rsp)
  0x000000011035ee8e: mov    %r10d,0x14(%rsp)
  0x000000011035ee93: mov    %rax,0x20(%rsp)
  0x000000011035ee98: data32 xchg %ax,%ax
  0x000000011035ee9b: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=832}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x000000011035eea0: callq  0x000000010e0276f4  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x000000011035eea5: mov    $0xffffffd6,%esi
  0x000000011035eeaa: mov    0x18(%rsp),%rbp
  0x000000011035eeaf: rex.W pushq 0x20(%rsp)
  0x000000011035eeb4: rex.W popq (%rsp)
  0x000000011035eeb8: mov    %r10d,0x14(%rsp)
  0x000000011035eebd: mov    %rax,0x20(%rsp)
  0x000000011035eec2: nop
  0x000000011035eec3: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=872}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x000000011035eec8: callq  0x000000010e0276f4  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@119 (line 196)
                                                ;   {runtime_call}
  0x000000011035eecd: mov    $0xffffffde,%esi
  0x000000011035eed2: mov    %rax,%rbp
  0x000000011035eed5: xchg   %ax,%ax
  0x000000011035eed7: callq  0x000000010ff576a0  ; OopMap{rbp=Oop off=892}
                                                ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)
                                                ;   {runtime_call}
  0x000000011035eedc: callq  0x000000010e0276f4  ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)
                                                ;   {runtime_call}
  0x000000011035eee1: mov    (%rsp),%ebp
  0x000000011035eee4: jmp    0x000000011035eee9
  0x000000011035eee6: mov    (%rsp),%ebp
  0x000000011035eee9: mov    %ebp,%r9d
  0x000000011035eeec: xor    %r11d,%r11d
  0x000000011035eeef: mov    %r13,0x8(%rsp)
  0x000000011035eef4: mov    %ebp,0x4(%rsp)
  0x000000011035eef8: mov    %ebx,(%rsp)
  0x000000011035eefb: mov    %r14,%rbp
  0x000000011035eefe: mov    0x38(%rsp),%rsi
  0x000000011035ef03: mov    %r11d,%edx
  0x000000011035ef06: mov    %rbp,%rcx
  0x000000011035ef09: mov    %r11d,%r8d
  0x000000011035ef0c: data32 xchg %ax,%ax
  0x000000011035ef0f: callq  0x0000000110019160  ; OopMap{rbp=Oop off=948}
                                                ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)
                                                ;   {runtime_call}
  0x000000011035ef14: mov    %rbp,%r14
  0x000000011035ef17: mov    (%rsp),%ebx
  0x000000011035ef1a: mov    0x4(%rsp),%ebp
  0x000000011035ef1e: mov    0x8(%rsp),%r13
  0x000000011035ef23: jmpq   0x000000011035edd8
  0x000000011035ef28: test   %ebp,%ebp
  0x000000011035ef2a: jl     0x000000011035eee9  ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)

  0x000000011035ef2c: jmpq   0x000000011035edd8
  0x000000011035ef31: mov    $0xffffffe4,%esi
  0x000000011035ef36: mov    %r14,0x8(%rsp)
  0x000000011035ef3b: callq  0x000000010ff576a0  ; OopMap{[8]=Oop off=992}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@106 (line 191)
                                                ;   {runtime_call}
  0x000000011035ef40: callq  0x000000010e0276f4  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@106 (line 191)
                                                ;   {runtime_call}
  0x000000011035ef45: mov    $0xffffffe4,%esi
  0x000000011035ef4a: mov    %r14,%rbp
  0x000000011035ef4d: mov    %r11,(%rsp)
  0x000000011035ef51: mov    %r10d,0x8(%rsp)
  0x000000011035ef56: nop
  0x000000011035ef57: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop off=1020}
                                                ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)
                                                ;   {runtime_call}
  0x000000011035ef5c: callq  0x000000010e0276f4  ;*aastore
                                                ; - java.util.AbstractCollection::toArray@68 (line 185)
                                                ;   {runtime_call}
  0x000000011035ef61: mov    $0xfffffff6,%esi
  0x000000011035ef66: nop
  0x000000011035ef67: callq  0x000000010ff576a0  ; OopMap{off=1036}
                                                ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@6 (line 177)
                                                ;   {runtime_call}
  0x000000011035ef6c: callq  0x000000010e0276f4  ;*arraylength
                                                ; - java.util.AbstractCollection::toArray@6 (line 177)
                                                ;   {runtime_call}
  0x000000011035ef71: mov    $0xfffffff4,%esi
  0x000000011035ef76: nop
  0x000000011035ef77: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop off=1052}
                                                ;*checkcast
                                                ; - java.util.AbstractCollection::toArray@26 (line 179)
                                                ;   {runtime_call}
  0x000000011035ef7c: callq  0x000000010e0276f4  ;*invokestatic arraycopy
                                                ; - java.util.AbstractCollection::toArray@92 (line 189)
                                                ;   {runtime_call}
  0x000000011035ef81: mov    %rax,%rsi
  0x000000011035ef84: jmp    0x000000011035efac  ;*invokestatic copyOf
                                                ; - java.util.AbstractCollection::toArray@82 (line 187)

  0x000000011035ef86: mov    %rax,%rsi
  0x000000011035ef89: jmp    0x000000011035efac  ;*invokestatic newInstance
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)

  0x000000011035ef8b: mov    %rax,%rsi
  0x000000011035ef8e: jmp    0x000000011035efac  ;*invokestatic finishToArray
                                                ; - java.util.AbstractCollection::toArray@139 (line 199)

  0x000000011035ef90: mov    %rax,%rsi
  0x000000011035ef93: jmp    0x000000011035efac  ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@128 (line 199)

  0x000000011035ef95: mov    %rax,%rsi
  0x000000011035ef98: jmp    0x000000011035efac  ;*invokevirtual iterator
                                                ; - java.util.AbstractCollection::toArray@34 (line 180)

  0x000000011035ef9a: mov    %rax,%rsi
  0x000000011035ef9d: jmp    0x000000011035efac  ;*invokevirtual size
                                                ; - java.util.AbstractCollection::toArray@1 (line 176)

  0x000000011035ef9f: mov    %rax,%rsi
  0x000000011035efa2: jmp    0x000000011035efac  ;*invokeinterface hasNext
                                                ; - java.util.AbstractCollection::toArray@51 (line 183)

  0x000000011035efa4: mov    %rax,%rsi
  0x000000011035efa7: jmp    0x000000011035efac  ;*invokeinterface next
                                                ; - java.util.AbstractCollection::toArray@114 (line 196)

  0x000000011035efa9: mov    %rax,%rsi          ;*invokestatic newInstance
                                                ; - java.util.AbstractCollection::toArray@23 (line 179)

  0x000000011035efac: add    $0x60,%rsp
  0x000000011035efb0: pop    %rbp
  0x000000011035efb1: jmpq   0x0000000110019060  ;*areturn
                                                ; - java.util.AbstractCollection::toArray@146 (line 199)
                                                ;   {runtime_call}
  0x000000011035efb6: hlt
  0x000000011035efb7: hlt
  0x000000011035efb8: hlt
  0x000000011035efb9: hlt
  0x000000011035efba: hlt
  0x000000011035efbb: hlt
  0x000000011035efbc: hlt
  0x000000011035efbd: hlt
  0x000000011035efbe: hlt
  0x000000011035efbf: hlt
[Stub Code]
  0x000000011035efc0: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035efca: jmpq   0x000000011035efca  ;   {runtime_call}
  0x000000011035efcf: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035efd9: jmpq   0x000000011035efd9  ;   {runtime_call}
  0x000000011035efde: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035efe8: jmpq   0x000000011035efe8  ;   {runtime_call}
[Exception Handler]
  0x000000011035efed: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011035eff2: callq  0x000000011035eff7
  0x000000011035eff7: subq   $0x5,(%rsp)
  0x000000011035effc: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035f001: hlt
  0x000000011035f002: hlt
  0x000000011035f003: hlt
  0x000000011035f004: hlt
  0x000000011035f005: hlt
  0x000000011035f006: hlt
  0x000000011035f007: hlt
Decoding compiled method 0x000000011035a450:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012722fbe8} 'getOffsets' '(J[II)I' in 'sun/util/calendar/ZoneInfo'
  # this:     rsi:rsi   = 'sun/util/calendar/ZoneInfo'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx:rcx   = '[I'
  # parm2:    r8        = int
  #           [sp+0x40]  (sp of caller)
  0x000000011035a600: mov    0x8(%rsi),%r10d
  0x000000011035a604: shl    $0x3,%r10
  0x000000011035a608: cmp    %r10,%rax
  0x000000011035a60b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035a611: data32 xchg %ax,%ax
  0x000000011035a614: nopl   0x0(%rax,%rax,1)
  0x000000011035a61c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035a620: mov    %eax,-0x14000(%rsp)
  0x000000011035a627: push   %rbp
  0x000000011035a628: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@-1 (line 249)

  0x000000011035a62c: mov    %r8d,0x10(%rsp)
  0x000000011035a631: mov    %rcx,0x8(%rsp)
  0x000000011035a636: mov    %rsi,(%rsp)
  0x000000011035a63a: cmp    0x24(%rsi),%r12d
  0x000000011035a63e: je     0x000000011035a781  ;*ifnonnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@4 (line 249)

  0x000000011035a644: movslq 0x14(%rsi),%r10
  0x000000011035a648: mov    %rdx,%rbp
  0x000000011035a64b: sub    %r10,%rbp          ;*lsub
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@35 (line 258)

  0x000000011035a64e: mov    %rbp,%rdx
  0x000000011035a651: mov    %r8d,%ecx
  0x000000011035a654: data32 xchg %ax,%ax
  0x000000011035a657: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [8]=Oop off=92}
                                                ;*invokespecial getTransitionIndex
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@41 (line 259)
                                                ;   {optimized virtual_call}
  0x000000011035a65c: test   %eax,%eax
  0x000000011035a65e: jge    0x000000011035a698  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@48 (line 263)

  0x000000011035a660: mov    (%rsp),%rsi
  0x000000011035a664: data32 xchg %ax,%ax
  0x000000011035a667: callq  0x000000010ff580a0  ; OopMap{[8]=Oop off=108}
                                                ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@52 (line 264)
                                                ;   {optimized virtual_call}
  0x000000011035a66c: mov    0x8(%rsp),%r10
  0x000000011035a671: test   %r10,%r10
  0x000000011035a674: je     0x000000011035a68c  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@58 (line 265)

  0x000000011035a676: mov    0xc(%r10),%r11d
  0x000000011035a67a: cmp    $0x1,%r11d
  0x000000011035a67e: jbe    0x000000011035a7bc
  0x000000011035a684: mov    %eax,0x10(%r10)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)

  0x000000011035a688: mov    %r12d,0x14(%r10)   ;*ifnonnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@4 (line 249)

  0x000000011035a68c: add    $0x30,%rsp
  0x000000011035a690: pop    %rbp
  0x000000011035a691: test   %eax,-0x3741697(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035a697: retq
  0x000000011035a698: mov    (%rsp),%r10
  0x000000011035a69c: mov    0x24(%r10),%r10d   ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@76 (line 272)

  0x000000011035a6a0: mov    0xc(%r12,%r10,8),%r8d  ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@79 (line 272)
                                                ; implicit exception: dispatches to 0x000000011035a8be
  0x000000011035a6a5: cmp    %r8d,%eax
  0x000000011035a6a8: jge    0x000000011035a73b  ;*if_icmpge
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@80 (line 272)

  0x000000011035a6ae: cmp    %r8d,%eax
  0x000000011035a6b1: jae    0x000000011035a7d5  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@89 (line 273)

  0x000000011035a6b7: mov    (%rsp),%r11
  0x000000011035a6bb: mov    0x28(%r11),%r11d   ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@93 (line 274)

  0x000000011035a6bf: shl    $0x3,%r10
  0x000000011035a6c3: mov    0x10(%r10,%rax,8),%r9  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@89 (line 273)

  0x000000011035a6c8: mov    %r9,%r10
  0x000000011035a6cb: and    $0xf,%r10
  0x000000011035a6cf: mov    %r10d,%ebp         ;*l2i  ; - sun.util.calendar.ZoneInfo::getOffsets@102 (line 274)

  0x000000011035a6d2: mov    0xc(%r12,%r11,8),%ebx  ; implicit exception: dispatches to 0x000000011035a8cd
  0x000000011035a6d7: cmp    %ebx,%ebp
  0x000000011035a6d9: jae    0x000000011035a7fd  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)

  0x000000011035a6df: mov    (%rsp),%r10
  0x000000011035a6e3: mov    0x14(%r10),%eax
  0x000000011035a6e7: lea    (%r12,%r11,8),%r10
  0x000000011035a6eb: add    0x10(%r10,%rbp,4),%eax  ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@108 (line 274)

  0x000000011035a6f0: mov    0x8(%rsp),%r8
  0x000000011035a6f5: test   %r8,%r8
  0x000000011035a6f8: je     0x000000011035a68c  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@112 (line 275)

  0x000000011035a6fa: shr    $0x4,%r9
  0x000000011035a6fe: and    $0xf,%r9
  0x000000011035a702: mov    %r9d,%ebp          ;*l2i  ; - sun.util.calendar.ZoneInfo::getOffsets@123 (line 276)

  0x000000011035a705: test   %ebp,%ebp
  0x000000011035a707: je     0x000000011035a7b1  ;*ifne
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@128 (line 277)

  0x000000011035a70d: cmp    %ebx,%ebp
  0x000000011035a70f: jae    0x000000011035a869
  0x000000011035a715: mov    0x10(%r10,%rbp,4),%r10d  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@141 (line 277)

  0x000000011035a71a: mov    %eax,%r9d
  0x000000011035a71d: sub    %r10d,%r9d         ;*istore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@142 (line 277)

  0x000000011035a720: mov    0xc(%r8),%r11d
  0x000000011035a724: cmp    $0x1,%r11d
  0x000000011035a728: jbe    0x000000011035a82d
  0x000000011035a72e: mov    %r9d,0x10(%r8)     ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)

  0x000000011035a732: mov    %r10d,0x14(%r8)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@156 (line 279)

  0x000000011035a736: jmpq   0x000000011035a68c
  0x000000011035a73b: mov    (%rsp),%rsi
  0x000000011035a73f: callq  0x000000010ff580a0  ; OopMap{[0]=Oop [8]=Oop off=324}
                                                ;*invokespecial getLastRule
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)
                                                ;   {optimized virtual_call}
  0x000000011035a744: test   %rax,%rax
  0x000000011035a747: jne    0x000000011035a819  ;*invokespecial getLastRule
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x000000011035a74d: mov    (%rsp),%rsi
  0x000000011035a751: xchg   %ax,%ax
  0x000000011035a753: callq  0x000000010ff580a0  ; OopMap{[8]=Oop off=344}
                                                ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@255 (line 306)
                                                ;   {optimized virtual_call}
  0x000000011035a758: mov    0x8(%rsp),%r11
  0x000000011035a75d: test   %r11,%r11
  0x000000011035a760: je     0x000000011035a68c  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@261 (line 307)

  0x000000011035a766: mov    0xc(%r11),%r10d
  0x000000011035a76a: cmp    $0x1,%r10d
  0x000000011035a76e: jbe    0x000000011035a851
  0x000000011035a774: mov    %eax,0x10(%r11)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)

  0x000000011035a778: mov    %r12d,0x14(%r11)   ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@272 (line 309)

  0x000000011035a77c: jmpq   0x000000011035a68c
  0x000000011035a781: xchg   %ax,%ax
  0x000000011035a783: callq  0x000000010ff580a0  ; OopMap{[8]=Oop off=392}
                                                ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@8 (line 250)
                                                ;   {optimized virtual_call}
  0x000000011035a788: mov    0x8(%rsp),%r10
  0x000000011035a78d: test   %r10,%r10
  0x000000011035a790: je     0x000000011035a68c  ;*ifnull
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@14 (line 251)

  0x000000011035a796: mov    0xc(%r10),%r11d
  0x000000011035a79a: cmp    $0x1,%r11d
  0x000000011035a79e: jbe    0x000000011035a885
  0x000000011035a7a4: mov    %eax,0x10(%r10)    ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)

  0x000000011035a7a8: mov    %r12d,0x14(%r10)   ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@25 (line 253)

  0x000000011035a7ac: jmpq   0x000000011035a68c
  0x000000011035a7b1: mov    %eax,%r9d
  0x000000011035a7b4: xor    %r10d,%r10d
  0x000000011035a7b7: jmpq   0x000000011035a720
  0x000000011035a7bc: mov    $0xffffffe4,%esi
  0x000000011035a7c1: mov    %r10,(%rsp)
  0x000000011035a7c5: mov    %eax,0xc(%rsp)
  0x000000011035a7c9: xchg   %ax,%ax
  0x000000011035a7cb: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=464}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)
                                                ;   {runtime_call}
  0x000000011035a7d0: callq  0x000000010e0276f4  ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@65 (line 266)
                                                ;   {runtime_call}
  0x000000011035a7d5: mov    $0xffffffe4,%esi
  0x000000011035a7da: mov    (%rsp),%rbp
  0x000000011035a7de: mov    0x8(%rsp),%r11
  0x000000011035a7e3: mov    %r11,(%rsp)
  0x000000011035a7e7: mov    %r10d,0x8(%rsp)
  0x000000011035a7ec: mov    %eax,0xc(%rsp)
  0x000000011035a7f0: data32 xchg %ax,%ax
  0x000000011035a7f3: callq  0x000000010ff576a0  ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop off=504}
                                                ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@89 (line 273)
                                                ;   {runtime_call}
  0x000000011035a7f8: callq  0x000000010e0276f4  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@89 (line 273)
                                                ;   {runtime_call}
  0x000000011035a7fd: mov    $0xffffffe4,%esi
  0x000000011035a802: mov    %r9,0x10(%rsp)
  0x000000011035a807: mov    %r11d,0x18(%rsp)
  0x000000011035a80c: data32 xchg %ax,%ax
  0x000000011035a80f: callq  0x000000010ff576a0  ; OopMap{[0]=Oop [8]=Oop [24]=NarrowOop off=532}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x000000011035a814: callq  0x000000010e0276f4  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x000000011035a819: mov    $0xffffffec,%esi
  0x000000011035a81e: mov    %rax,0x18(%rsp)
  0x000000011035a823: callq  0x000000010ff576a0  ; OopMap{[0]=Oop [8]=Oop [24]=Oop off=552}
                                                ;*astore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@164 (line 286)
                                                ;   {runtime_call}
  0x000000011035a828: callq  0x000000010e0276f4  ;*invokespecial getLastRule
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)
                                                ;   {runtime_call}
  0x000000011035a82d: mov    $0xffffffe4,%esi
  0x000000011035a832: mov    %r8,(%rsp)
  0x000000011035a836: mov    %eax,0x8(%rsp)
  0x000000011035a83a: mov    %r10d,0xc(%rsp)
  0x000000011035a83f: mov    %r9d,0x10(%rsp)
  0x000000011035a844: data32 xchg %ax,%ax
  0x000000011035a847: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=588}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)
                                                ;   {runtime_call}
  0x000000011035a84c: callq  0x000000010e0276f4  ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@151 (line 278)
                                                ;   {runtime_call}
  0x000000011035a851: mov    $0xffffffe4,%esi
  0x000000011035a856: mov    %r11,(%rsp)
  0x000000011035a85a: mov    %eax,0xc(%rsp)
  0x000000011035a85e: nop
  0x000000011035a85f: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=612}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)
                                                ;   {runtime_call}
  0x000000011035a864: callq  0x000000010e0276f4  ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@268 (line 308)
                                                ;   {runtime_call}
  0x000000011035a869: mov    $0xffffffe4,%esi
  0x000000011035a86e: mov    %r8,(%rsp)
  0x000000011035a872: mov    %eax,0x8(%rsp)
  0x000000011035a876: mov    %r11d,0xc(%rsp)
  0x000000011035a87b: callq  0x000000010ff576a0  ; OopMap{[0]=Oop [12]=NarrowOop off=640}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@141 (line 277)
                                                ;   {runtime_call}
  0x000000011035a880: callq  0x000000010e0276f4  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@141 (line 277)
                                                ;   {runtime_call}
  0x000000011035a885: mov    $0xffffffe4,%esi
  0x000000011035a88a: mov    %r10,(%rsp)
  0x000000011035a88e: mov    %eax,0xc(%rsp)
  0x000000011035a892: nop
  0x000000011035a893: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=664}
                                                ;*iastore
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@21 (line 252)
                                                ;   {runtime_call}
  0x000000011035a898: callq  0x000000010e0276f4  ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@8 (line 250)
                                                ;   {runtime_call}
  0x000000011035a89d: mov    %rax,%rsi
  0x000000011035a8a0: jmp    0x000000011035a8b4  ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@255 (line 306)

  0x000000011035a8a2: mov    %rax,%rsi
  0x000000011035a8a5: jmp    0x000000011035a8b4  ;*invokespecial getLastRule
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@161 (line 286)

  0x000000011035a8a7: mov    %rax,%rsi
  0x000000011035a8aa: jmp    0x000000011035a8b4  ;*invokespecial getTransitionIndex
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@41 (line 259)

  0x000000011035a8ac: mov    %rax,%rsi
  0x000000011035a8af: jmp    0x000000011035a8b4  ;*invokespecial getLastRawOffset
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@52 (line 264)

  0x000000011035a8b1: mov    %rax,%rsi          ;*invokespecial getTransitionIndex
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@41 (line 259)

  0x000000011035a8b4: add    $0x30,%rsp
  0x000000011035a8b8: pop    %rbp
  0x000000011035a8b9: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035a8be: mov    $0xfffffff6,%esi
  0x000000011035a8c3: callq  0x000000010ff576a0  ; OopMap{off=712}
                                                ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@79 (line 272)
                                                ;   {runtime_call}
  0x000000011035a8c8: callq  0x000000010e0276f4  ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@79 (line 272)
                                                ;   {runtime_call}
  0x000000011035a8cd: mov    $0xfffffff6,%esi
  0x000000011035a8d2: nop
  0x000000011035a8d3: callq  0x000000010ff576a0  ; OopMap{off=728}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@103 (line 274)
                                                ;   {runtime_call}
  0x000000011035a8d8: callq  0x000000010e0276f4  ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getOffsets@26 (line 255)
                                                ;   {runtime_call}
  0x000000011035a8dd: hlt
  0x000000011035a8de: hlt
  0x000000011035a8df: hlt
[Stub Code]
  0x000000011035a8e0: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035a8ea: jmpq   0x000000011035a8ea  ;   {runtime_call}
  0x000000011035a8ef: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035a8f9: jmpq   0x000000011035a8f9  ;   {runtime_call}
  0x000000011035a8fe: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035a908: jmpq   0x000000011035a908  ;   {runtime_call}
  0x000000011035a90d: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035a917: jmpq   0x000000011035a917  ;   {runtime_call}
  0x000000011035a91c: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035a926: jmpq   0x000000011035a926  ;   {runtime_call}
[Exception Handler]
  0x000000011035a92b: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011035a930: callq  0x000000011035a935
  0x000000011035a935: subq   $0x5,(%rsp)
  0x000000011035a93a: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035a93f: hlt
Decoding compiled method 0x0000000110350550:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012727f080} 'size' '()I' in 'java/util/ArrayList$SubList'
  #           [sp+0x50]  (sp of caller)
  0x00000001103506e0: mov    0x8(%rsi),%r10d
  0x00000001103506e4: shl    $0x3,%r10
  0x00000001103506e8: cmp    %rax,%r10
  0x00000001103506eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103506f1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x00000001103506fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110350700: mov    %eax,-0x14000(%rsp)
  0x0000000110350707: push   %rbp
  0x0000000110350708: sub    $0x40,%rsp
  0x000000011035070c: movabs $0x127282388,%rax  ;   {metadata(method data for {method} {0x000000012727f080} 'size' '()I' in 'java/util/ArrayList$SubList')}
  0x0000000110350716: mov    0xdc(%rax),%edx
  0x000000011035071c: add    $0x8,%edx
  0x000000011035071f: mov    %edx,0xdc(%rax)
  0x0000000110350725: movabs $0x12727f080,%rax  ;   {metadata({method} {0x000000012727f080} 'size' '()I' in 'java/util/ArrayList$SubList')}
  0x000000011035072f: and    $0x0,%edx
  0x0000000110350732: cmp    $0x0,%edx
  0x0000000110350735: je     0x000000011035081e  ;*aload_0
                                                ; - java.util.ArrayList$SubList::size@0 (line 1048)

  0x000000011035073b: mov    %rsi,%rax
  0x000000011035073e: movabs $0x127282388,%rdx  ;   {metadata(method data for {method} {0x000000012727f080} 'size' '()I' in 'java/util/ArrayList$SubList')}
  0x0000000110350748: addq   $0x1,0x108(%rdx)
  0x0000000110350750: movabs $0x1272824b8,%rax  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035075a: mov    0xdc(%rax),%edx
  0x0000000110350760: add    $0x8,%edx
  0x0000000110350763: mov    %edx,0xdc(%rax)
  0x0000000110350769: movabs $0x12727f8f8,%rax  ;   {metadata({method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x0000000110350773: and    $0x7ffff8,%edx
  0x0000000110350779: cmp    $0x0,%edx
  0x000000011035077c: je     0x0000000110350835
  0x0000000110350782: mov    0x20(%rsi),%eax
  0x0000000110350785: shl    $0x3,%rax          ;*getfield this$0
                                                ; - java.util.ArrayList$SubList::checkForComodification@1 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x0000000110350789: mov    0xc(%rax),%eax     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@4 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ; implicit exception: dispatches to 0x000000011035084c
  0x000000011035078c: mov    0xc(%rsi),%edx     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@8 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x000000011035078f: cmp    %edx,%eax
  0x0000000110350791: movabs $0x1272824b8,%rax  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035079b: movabs $0x108,%rdx
  0x00000001103507a5: je     0x00000001103507b5
  0x00000001103507ab: movabs $0x118,%rdx
  0x00000001103507b5: mov    (%rax,%rdx,1),%rdi
  0x00000001103507b9: lea    0x1(%rdi),%rdi
  0x00000001103507bd: mov    %rdi,(%rax,%rdx,1)
  0x00000001103507c1: jne    0x00000001103507d6  ;*if_icmpeq
                                                ; - java.util.ArrayList$SubList::checkForComodification@11 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x00000001103507c7: mov    0x18(%rsi),%eax    ;*getfield size
                                                ; - java.util.ArrayList$SubList::size@5 (line 1049)

  0x00000001103507ca: add    $0x40,%rsp
  0x00000001103507ce: pop    %rbp
  0x00000001103507cf: test   %eax,-0x37376d5(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103507d5: retq                      ;*ireturn
                                                ; - java.util.ArrayList$SubList::size@8 (line 1049)

  0x00000001103507d6: mov    %rsi,0x30(%rsp)
  0x00000001103507db: nopl   0x0(%rax,%rax,1)
  0x00000001103507e0: jmpq   0x0000000110350860  ;   {no_reloc}
  0x00000001103507e5: add    %al,(%rax)
  0x00000001103507e7: add    %al,(%rax)
  0x00000001103507e9: add    %ch,%cl
  0x00000001103507eb: jnp    0x00000001103507ed
  0x00000001103507ed: add    %al,(%rax)         ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x00000001103507ef: mov    %rax,%rdi
  0x00000001103507f2: movabs $0x1272824b8,%rbx  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x00000001103507fc: addq   $0x1,0x128(%rbx)
  0x0000000110350804: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::checkForComodification@18 (line 1239)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x0000000110350807: mov    %rax,0x28(%rsp)
  0x000000011035080c: nop
  0x000000011035080d: nop
  0x000000011035080e: nop
  0x000000011035080f: callq  0x000000010ff580a0  ; OopMap{[48]=Oop [40]=Oop off=308}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::checkForComodification@18 (line 1239)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {optimized virtual_call}
  0x0000000110350814: mov    0x28(%rsp),%rax
  0x0000000110350819: jmpq   0x00000001103508a2
  0x000000011035081e: mov    %rax,0x8(%rsp)
  0x0000000110350823: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035082b: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=336}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::size@-1 (line 1048)
                                                ;   {runtime_call}
  0x0000000110350830: jmpq   0x000000011035073b
  0x0000000110350835: mov    %rax,0x8(%rsp)
  0x000000011035083a: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110350842: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=359}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::checkForComodification@-1 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {runtime_call}
  0x0000000110350847: jmpq   0x0000000110350782
  0x000000011035084c: callq  0x000000011000e080  ; OopMap{rsi=Oop off=369}
                                                ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@4 (line 1238)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {runtime_call}
  0x0000000110350851: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035085b: mov    $0xa050f00,%eax
  0x0000000110350860: callq  0x00000001100118a0  ; OopMap{[48]=Oop off=389}
                                                ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {runtime_call}
  0x0000000110350865: jmpq   0x00000001103507e0
  0x000000011035086a: mov    %rdx,%rdx
  0x000000011035086d: callq  0x000000011000e520  ; OopMap{[48]=Oop off=402}
                                                ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {runtime_call}
  0x0000000110350872: jmpq   0x00000001103507ef
  0x0000000110350877: nop
  0x0000000110350878: nop
  0x0000000110350879: mov    0x2a8(%r15),%rax
  0x0000000110350880: movabs $0x0,%r10
  0x000000011035088a: mov    %r10,0x2a8(%r15)
  0x0000000110350891: movabs $0x0,%r10
  0x000000011035089b: mov    %r10,0x2b0(%r15)
  0x00000001103508a2: add    $0x40,%rsp
  0x00000001103508a6: pop    %rbp
  0x00000001103508a7: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103508ac: hlt
  0x00000001103508ad: hlt
  0x00000001103508ae: hlt
  0x00000001103508af: hlt
  0x00000001103508b0: hlt
  0x00000001103508b1: hlt
  0x00000001103508b2: hlt
  0x00000001103508b3: hlt
  0x00000001103508b4: hlt
  0x00000001103508b5: hlt
  0x00000001103508b6: hlt
  0x00000001103508b7: hlt
  0x00000001103508b8: hlt
  0x00000001103508b9: hlt
  0x00000001103508ba: hlt
  0x00000001103508bb: hlt
  0x00000001103508bc: hlt
  0x00000001103508bd: hlt
  0x00000001103508be: hlt
  0x00000001103508bf: hlt
[Stub Code]
  0x00000001103508c0: nop                       ;   {no_reloc}
  0x00000001103508c1: nop
  0x00000001103508c2: nop
  0x00000001103508c3: nop
  0x00000001103508c4: nop
  0x00000001103508c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103508cf: jmpq   0x00000001103508cf  ;   {runtime_call}
[Exception Handler]
  0x00000001103508d4: callq  0x00000001100100e0  ;   {runtime_call}
  0x00000001103508d9: mov    %rsp,-0x28(%rsp)
  0x00000001103508de: sub    $0x80,%rsp
  0x00000001103508e5: mov    %rax,0x78(%rsp)
  0x00000001103508ea: mov    %rcx,0x70(%rsp)
  0x00000001103508ef: mov    %rdx,0x68(%rsp)
  0x00000001103508f4: mov    %rbx,0x60(%rsp)
  0x00000001103508f9: mov    %rbp,0x50(%rsp)
  0x00000001103508fe: mov    %rsi,0x48(%rsp)
  0x0000000110350903: mov    %rdi,0x40(%rsp)
  0x0000000110350908: mov    %r8,0x38(%rsp)
  0x000000011035090d: mov    %r9,0x30(%rsp)
  0x0000000110350912: mov    %r10,0x28(%rsp)
  0x0000000110350917: mov    %r11,0x20(%rsp)
  0x000000011035091c: mov    %r12,0x18(%rsp)
  0x0000000110350921: mov    %r13,0x10(%rsp)
  0x0000000110350926: mov    %r14,0x8(%rsp)
  0x000000011035092b: mov    %r15,(%rsp)
  0x000000011035092f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110350939: movabs $0x1103508d9,%rsi  ;   {internal_word}
  0x0000000110350943: mov    %rsp,%rdx
  0x0000000110350946: and    $0xfffffffffffffff0,%rsp
  0x000000011035094a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035094f: hlt
[Deopt Handler Code]
  0x0000000110350950: movabs $0x110350950,%r10  ;   {section_word}
  0x000000011035095a: push   %r10
  0x000000011035095c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110350961: hlt
  0x0000000110350962: hlt
  0x0000000110350963: hlt
  0x0000000110350964: hlt
  0x0000000110350965: hlt
  0x0000000110350966: hlt
  0x0000000110350967: hlt
Decoding compiled method 0x000000011035b1d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127281cc8} '<clinit>' '()V' in 'java/lang/Shutdown'
  #           [sp+0x20]  (sp of caller)
  0x000000011035b320: mov    %eax,-0x14000(%rsp)
  0x000000011035b327: push   %rbp
  0x000000011035b328: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.lang.Shutdown::<clinit>@-1 (line 43)

  0x000000011035b32c: mov    0x60(%r15),%rax
  0x000000011035b330: mov    %rax,%r10
  0x000000011035b333: add    $0x38,%r10
  0x000000011035b337: movabs $0x76b2af308,%rbp  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035b341: mov    %r12d,0x80(%rbp)   ;*putstatic state
                                                ; - java.lang.Shutdown::<clinit>@1 (line 43)

  0x000000011035b348: mov    %r12b,0x8c(%rbp)   ;*putstatic runFinalizersOnExit
                                                ; - java.lang.Shutdown::<clinit>@5 (line 46)

  0x000000011035b34f: cmp    0x70(%r15),%r10
  0x000000011035b353: jb     0x000000011035b3a5  ;*synchronization entry
                                                ; - java.lang.Shutdown::<clinit>@-1 (line 43)

  0x000000011035b355: movabs $0x7c001a978,%rsi  ;   {metadata('java/lang/Runnable'[])}
  0x000000011035b35f: mov    $0xa,%edx
  0x000000011035b364: data32 xchg %ax,%ax
  0x000000011035b367: callq  0x00000001100141e0  ; OopMap{rbp=Oop off=76}
                                                ;*anewarray
                                                ; - java.lang.Shutdown::<clinit>@10 (line 54)
                                                ;   {runtime_call}
  0x000000011035b36c: mov    %r12d,0x88(%rbp)   ;*putstatic currentRunningHook
                                                ; - java.lang.Shutdown::<clinit>@17 (line 57)

  0x000000011035b373: mov    %rax,%r11
  0x000000011035b376: shr    $0x3,%r11
  0x000000011035b37a: mov    %r11d,0x68(%rbp)
  0x000000011035b37e: mov    %rbp,%r10
  0x000000011035b381: shr    $0x9,%r10
  0x000000011035b385: mov    $0x1e,%esi
  0x000000011035b38a: movabs $0x109ac3000,%r11
  0x000000011035b394: mov    %r12b,(%r11,%r10,1)  ;*putstatic hooks
                                                ; - java.lang.Shutdown::<clinit>@13 (line 54)

  0x000000011035b398: data32 xchg %ax,%ax
  0x000000011035b39b: callq  0x000000010ff576a0  ; OopMap{off=128}
                                                ;*new  ; - java.lang.Shutdown::<clinit>@20 (line 61)
                                                ;   {runtime_call}
  0x000000011035b3a0: callq  0x000000010e0276f4  ;*new
                                                ; - java.lang.Shutdown::<clinit>@20 (line 61)
                                                ;   {runtime_call}
  0x000000011035b3a5: mov    %r10,0x60(%r15)
  0x000000011035b3a9: prefetchw 0xc0(%r10)
  0x000000011035b3b1: movq   $0x1,(%rax)
  0x000000011035b3b8: prefetchw 0x100(%r10)
  0x000000011035b3c0: movl   $0xf800352f,0x8(%rax)  ;   {metadata('java/lang/Runnable'[])}
  0x000000011035b3c7: prefetchw 0x140(%r10)
  0x000000011035b3cf: movl   $0xa,0xc(%rax)
  0x000000011035b3d6: prefetchw 0x180(%r10)
  0x000000011035b3de: mov    %r12,0x10(%rax)
  0x000000011035b3e2: mov    %r12,0x18(%rax)
  0x000000011035b3e6: mov    %r12,0x20(%rax)
  0x000000011035b3ea: mov    %r12,0x28(%rax)
  0x000000011035b3ee: mov    %r12,0x30(%rax)
  0x000000011035b3f2: jmpq   0x000000011035b36c  ;*anewarray
                                                ; - java.lang.Shutdown::<clinit>@10 (line 54)

  0x000000011035b3f7: mov    %rax,%rsi
  0x000000011035b3fa: add    $0x10,%rsp
  0x000000011035b3fe: pop    %rbp
  0x000000011035b3ff: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035b404: hlt
  0x000000011035b405: hlt
  0x000000011035b406: hlt
  0x000000011035b407: hlt
  0x000000011035b408: hlt
  0x000000011035b409: hlt
  0x000000011035b40a: hlt
  0x000000011035b40b: hlt
  0x000000011035b40c: hlt
  0x000000011035b40d: hlt
  0x000000011035b40e: hlt
  0x000000011035b40f: hlt
  0x000000011035b410: hlt
  0x000000011035b411: hlt
  0x000000011035b412: hlt
  0x000000011035b413: hlt
  0x000000011035b414: hlt
  0x000000011035b415: hlt
  0x000000011035b416: hlt
  0x000000011035b417: hlt
  0x000000011035b418: hlt
  0x000000011035b419: hlt
  0x000000011035b41a: hlt
  0x000000011035b41b: hlt
  0x000000011035b41c: hlt
  0x000000011035b41d: hlt
  0x000000011035b41e: hlt
  0x000000011035b41f: hlt
[Exception Handler]
[Stub Code]
  0x000000011035b420: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x000000011035b425: callq  0x000000011035b42a
  0x000000011035b42a: subq   $0x5,(%rsp)
  0x000000011035b42f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035b434: hlt
  0x000000011035b435: hlt
  0x000000011035b436: hlt
  0x000000011035b437: hlt
Decoding compiled method 0x000000011035a190:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012727f080} 'size' '()I' in 'java/util/ArrayList$SubList'
  #           [sp+0x20]  (sp of caller)
  0x000000011035a2e0: mov    0x8(%rsi),%r10d
  0x000000011035a2e4: shl    $0x3,%r10
  0x000000011035a2e8: cmp    %r10,%rax
  0x000000011035a2eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035a2f1: data32 xchg %ax,%ax
  0x000000011035a2f4: nopl   0x0(%rax,%rax,1)
  0x000000011035a2fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035a300: mov    %eax,-0x14000(%rsp)
  0x000000011035a307: push   %rbp
  0x000000011035a308: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::size@-1 (line 1048)

  0x000000011035a30c: mov    %rsi,%rbp
  0x000000011035a30f: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=52}
                                                ;*invokespecial checkForComodification
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)
                                                ;   {optimized virtual_call}
  0x000000011035a314: mov    0x18(%rbp),%eax    ;*getfield size
                                                ; - java.util.ArrayList$SubList::size@5 (line 1049)

  0x000000011035a317: add    $0x10,%rsp
  0x000000011035a31b: pop    %rbp
  0x000000011035a31c: test   %eax,-0x3741322(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035a322: retq                      ;*invokespecial checkForComodification
                                                ; - java.util.ArrayList$SubList::size@1 (line 1048)

  0x000000011035a323: mov    %rax,%rsi
  0x000000011035a326: add    $0x10,%rsp
  0x000000011035a32a: pop    %rbp
  0x000000011035a32b: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035a330: hlt
  0x000000011035a331: hlt
  0x000000011035a332: hlt
  0x000000011035a333: hlt
  0x000000011035a334: hlt
  0x000000011035a335: hlt
  0x000000011035a336: hlt
  0x000000011035a337: hlt
  0x000000011035a338: hlt
  0x000000011035a339: hlt
  0x000000011035a33a: hlt
  0x000000011035a33b: hlt
  0x000000011035a33c: hlt
  0x000000011035a33d: hlt
  0x000000011035a33e: hlt
  0x000000011035a33f: hlt
[Stub Code]
  0x000000011035a340: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035a34a: jmpq   0x000000011035a34a  ;   {runtime_call}
[Exception Handler]
  0x000000011035a34f: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011035a354: callq  0x000000011035a359
  0x000000011035a359: subq   $0x5,(%rsp)
  0x000000011035a35e: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035a363: hlt
  0x000000011035a364: hlt
  0x000000011035a365: hlt
  0x000000011035a366: hlt
  0x000000011035a367: hlt
Decoding compiled method 0x00000001103596d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo'
  # this:     rsi:rsi   = 'sun/util/calendar/ZoneInfo'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx       = int
  #           [sp+0x60]  (sp of caller)
  0x0000000110359860: mov    0x8(%rsi),%r10d
  0x0000000110359864: shl    $0x3,%r10
  0x0000000110359868: cmp    %rax,%r10
  0x000000011035986b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110359871: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035987c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110359880: mov    %eax,-0x14000(%rsp)
  0x0000000110359887: push   %rbp
  0x0000000110359888: sub    $0x50,%rsp
  0x000000011035988c: mov    %rdx,%rdi
  0x000000011035988f: mov    %rcx,%rbx
  0x0000000110359892: movabs $0x127280a78,%rax  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x000000011035989c: mov    0xdc(%rax),%edx
  0x00000001103598a2: add    $0x8,%edx
  0x00000001103598a5: mov    %edx,0xdc(%rax)
  0x00000001103598ab: movabs $0x12722fd28,%rax  ;   {metadata({method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103598b5: and    $0x0,%edx
  0x00000001103598b8: cmp    $0x0,%edx
  0x00000001103598bb: je     0x0000000110359beb  ;*iconst_0
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@0 (line 315)

  0x00000001103598c1: mov    0x24(%rsi),%eax
  0x00000001103598c4: shl    $0x3,%rax          ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@4 (line 316)

  0x00000001103598c8: mov    0xc(%rax),%eax     ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@7 (line 316)
                                                ; implicit exception: dispatches to 0x0000000110359c02
  0x00000001103598cb: dec    %eax
  0x00000001103598cd: mov    %rax,%r8
  0x00000001103598d0: mov    $0x0,%r9d          ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@12 (line 318)

  0x00000001103598d6: xchg   %ax,%ax
  0x00000001103598d8: cmp    %r8d,%r9d
  0x00000001103598db: movabs $0x127280a78,%rax  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103598e5: movabs $0x108,%rdx
  0x00000001103598ef: jg     0x00000001103598ff
  0x00000001103598f5: movabs $0x118,%rdx
  0x00000001103598ff: mov    (%rax,%rdx,1),%rcx
  0x0000000110359903: lea    0x1(%rcx),%rcx
  0x0000000110359907: mov    %rcx,(%rax,%rdx,1)
  0x000000011035990b: jg     0x0000000110359b7b  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x0000000110359911: mov    %r8,%rax
  0x0000000110359914: add    %r9d,%eax
  0x0000000110359917: mov    $0x2,%ecx
  0x000000011035991c: cmp    $0x80000000,%eax
  0x0000000110359922: jne    0x0000000110359933
  0x0000000110359928: xor    %edx,%edx
  0x000000011035992a: cmp    $0xffffffffffffffff,%ecx
  0x000000011035992d: je     0x0000000110359936
  0x0000000110359933: cltd
  0x0000000110359934: idiv   %ecx               ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)
                                                ; implicit exception: dispatches to 0x0000000110359c07
  0x0000000110359936: mov    0x24(%rsi),%ecx
  0x0000000110359939: shl    $0x3,%rcx          ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@29 (line 320)

  0x000000011035993d: movslq %eax,%rdx
  0x0000000110359940: cmp    0xc(%rcx),%eax     ; implicit exception: dispatches to 0x0000000110359c0c
  0x0000000110359943: jae    0x0000000110359c16
  0x0000000110359949: mov    0x10(%rcx,%rdx,8),%r11  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)

  0x000000011035994e: mov    $0xc,%ecx
  0x0000000110359953: mov    %r11,%rdx
  0x0000000110359956: sar    %cl,%rdx
  0x0000000110359959: cmp    $0x0,%ebx
  0x000000011035995c: movabs $0x127280a78,%rcx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359966: movabs $0x128,%r13
  0x0000000110359970: je     0x0000000110359980
  0x0000000110359976: movabs $0x138,%r13
  0x0000000110359980: mov    (%rcx,%r13,1),%r14
  0x0000000110359984: lea    0x1(%r14),%r14
  0x0000000110359988: mov    %r14,(%rcx,%r13,1)
  0x000000011035998c: je     0x00000001103599c7  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@45 (line 322)

  0x0000000110359992: mov    0x28(%rsi),%ecx
  0x0000000110359995: shl    $0x3,%rcx          ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@51 (line 323)

  0x0000000110359999: mov    %r11,%r13
  0x000000011035999c: movabs $0xf,%r10
  0x00000001103599a6: and    %r10,%r13
  0x00000001103599a9: mov    %r13d,%r13d
  0x00000001103599ac: movslq %r13d,%r14
  0x00000001103599af: cmp    0xc(%rcx),%r13d    ; implicit exception: dispatches to 0x0000000110359c1f
  0x00000001103599b3: jae    0x0000000110359c29
  0x00000001103599b9: mov    0x10(%rcx,%r14,4),%ecx  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)

  0x00000001103599be: movslq %ecx,%rcx
  0x00000001103599c1: add    %rdx,%rcx
  0x00000001103599c4: mov    %rcx,%rdx          ;*iload_3
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@66 (line 325)

  0x00000001103599c7: cmp    $0x1,%ebx
  0x00000001103599ca: movabs $0x127280a78,%rcx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x00000001103599d4: movabs $0x148,%r13
  0x00000001103599de: jne    0x00000001103599ee
  0x00000001103599e4: movabs $0x158,%r13
  0x00000001103599ee: mov    (%rcx,%r13,1),%r14
  0x00000001103599f2: lea    0x1(%r14),%r14
  0x00000001103599f6: mov    %r14,(%rcx,%r13,1)
  0x00000001103599fa: jne    0x0000000110359a71  ;*if_icmpne
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@68 (line 325)

  0x0000000110359a00: mov    $0x4,%ecx
  0x0000000110359a05: shr    %cl,%r11
  0x0000000110359a08: movabs $0xf,%r10
  0x0000000110359a12: and    %r10,%r11
  0x0000000110359a15: mov    %r11d,%r11d
  0x0000000110359a18: cmp    $0x0,%r11d
  0x0000000110359a1c: movabs $0x127280a78,%rcx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359a26: movabs $0x168,%r13
  0x0000000110359a30: je     0x0000000110359a40
  0x0000000110359a36: movabs $0x178,%r13
  0x0000000110359a40: mov    (%rcx,%r13,1),%r14
  0x0000000110359a44: lea    0x1(%r14),%r14
  0x0000000110359a48: mov    %r14,(%rcx,%r13,1)
  0x0000000110359a4c: je     0x0000000110359a71  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@84 (line 327)

  0x0000000110359a52: mov    0x28(%rsi),%ecx
  0x0000000110359a55: shl    $0x3,%rcx          ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@90 (line 328)

  0x0000000110359a59: movslq %r11d,%r13
  0x0000000110359a5c: cmp    0xc(%rcx),%r11d    ; implicit exception: dispatches to 0x0000000110359c32
  0x0000000110359a60: jae    0x0000000110359c3c
  0x0000000110359a66: mov    0x10(%rcx,%r13,4),%ecx  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)

  0x0000000110359a6b: movslq %ecx,%rcx
  0x0000000110359a6e: sub    %rcx,%rdx
  0x0000000110359a71: mov    %rdx,%rcx
  0x0000000110359a74: cmp    %rdi,%rcx
  0x0000000110359a77: mov    $0xffffffff,%ecx
  0x0000000110359a7c: jl     0x0000000110359a84
  0x0000000110359a7e: setne  %cl
  0x0000000110359a81: movzbl %cl,%ecx
  0x0000000110359a84: mov    %rdx,%rcx
  0x0000000110359a87: cmp    %rdi,%rcx
  0x0000000110359a8a: movabs $0x127280a78,%rcx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359a94: movabs $0x188,%r11
  0x0000000110359a9e: jge    0x0000000110359aae
  0x0000000110359aa4: movabs $0x198,%r11
  0x0000000110359aae: mov    (%rcx,%r11,1),%r13
  0x0000000110359ab2: lea    0x1(%r13),%r13
  0x0000000110359ab6: mov    %r13,(%rcx,%r11,1)
  0x0000000110359aba: jge    0x0000000110359ad7  ;*lcmp
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@103 (line 332)

  0x0000000110359ac0: inc    %eax
  0x0000000110359ac2: movabs $0x127280a78,%rdx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359acc: incl   0x1a8(%rdx)
  0x0000000110359ad2: jmpq   0x0000000110359b2b  ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@113 (line 333)

  0x0000000110359ad7: mov    %rdi,%rcx
  0x0000000110359ada: cmp    %rdx,%rcx
  0x0000000110359add: movabs $0x127280a78,%rdx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359ae7: movabs $0x1c0,%rcx
  0x0000000110359af1: jge    0x0000000110359b01
  0x0000000110359af7: movabs $0x1d0,%rcx
  0x0000000110359b01: mov    (%rdx,%rcx,1),%r8
  0x0000000110359b05: lea    0x1(%r8),%r8
  0x0000000110359b09: mov    %r8,(%rdx,%rcx,1)
  0x0000000110359b0d: jge    0x0000000110359bdf  ;*lcmp
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@119 (line 334)

  0x0000000110359b13: dec    %eax
  0x0000000110359b15: movabs $0x127280a78,%rdx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359b1f: incl   0x1e0(%rdx)
  0x0000000110359b25: mov    %rax,%r8
  0x0000000110359b28: mov    %r9,%rax           ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@129 (line 335)

  0x0000000110359b2b: movabs $0x127280a78,%rdx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359b35: mov    0xe0(%rdx),%ecx
  0x0000000110359b3b: add    $0x8,%ecx
  0x0000000110359b3e: mov    %ecx,0xe0(%rdx)
  0x0000000110359b44: movabs $0x12722fd28,%rdx  ;   {metadata({method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359b4e: and    $0xfff8,%ecx
  0x0000000110359b54: cmp    $0x0,%ecx
  0x0000000110359b57: je     0x0000000110359c45  ; OopMap{rsi=Oop off=765}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x0000000110359b5d: test   %eax,-0x3740a63(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x0000000110359b63: movabs $0x127280a78,%rdx  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359b6d: incl   0x1f8(%rdx)
  0x0000000110359b73: mov    %rax,%r9
  0x0000000110359b76: jmpq   0x00000001103598d8  ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x0000000110359b7b: mov    0x24(%rsi),%eax
  0x0000000110359b7e: shl    $0x3,%rax          ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@141 (line 342)

  0x0000000110359b82: mov    0xc(%rax),%eax     ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@144 (line 342)
                                                ; implicit exception: dispatches to 0x0000000110359c5c
  0x0000000110359b85: cmp    %eax,%r9d
  0x0000000110359b88: movabs $0x127280a78,%rax  ;   {metadata(method data for {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo')}
  0x0000000110359b92: movabs $0x210,%rsi
  0x0000000110359b9c: jl     0x0000000110359bac
  0x0000000110359ba2: movabs $0x220,%rsi
  0x0000000110359bac: mov    (%rax,%rsi,1),%rdi
  0x0000000110359bb0: lea    0x1(%rdi),%rdi
  0x0000000110359bb4: mov    %rdi,(%rax,%rsi,1)
  0x0000000110359bb8: jl     0x0000000110359bcd  ;*if_icmplt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@145 (line 342)

  0x0000000110359bbe: mov    %r9,%rax
  0x0000000110359bc1: add    $0x50,%rsp
  0x0000000110359bc5: pop    %rbp
  0x0000000110359bc6: test   %eax,-0x3740acc(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110359bcc: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@150 (line 343)

  0x0000000110359bcd: dec    %r9d
  0x0000000110359bd0: mov    %r9,%rax
  0x0000000110359bd3: add    $0x50,%rsp
  0x0000000110359bd7: pop    %rbp
  0x0000000110359bd8: test   %eax,-0x3740ade(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110359bde: retq                      ;*ireturn
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@155 (line 345)

  0x0000000110359bdf: add    $0x50,%rsp
  0x0000000110359be3: pop    %rbp
  0x0000000110359be4: test   %eax,-0x3740aea(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110359bea: retq
  0x0000000110359beb: mov    %rax,0x8(%rsp)
  0x0000000110359bf0: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110359bf8: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=925}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@-1 (line 315)
                                                ;   {runtime_call}
  0x0000000110359bfd: jmpq   0x00000001103598c1
  0x0000000110359c02: callq  0x000000011000e080  ; OopMap{rsi=Oop off=935}
                                                ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@7 (line 316)
                                                ;   {runtime_call}
  0x0000000110359c07: callq  0x000000011000de40  ; OopMap{rsi=Oop off=940}
                                                ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)
                                                ;   {runtime_call}
  0x0000000110359c0c: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=945}
                                                ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)
                                                ;   {runtime_call}
  0x0000000110359c11: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=950}
                                                ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)
                                                ;   {runtime_call}
  0x0000000110359c16: mov    %rax,(%rsp)
  0x0000000110359c1a: callq  0x000000010ff80440  ; OopMap{rsi=Oop rcx=Oop off=959}
                                                ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)
                                                ;   {runtime_call}
  0x0000000110359c1f: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=964}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ;   {runtime_call}
  0x0000000110359c24: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=969}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ;   {runtime_call}
  0x0000000110359c29: mov    %r13,(%rsp)
  0x0000000110359c2d: callq  0x000000010ff80440  ; OopMap{rsi=Oop rcx=Oop off=978}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ;   {runtime_call}
  0x0000000110359c32: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=983}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x0000000110359c37: callq  0x000000011000e080  ; OopMap{rsi=Oop rcx=Oop off=988}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x0000000110359c3c: mov    %r11,(%rsp)
  0x0000000110359c40: callq  0x000000010ff80440  ; OopMap{rsi=Oop rcx=Oop off=997}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x0000000110359c45: mov    %rdx,0x8(%rsp)
  0x0000000110359c4a: movq   $0x87,(%rsp)
  0x0000000110359c52: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=1015}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)
                                                ;   {runtime_call}
  0x0000000110359c57: jmpq   0x0000000110359b5d
  0x0000000110359c5c: callq  0x000000011000e080  ; OopMap{off=1025}
                                                ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@144 (line 342)
                                                ;   {runtime_call}
  0x0000000110359c61: nop
  0x0000000110359c62: nop
  0x0000000110359c63: mov    0x2a8(%r15),%rax
  0x0000000110359c6a: movabs $0x0,%r10
  0x0000000110359c74: mov    %r10,0x2a8(%r15)
  0x0000000110359c7b: movabs $0x0,%r10
  0x0000000110359c85: mov    %r10,0x2b0(%r15)
  0x0000000110359c8c: add    $0x50,%rsp
  0x0000000110359c90: pop    %rbp
  0x0000000110359c91: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110359c96: hlt
  0x0000000110359c97: hlt
  0x0000000110359c98: hlt
  0x0000000110359c99: hlt
  0x0000000110359c9a: hlt
  0x0000000110359c9b: hlt
  0x0000000110359c9c: hlt
  0x0000000110359c9d: hlt
  0x0000000110359c9e: hlt
  0x0000000110359c9f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110359ca0: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110359ca5: mov    %rsp,-0x28(%rsp)
  0x0000000110359caa: sub    $0x80,%rsp
  0x0000000110359cb1: mov    %rax,0x78(%rsp)
  0x0000000110359cb6: mov    %rcx,0x70(%rsp)
  0x0000000110359cbb: mov    %rdx,0x68(%rsp)
  0x0000000110359cc0: mov    %rbx,0x60(%rsp)
  0x0000000110359cc5: mov    %rbp,0x50(%rsp)
  0x0000000110359cca: mov    %rsi,0x48(%rsp)
  0x0000000110359ccf: mov    %rdi,0x40(%rsp)
  0x0000000110359cd4: mov    %r8,0x38(%rsp)
  0x0000000110359cd9: mov    %r9,0x30(%rsp)
  0x0000000110359cde: mov    %r10,0x28(%rsp)
  0x0000000110359ce3: mov    %r11,0x20(%rsp)
  0x0000000110359ce8: mov    %r12,0x18(%rsp)
  0x0000000110359ced: mov    %r13,0x10(%rsp)
  0x0000000110359cf2: mov    %r14,0x8(%rsp)
  0x0000000110359cf7: mov    %r15,(%rsp)
  0x0000000110359cfb: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110359d05: movabs $0x110359ca5,%rsi  ;   {internal_word}
  0x0000000110359d0f: mov    %rsp,%rdx
  0x0000000110359d12: and    $0xfffffffffffffff0,%rsp
  0x0000000110359d16: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110359d1b: hlt
[Deopt Handler Code]
  0x0000000110359d1c: movabs $0x110359d1c,%r10  ;   {section_word}
  0x0000000110359d26: push   %r10
  0x0000000110359d28: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110359d2d: hlt
  0x0000000110359d2e: hlt
  0x0000000110359d2f: hlt
Decoding compiled method 0x000000011035c610:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127282848} '<init>' '(Ljava/lang/Shutdown$1;)V' in 'java/lang/Shutdown$Lock'
  # this:     rsi:rsi   = 'java/lang/Shutdown$Lock'
  # parm0:    rdx:rdx   = 'java/lang/Shutdown$1'
  #           [sp+0x40]  (sp of caller)
  0x000000011035c780: mov    0x8(%rsi),%r10d
  0x000000011035c784: shl    $0x3,%r10
  0x000000011035c788: cmp    %rax,%r10
  0x000000011035c78b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035c791: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035c79c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035c7a0: mov    %eax,-0x14000(%rsp)
  0x000000011035c7a7: push   %rbp
  0x000000011035c7a8: sub    $0x30,%rsp
  0x000000011035c7ac: movabs $0x127282970,%rdi  ;   {metadata(method data for {method} {0x0000000127282848} '<init>' '(Ljava/lang/Shutdown$1;)V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c7b6: mov    0xdc(%rdi),%ebx
  0x000000011035c7bc: add    $0x8,%ebx
  0x000000011035c7bf: mov    %ebx,0xdc(%rdi)
  0x000000011035c7c5: movabs $0x127282848,%rdi  ;   {metadata({method} {0x0000000127282848} '<init>' '(Ljava/lang/Shutdown$1;)V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c7cf: and    $0x0,%ebx
  0x000000011035c7d2: cmp    $0x0,%ebx
  0x000000011035c7d5: je     0x000000011035c875  ;*aload_0
                                                ; - java.lang.Shutdown$Lock::<init>@0 (line 60)

  0x000000011035c7db: mov    %rsi,%rdi
  0x000000011035c7de: movabs $0x127282970,%rbx  ;   {metadata(method data for {method} {0x0000000127282848} '<init>' '(Ljava/lang/Shutdown$1;)V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c7e8: addq   $0x1,0x108(%rbx)
  0x000000011035c7f0: movabs $0x127282aa8,%rdi  ;   {metadata(method data for {method} {0x00000001272827b0} '<init>' '()V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c7fa: mov    0xdc(%rdi),%ebx
  0x000000011035c800: add    $0x8,%ebx
  0x000000011035c803: mov    %ebx,0xdc(%rdi)
  0x000000011035c809: movabs $0x1272827b0,%rdi  ;   {metadata({method} {0x00000001272827b0} '<init>' '()V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c813: and    $0x7ffff8,%ebx
  0x000000011035c819: cmp    $0x0,%ebx
  0x000000011035c81c: je     0x000000011035c88c
  0x000000011035c822: mov    %rsi,%rdi
  0x000000011035c825: movabs $0x127282aa8,%rbx  ;   {metadata(method data for {method} {0x00000001272827b0} '<init>' '()V' in 'java/lang/Shutdown$Lock')}
  0x000000011035c82f: addq   $0x1,0x108(%rbx)
  0x000000011035c837: movabs $0x12708aa48,%rdi  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x000000011035c841: mov    0xdc(%rdi),%ebx
  0x000000011035c847: add    $0x8,%ebx
  0x000000011035c84a: mov    %ebx,0xdc(%rdi)
  0x000000011035c850: movabs $0x126f12480,%rdi  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x000000011035c85a: and    $0x7ffff8,%ebx
  0x000000011035c860: cmp    $0x0,%ebx
  0x000000011035c863: je     0x000000011035c8a0
  0x000000011035c869: add    $0x30,%rsp
  0x000000011035c86d: pop    %rbp
  0x000000011035c86e: test   %eax,-0x3743774(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035c874: retq
  0x000000011035c875: mov    %rdi,0x8(%rsp)
  0x000000011035c87a: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035c882: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=263}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown$Lock::<init>@-1 (line 60)
                                                ;   {runtime_call}
  0x000000011035c887: jmpq   0x000000011035c7db
  0x000000011035c88c: mov    %rdi,0x8(%rsp)
  0x000000011035c891: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035c899: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=286}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown$Lock::<init>@-1 (line 60)
                                                ; - java.lang.Shutdown$Lock::<init>@1 (line 60)
                                                ;   {runtime_call}
  0x000000011035c89e: jmp    0x000000011035c822
  0x000000011035c8a0: mov    %rdi,0x8(%rsp)
  0x000000011035c8a5: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035c8ad: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=306}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.lang.Shutdown$Lock::<init>@1 (line 60)
                                                ; - java.lang.Shutdown$Lock::<init>@1 (line 60)
                                                ;   {runtime_call}
  0x000000011035c8b2: jmp    0x000000011035c869
  0x000000011035c8b4: nop
  0x000000011035c8b5: nop
  0x000000011035c8b6: mov    0x2a8(%r15),%rax
  0x000000011035c8bd: movabs $0x0,%r10
  0x000000011035c8c7: mov    %r10,0x2a8(%r15)
  0x000000011035c8ce: movabs $0x0,%r10
  0x000000011035c8d8: mov    %r10,0x2b0(%r15)
  0x000000011035c8df: add    $0x30,%rsp
  0x000000011035c8e3: pop    %rbp
  0x000000011035c8e4: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035c8e9: hlt
  0x000000011035c8ea: hlt
  0x000000011035c8eb: hlt
  0x000000011035c8ec: hlt
  0x000000011035c8ed: hlt
  0x000000011035c8ee: hlt
  0x000000011035c8ef: hlt
  0x000000011035c8f0: hlt
  0x000000011035c8f1: hlt
  0x000000011035c8f2: hlt
  0x000000011035c8f3: hlt
  0x000000011035c8f4: hlt
  0x000000011035c8f5: hlt
  0x000000011035c8f6: hlt
  0x000000011035c8f7: hlt
  0x000000011035c8f8: hlt
  0x000000011035c8f9: hlt
  0x000000011035c8fa: hlt
  0x000000011035c8fb: hlt
  0x000000011035c8fc: hlt
  0x000000011035c8fd: hlt
  0x000000011035c8fe: hlt
  0x000000011035c8ff: hlt
[Exception Handler]
[Stub Code]
  0x000000011035c900: callq  0x00000001100100e0  ;   {no_reloc}
  0x000000011035c905: mov    %rsp,-0x28(%rsp)
  0x000000011035c90a: sub    $0x80,%rsp
  0x000000011035c911: mov    %rax,0x78(%rsp)
  0x000000011035c916: mov    %rcx,0x70(%rsp)
  0x000000011035c91b: mov    %rdx,0x68(%rsp)
  0x000000011035c920: mov    %rbx,0x60(%rsp)
  0x000000011035c925: mov    %rbp,0x50(%rsp)
  0x000000011035c92a: mov    %rsi,0x48(%rsp)
  0x000000011035c92f: mov    %rdi,0x40(%rsp)
  0x000000011035c934: mov    %r8,0x38(%rsp)
  0x000000011035c939: mov    %r9,0x30(%rsp)
  0x000000011035c93e: mov    %r10,0x28(%rsp)
  0x000000011035c943: mov    %r11,0x20(%rsp)
  0x000000011035c948: mov    %r12,0x18(%rsp)
  0x000000011035c94d: mov    %r13,0x10(%rsp)
  0x000000011035c952: mov    %r14,0x8(%rsp)
  0x000000011035c957: mov    %r15,(%rsp)
  0x000000011035c95b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035c965: movabs $0x11035c905,%rsi  ;   {internal_word}
  0x000000011035c96f: mov    %rsp,%rdx
  0x000000011035c972: and    $0xfffffffffffffff0,%rsp
  0x000000011035c976: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035c97b: hlt
[Deopt Handler Code]
  0x000000011035c97c: movabs $0x11035c97c,%r10  ;   {section_word}
  0x000000011035c986: push   %r10
  0x000000011035c988: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035c98d: hlt
  0x000000011035c98e: hlt
  0x000000011035c98f: hlt
Decoding compiled method 0x000000011035c1d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126fda050} 'listIterator' '()Ljava/util/ListIterator;' in 'java/util/AbstractList'
  #           [sp+0x40]  (sp of caller)
  0x000000011035c340: mov    0x8(%rsi),%r10d
  0x000000011035c344: shl    $0x3,%r10
  0x000000011035c348: cmp    %rax,%r10
  0x000000011035c34b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035c351: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035c35c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035c360: mov    %eax,-0x14000(%rsp)
  0x000000011035c367: push   %rbp
  0x000000011035c368: sub    $0x30,%rsp
  0x000000011035c36c: movabs $0x127282bd8,%rdx  ;   {metadata(method data for {method} {0x0000000126fda050} 'listIterator' '()Ljava/util/ListIterator;' in 'java/util/AbstractList')}
  0x000000011035c376: mov    0xdc(%rdx),%edi
  0x000000011035c37c: add    $0x8,%edi
  0x000000011035c37f: mov    %edi,0xdc(%rdx)
  0x000000011035c385: movabs $0x126fda050,%rdx  ;   {metadata({method} {0x0000000126fda050} 'listIterator' '()Ljava/util/ListIterator;' in 'java/util/AbstractList')}
  0x000000011035c38f: and    $0x0,%edi
  0x000000011035c392: cmp    $0x0,%edi
  0x000000011035c395: je     0x000000011035c450  ;*aload_0
                                                ; - java.util.AbstractList::listIterator@0 (line 299)

  0x000000011035c39b: mov    %rsi,%rdx
  0x000000011035c39e: movabs $0x127282bd8,%rdi  ;   {metadata(method data for {method} {0x0000000126fda050} 'listIterator' '()Ljava/util/ListIterator;' in 'java/util/AbstractList')}
  0x000000011035c3a8: mov    0x8(%rdx),%edx
  0x000000011035c3ab: shl    $0x3,%rdx
  0x000000011035c3af: cmp    0x110(%rdi),%rdx
  0x000000011035c3b6: jne    0x000000011035c3c5
  0x000000011035c3b8: addq   $0x1,0x118(%rdi)
  0x000000011035c3c0: jmpq   0x000000011035c42b
  0x000000011035c3c5: cmp    0x120(%rdi),%rdx
  0x000000011035c3cc: jne    0x000000011035c3db
  0x000000011035c3ce: addq   $0x1,0x128(%rdi)
  0x000000011035c3d6: jmpq   0x000000011035c42b
  0x000000011035c3db: cmpq   $0x0,0x110(%rdi)
  0x000000011035c3e6: jne    0x000000011035c3ff
  0x000000011035c3e8: mov    %rdx,0x110(%rdi)
  0x000000011035c3ef: movq   $0x1,0x118(%rdi)
  0x000000011035c3fa: jmpq   0x000000011035c42b
  0x000000011035c3ff: cmpq   $0x0,0x120(%rdi)
  0x000000011035c40a: jne    0x000000011035c423
  0x000000011035c40c: mov    %rdx,0x120(%rdi)
  0x000000011035c413: movq   $0x1,0x128(%rdi)
  0x000000011035c41e: jmpq   0x000000011035c42b
  0x000000011035c423: addq   $0x1,0x108(%rdi)
  0x000000011035c42b: mov    $0x0,%edx          ;*invokevirtual listIterator
                                                ; - java.util.AbstractList::listIterator@2 (line 299)

  0x000000011035c430: nop
  0x000000011035c431: nop
  0x000000011035c432: nop
  0x000000011035c433: nop
  0x000000011035c434: nop
  0x000000011035c435: movabs $0xffffffffffffffff,%rax
  0x000000011035c43f: callq  0x000000010ff582e0  ; OopMap{off=260}
                                                ;*invokevirtual listIterator
                                                ; - java.util.AbstractList::listIterator@2 (line 299)
                                                ;   {virtual_call}
  0x000000011035c444: add    $0x30,%rsp
  0x000000011035c448: pop    %rbp
  0x000000011035c449: test   %eax,-0x374334f(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035c44f: retq
  0x000000011035c450: mov    %rdx,0x8(%rsp)
  0x000000011035c455: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035c45d: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=290}
                                                ;*synchronization entry
                                                ; - java.util.AbstractList::listIterator@-1 (line 299)
                                                ;   {runtime_call}
  0x000000011035c462: jmpq   0x000000011035c39b
  0x000000011035c467: nop
  0x000000011035c468: nop
  0x000000011035c469: mov    0x2a8(%r15),%rax
  0x000000011035c470: movabs $0x0,%r10
  0x000000011035c47a: mov    %r10,0x2a8(%r15)
  0x000000011035c481: movabs $0x0,%r10
  0x000000011035c48b: mov    %r10,0x2b0(%r15)
  0x000000011035c492: add    $0x30,%rsp
  0x000000011035c496: pop    %rbp
  0x000000011035c497: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035c49c: hlt
  0x000000011035c49d: hlt
  0x000000011035c49e: hlt
  0x000000011035c49f: hlt
[Stub Code]
  0x000000011035c4a0: nop                       ;   {no_reloc}
  0x000000011035c4a1: nop
  0x000000011035c4a2: nop
  0x000000011035c4a3: nop
  0x000000011035c4a4: nop
  0x000000011035c4a5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035c4af: jmpq   0x000000011035c4af  ;   {runtime_call}
[Exception Handler]
  0x000000011035c4b4: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011035c4b9: mov    %rsp,-0x28(%rsp)
  0x000000011035c4be: sub    $0x80,%rsp
  0x000000011035c4c5: mov    %rax,0x78(%rsp)
  0x000000011035c4ca: mov    %rcx,0x70(%rsp)
  0x000000011035c4cf: mov    %rdx,0x68(%rsp)
  0x000000011035c4d4: mov    %rbx,0x60(%rsp)
  0x000000011035c4d9: mov    %rbp,0x50(%rsp)
  0x000000011035c4de: mov    %rsi,0x48(%rsp)
  0x000000011035c4e3: mov    %rdi,0x40(%rsp)
  0x000000011035c4e8: mov    %r8,0x38(%rsp)
  0x000000011035c4ed: mov    %r9,0x30(%rsp)
  0x000000011035c4f2: mov    %r10,0x28(%rsp)
  0x000000011035c4f7: mov    %r11,0x20(%rsp)
  0x000000011035c4fc: mov    %r12,0x18(%rsp)
  0x000000011035c501: mov    %r13,0x10(%rsp)
  0x000000011035c506: mov    %r14,0x8(%rsp)
  0x000000011035c50b: mov    %r15,(%rsp)
  0x000000011035c50f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035c519: movabs $0x11035c4b9,%rsi  ;   {internal_word}
  0x000000011035c523: mov    %rsp,%rdx
  0x000000011035c526: and    $0xfffffffffffffff0,%rsp
  0x000000011035c52a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035c52f: hlt
[Deopt Handler Code]
  0x000000011035c530: movabs $0x11035c530,%r10  ;   {section_word}
  0x000000011035c53a: push   %r10
  0x000000011035c53c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035c541: hlt
  0x000000011035c542: hlt
  0x000000011035c543: hlt
  0x000000011035c544: hlt
  0x000000011035c545: hlt
  0x000000011035c546: hlt
  0x000000011035c547: hlt
Decoding compiled method 0x0000000110356950:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127282848} '<init>' '(Ljava/lang/Shutdown$1;)V' in 'java/lang/Shutdown$Lock'
  # this:     rsi:rsi   = 'java/lang/Shutdown$Lock'
  # parm0:    rdx:rdx   = 'java/lang/Shutdown$1'
  #           [sp+0x20]  (sp of caller)
  0x0000000110356aa0: mov    0x8(%rsi),%r10d
  0x0000000110356aa4: shl    $0x3,%r10
  0x0000000110356aa8: cmp    %r10,%rax
  0x0000000110356aab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110356ab1: data32 xchg %ax,%ax
  0x0000000110356ab4: nopl   0x0(%rax,%rax,1)
  0x0000000110356abc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110356ac0: mov    %eax,-0x14000(%rsp)
  0x0000000110356ac7: push   %rbp
  0x0000000110356ac8: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.lang.Shutdown$Lock::<init>@-1 (line 60)

  0x0000000110356acc: data32 xchg %ax,%ax
  0x0000000110356acf: callq  0x000000010ff580a0  ; OopMap{off=52}
                                                ;*invokespecial <init>
                                                ; - java.lang.Shutdown$Lock::<init>@1 (line 60)
                                                ;   {optimized virtual_call}
  0x0000000110356ad4: add    $0x10,%rsp
  0x0000000110356ad8: pop    %rbp
  0x0000000110356ad9: test   %eax,-0x373dadf(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110356adf: retq                      ;*invokespecial <init>
                                                ; - java.lang.Shutdown$Lock::<init>@1 (line 60)

  0x0000000110356ae0: mov    %rax,%rsi
  0x0000000110356ae3: add    $0x10,%rsp
  0x0000000110356ae7: pop    %rbp
  0x0000000110356ae8: jmpq   0x0000000110019060  ;   {runtime_call}
  0x0000000110356aed: hlt
  0x0000000110356aee: hlt
  0x0000000110356aef: hlt
  0x0000000110356af0: hlt
  0x0000000110356af1: hlt
  0x0000000110356af2: hlt
  0x0000000110356af3: hlt
  0x0000000110356af4: hlt
  0x0000000110356af5: hlt
  0x0000000110356af6: hlt
  0x0000000110356af7: hlt
  0x0000000110356af8: hlt
  0x0000000110356af9: hlt
  0x0000000110356afa: hlt
  0x0000000110356afb: hlt
  0x0000000110356afc: hlt
  0x0000000110356afd: hlt
  0x0000000110356afe: hlt
  0x0000000110356aff: hlt
[Stub Code]
  0x0000000110356b00: movabs $0x0,%rbx          ;   {no_reloc}
  0x0000000110356b0a: jmpq   0x0000000110356b0a  ;   {runtime_call}
[Exception Handler]
  0x0000000110356b0f: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110356b14: callq  0x0000000110356b19
  0x0000000110356b19: subq   $0x5,(%rsp)
  0x0000000110356b1e: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110356b23: hlt
  0x0000000110356b24: hlt
  0x0000000110356b25: hlt
  0x0000000110356b26: hlt
  0x0000000110356b27: hlt
Decoding compiled method 0x0000000110359350:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000001272827b0} '<init>' '()V' in 'java/lang/Shutdown$Lock'
  #           [sp+0x40]  (sp of caller)
  0x00000001103594a0: mov    0x8(%rsi),%r10d
  0x00000001103594a4: shl    $0x3,%r10
  0x00000001103594a8: cmp    %rax,%r10
  0x00000001103594ab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103594b1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x00000001103594bc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103594c0: mov    %eax,-0x14000(%rsp)
  0x00000001103594c7: push   %rbp
  0x00000001103594c8: sub    $0x30,%rsp
  0x00000001103594cc: movabs $0x127283510,%rdi
  0x00000001103594d6: mov    0x8(%rdi),%ebx
  0x00000001103594d9: add    $0x8,%ebx
  0x00000001103594dc: mov    %ebx,0x8(%rdi)
  0x00000001103594df: movabs $0x1272827b0,%rdi  ;   {metadata({method} {0x00000001272827b0} '<init>' '()V' in 'java/lang/Shutdown$Lock')}
  0x00000001103594e9: and    $0x3ff8,%ebx
  0x00000001103594ef: cmp    $0x0,%ebx
  0x00000001103594f2: je     0x0000000110359504  ;*aload_0
                                                ; - java.lang.Shutdown$Lock::<init>@0 (line 60)

  0x00000001103594f8: add    $0x30,%rsp
  0x00000001103594fc: pop    %rbp
  0x00000001103594fd: test   %eax,-0x3740403(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110359503: retq
  0x0000000110359504: mov    %rdi,0x8(%rsp)
  0x0000000110359509: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110359511: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=118}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown$Lock::<init>@-1 (line 60)
                                                ;   {runtime_call}
  0x0000000110359516: jmp    0x00000001103594f8
  0x0000000110359518: nop
  0x0000000110359519: nop
  0x000000011035951a: mov    0x2a8(%r15),%rax
  0x0000000110359521: movabs $0x0,%r10
  0x000000011035952b: mov    %r10,0x2a8(%r15)
  0x0000000110359532: movabs $0x0,%r10
  0x000000011035953c: mov    %r10,0x2b0(%r15)
  0x0000000110359543: add    $0x30,%rsp
  0x0000000110359547: pop    %rbp
  0x0000000110359548: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035954d: hlt
  0x000000011035954e: hlt
  0x000000011035954f: hlt
  0x0000000110359550: hlt
  0x0000000110359551: hlt
  0x0000000110359552: hlt
  0x0000000110359553: hlt
  0x0000000110359554: hlt
  0x0000000110359555: hlt
  0x0000000110359556: hlt
  0x0000000110359557: hlt
  0x0000000110359558: hlt
  0x0000000110359559: hlt
  0x000000011035955a: hlt
  0x000000011035955b: hlt
  0x000000011035955c: hlt
  0x000000011035955d: hlt
  0x000000011035955e: hlt
  0x000000011035955f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110359560: callq  0x00000001100100e0  ;   {no_reloc}
  0x0000000110359565: mov    %rsp,-0x28(%rsp)
  0x000000011035956a: sub    $0x80,%rsp
  0x0000000110359571: mov    %rax,0x78(%rsp)
  0x0000000110359576: mov    %rcx,0x70(%rsp)
  0x000000011035957b: mov    %rdx,0x68(%rsp)
  0x0000000110359580: mov    %rbx,0x60(%rsp)
  0x0000000110359585: mov    %rbp,0x50(%rsp)
  0x000000011035958a: mov    %rsi,0x48(%rsp)
  0x000000011035958f: mov    %rdi,0x40(%rsp)
  0x0000000110359594: mov    %r8,0x38(%rsp)
  0x0000000110359599: mov    %r9,0x30(%rsp)
  0x000000011035959e: mov    %r10,0x28(%rsp)
  0x00000001103595a3: mov    %r11,0x20(%rsp)
  0x00000001103595a8: mov    %r12,0x18(%rsp)
  0x00000001103595ad: mov    %r13,0x10(%rsp)
  0x00000001103595b2: mov    %r14,0x8(%rsp)
  0x00000001103595b7: mov    %r15,(%rsp)
  0x00000001103595bb: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x00000001103595c5: movabs $0x110359565,%rsi  ;   {internal_word}
  0x00000001103595cf: mov    %rsp,%rdx
  0x00000001103595d2: and    $0xfffffffffffffff0,%rsp
  0x00000001103595d6: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x00000001103595db: hlt
[Deopt Handler Code]
  0x00000001103595dc: movabs $0x1103595dc,%r10  ;   {section_word}
  0x00000001103595e6: push   %r10
  0x00000001103595e8: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103595ed: hlt
  0x00000001103595ee: hlt
  0x00000001103595ef: hlt
Decoding compiled method 0x000000011035f6d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000126fda050} 'listIterator' '()Ljava/util/ListIterator;' in 'java/util/AbstractList'
  #           [sp+0x20]  (sp of caller)
  0x000000011035f820: mov    0x8(%rsi),%r10d
  0x000000011035f824: shl    $0x3,%r10
  0x000000011035f828: cmp    %r10,%rax
  0x000000011035f82b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035f831: data32 xchg %ax,%ax
  0x000000011035f834: nopl   0x0(%rax,%rax,1)
  0x000000011035f83c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035f840: mov    %eax,-0x14000(%rsp)
  0x000000011035f847: push   %rbp
  0x000000011035f848: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.util.AbstractList::listIterator@-1 (line 299)

  0x000000011035f84c: xor    %edx,%edx
  0x000000011035f84e: data32 xchg %ax,%ax
  0x000000011035f851: movabs $0xffffffffffffffff,%rax
  0x000000011035f85b: callq  0x000000010ff582e0  ; OopMap{off=64}
                                                ;*invokevirtual listIterator
                                                ; - java.util.AbstractList::listIterator@2 (line 299)
                                                ;   {virtual_call}
  0x000000011035f860: add    $0x10,%rsp
  0x000000011035f864: pop    %rbp
  0x000000011035f865: test   %eax,-0x374686b(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035f86b: retq                      ;*invokevirtual listIterator
                                                ; - java.util.AbstractList::listIterator@2 (line 299)

  0x000000011035f86c: mov    %rax,%rsi
  0x000000011035f86f: add    $0x10,%rsp
  0x000000011035f873: pop    %rbp
  0x000000011035f874: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035f879: hlt
  0x000000011035f87a: hlt
  0x000000011035f87b: hlt
  0x000000011035f87c: hlt
  0x000000011035f87d: hlt
  0x000000011035f87e: hlt
  0x000000011035f87f: hlt
[Exception Handler]
[Stub Code]
  0x000000011035f880: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x000000011035f885: callq  0x000000011035f88a
  0x000000011035f88a: subq   $0x5,(%rsp)
  0x000000011035f88f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035f894: hlt
  0x000000011035f895: hlt
  0x000000011035f896: hlt
  0x000000011035f897: hlt
Decoding compiled method 0x000000011035ff10:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012722fd28} 'getTransitionIndex' '(JI)I' in 'sun/util/calendar/ZoneInfo'
  # this:     rsi:rsi   = 'sun/util/calendar/ZoneInfo'
  # parm0:    rdx:rdx   = long
  # parm1:    rcx       = int
  #           [sp+0x60]  (sp of caller)
  0x0000000110360080: mov    0x8(%rsi),%r10d
  0x0000000110360084: shl    $0x3,%r10
  0x0000000110360088: cmp    %r10,%rax
  0x000000011036008b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110360091: data32 xchg %ax,%ax
  0x0000000110360094: nopl   0x0(%rax,%rax,1)
  0x000000011036009c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103600a0: mov    %eax,-0x14000(%rsp)
  0x00000001103600a7: push   %rbp
  0x00000001103600a8: sub    $0x50,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@-1 (line 315)

  0x00000001103600ac: mov    %rdx,0x10(%rsp)
  0x00000001103600b1: mov    %ecx,%r11d
  0x00000001103600b4: mov    %rsi,%rcx
  0x00000001103600b7: mov    0x24(%rsi),%r8d    ;*getfield transitions
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@4 (line 316)

  0x00000001103600bb: vmovd  %r8d,%xmm0
  0x00000001103600c0: mov    0xc(%r12,%r8,8),%edi  ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@7 (line 316)
                                                ; implicit exception: dispatches to 0x00000001103603c6
  0x00000001103600c5: mov    %edi,%r10d
  0x00000001103600c8: dec    %r10d              ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@9 (line 316)

  0x00000001103600cb: xor    %r8d,%r8d
  0x00000001103600ce: test   %r10d,%r10d
  0x00000001103600d1: jl     0x0000000110360104  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x00000001103600d3: mov    0x28(%rsi),%r14d   ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@51 (line 323)

  0x00000001103600d7: vmovd  %xmm0,%r9d
  0x00000001103600dc: lea    (%r12,%r9,8),%rdx
  0x00000001103600e0: mov    %r11d,%r9d
  0x00000001103600e3: test   %r11d,%r11d
  0x00000001103600e6: je     0x00000001103601ab
  0x00000001103600ec: mov    0xc(%r12,%r14,8),%esi  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ; implicit exception: dispatches to 0x00000001103603d5
  0x00000001103600f1: lea    (%r12,%r14,8),%rbx  ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@51 (line 323)

  0x00000001103600f5: cmp    $0x1,%r11d
  0x00000001103600f9: je     0x0000000110360211
  0x00000001103600ff: mov    %r10d,%r11d
  0x0000000110360102: jmp    0x0000000110360129
  0x0000000110360104: xor    %eax,%eax          ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x0000000110360106: cmp    %edi,%eax
  0x0000000110360108: jge    0x0000000110360183  ;*if_icmplt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@145 (line 342)

  0x000000011036010a: dec    %eax               ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@154 (line 345)

  0x000000011036010c: jmp    0x0000000110360183
  0x000000011036010e: inc    %eax               ; OopMap{rcx=Oop rbx=Oop r14=NarrowOop xmm0=NarrowOop xmm1=Oop off=144}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x0000000110360110: test   %eax,-0x3747116(%rip)        # 0x000000010cc19000
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)
                                                ;   {poll}
  0x0000000110360116: cmp    %r11d,%eax
  0x0000000110360119: jg     0x0000000110360106  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x000000011036011b: mov    %eax,%r10d
  0x000000011036011e: add    %r11d,%r10d        ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@23 (line 319)

  0x0000000110360121: mov    %eax,%r8d
  0x0000000110360124: vmovq  %xmm1,%rdx         ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)

  0x0000000110360129: mov    %r10d,%eax
  0x000000011036012c: sar    $0x1f,%eax
  0x000000011036012f: shr    $0x1f,%eax
  0x0000000110360132: add    %r10d,%eax
  0x0000000110360135: sar    %eax               ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)

  0x0000000110360137: cmp    %edi,%eax
  0x0000000110360139: jae    0x0000000110360329
  0x000000011036013f: mov    0x10(%rdx,%rax,8),%r13  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)

  0x0000000110360144: vmovq  %rdx,%xmm1
  0x0000000110360149: mov    %r13,%r10
  0x000000011036014c: and    $0xf,%r10
  0x0000000110360150: mov    %r13,%rdx
  0x0000000110360153: sar    $0xc,%rdx          ;*lshr
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@41 (line 321)

  0x0000000110360157: mov    %r10d,%ebp         ;*l2i  ; - sun.util.calendar.ZoneInfo::getTransitionIndex@60 (line 323)

  0x000000011036015a: cmp    %esi,%ebp
  0x000000011036015c: jae    0x0000000110360355  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)

  0x0000000110360162: movslq 0x10(%rbx,%rbp,4),%r10
  0x0000000110360167: add    %rdx,%r10          ;*ladd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@63 (line 323)

  0x000000011036016a: cmp    0x10(%rsp),%r10
  0x000000011036016f: jl     0x000000011036010e  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@104 (line 332)

  0x0000000110360171: cmp    0x10(%rsp),%r10
  0x0000000110360176: jle    0x0000000110360183  ;*ifle
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@120 (line 334)

  0x0000000110360178: mov    %eax,%r11d
  0x000000011036017b: dec    %r11d              ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@126 (line 335)

  0x000000011036017e: mov    %r8d,%eax
  0x0000000110360181: jmp    0x0000000110360110  ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)

  0x0000000110360183: add    $0x50,%rsp
  0x0000000110360187: pop    %rbp
  0x0000000110360188: test   %eax,-0x374718e(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011036018e: retq
  0x000000011036018f: inc    %eax               ; OopMap{rcx=Oop rdx=Oop xmm0=NarrowOop off=273}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x0000000110360191: test   %eax,-0x3747197(%rip)        # 0x000000010cc19000
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)
                                                ;   {poll}
  0x0000000110360197: cmp    %r11d,%eax
  0x000000011036019a: jg     0x0000000110360106  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x00000001103601a0: mov    %r11d,%r10d
  0x00000001103601a3: add    %eax,%r10d         ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@23 (line 319)

  0x00000001103601a6: mov    %eax,%r8d
  0x00000001103601a9: jmp    0x00000001103601b8
  0x00000001103601ab: cmp    $0x1,%r11d
  0x00000001103601af: je     0x00000001103602bf
  0x00000001103601b5: mov    %r10d,%r11d        ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)

  0x00000001103601b8: mov    %r10d,%eax
  0x00000001103601bb: sar    $0x1f,%eax
  0x00000001103601be: shr    $0x1f,%eax
  0x00000001103601c1: add    %r10d,%eax
  0x00000001103601c4: sar    %eax               ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)

  0x00000001103601c6: cmp    %edi,%eax
  0x00000001103601c8: jae    0x000000011036038d  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)

  0x00000001103601ce: mov    0x10(%rdx,%rax,8),%r10
  0x00000001103601d3: sar    $0xc,%r10          ;*lshr
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@41 (line 321)

  0x00000001103601d7: cmp    0x10(%rsp),%r10
  0x00000001103601dc: jl     0x000000011036018f  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@104 (line 332)

  0x00000001103601de: cmp    0x10(%rsp),%r10
  0x00000001103601e3: jle    0x0000000110360183  ;*ifle
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@120 (line 334)

  0x00000001103601e5: mov    %eax,%r11d
  0x00000001103601e8: dec    %r11d              ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@126 (line 335)

  0x00000001103601eb: mov    %r8d,%eax
  0x00000001103601ee: jmp    0x0000000110360191
  0x00000001103601f0: inc    %eax               ; OopMap{rcx=Oop rbx=Oop r14=NarrowOop xmm0=NarrowOop xmm1=Oop off=370}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x00000001103601f2: test   %eax,-0x37471f8(%rip)        # 0x000000010cc19000
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)
                                                ;   {poll}
  0x00000001103601f8: cmp    %r11d,%eax
  0x00000001103601fb: jg     0x0000000110360106  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x0000000110360201: mov    %r11d,%r10d
  0x0000000110360204: add    %eax,%r10d         ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@23 (line 319)

  0x0000000110360207: mov    %eax,%r8d
  0x000000011036020a: vmovq  %xmm1,%rdx
  0x000000011036020f: jmp    0x0000000110360214
  0x0000000110360211: mov    %r10d,%r11d        ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)

  0x0000000110360214: mov    %r10d,%eax
  0x0000000110360217: sar    $0x1f,%eax
  0x000000011036021a: shr    $0x1f,%eax
  0x000000011036021d: add    %r10d,%eax
  0x0000000110360220: sar    %eax               ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)

  0x0000000110360222: cmp    %edi,%eax
  0x0000000110360224: jae    0x0000000110360329
  0x000000011036022a: mov    0x10(%rdx,%rax,8),%r13  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)

  0x000000011036022f: vmovq  %rdx,%xmm1
  0x0000000110360234: mov    %r13,%r10
  0x0000000110360237: and    $0xf,%r10
  0x000000011036023b: mov    %r13,%rdx
  0x000000011036023e: sar    $0xc,%rdx          ;*lshr
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@41 (line 321)

  0x0000000110360242: mov    %r10d,%ebp         ;*l2i  ; - sun.util.calendar.ZoneInfo::getTransitionIndex@60 (line 323)

  0x0000000110360245: cmp    %esi,%ebp
  0x0000000110360247: jae    0x0000000110360391  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)

  0x000000011036024d: movslq 0x10(%rbx,%rbp,4),%r10
  0x0000000110360252: add    %rdx,%r10          ;*ladd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@63 (line 323)

  0x0000000110360255: shr    $0x4,%r13
  0x0000000110360259: and    $0xf,%r13
  0x000000011036025d: mov    %r13d,%ebp         ;*l2i  ; - sun.util.calendar.ZoneInfo::getTransitionIndex@79 (line 326)

  0x0000000110360260: test   %ebp,%ebp
  0x0000000110360262: je     0x0000000110360274  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@84 (line 327)

  0x0000000110360264: cmp    %esi,%ebp
  0x0000000110360266: jae    0x0000000110360396  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)

  0x000000011036026c: movslq 0x10(%rbx,%rbp,4),%rdx
  0x0000000110360271: sub    %rdx,%r10          ;*lload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@100 (line 332)

  0x0000000110360274: cmp    0x10(%rsp),%r10
  0x0000000110360279: jl     0x00000001103601f0  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@104 (line 332)

  0x000000011036027f: cmp    0x10(%rsp),%r10
  0x0000000110360284: jle    0x0000000110360183  ;*ifle
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@120 (line 334)

  0x000000011036028a: mov    %eax,%r11d
  0x000000011036028d: dec    %r11d              ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@126 (line 335)

  0x0000000110360290: mov    %r8d,%eax
  0x0000000110360293: jmpq   0x00000001103601f2
  0x0000000110360298: nopl   0x0(%rax,%rax,1)
  0x00000001103602a0: mov    %eax,%r8d
  0x00000001103602a3: inc    %r8d               ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@110 (line 333)

  0x00000001103602a6: mov    %r11d,%eax         ; OopMap{rcx=Oop rbx=Oop rdx=Oop r14=NarrowOop xmm0=NarrowOop off=553}
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)

  0x00000001103602a9: test   %eax,-0x37472af(%rip)        # 0x000000010cc19000
                                                ;*goto
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@135 (line 339)
                                                ;   {poll}
  0x00000001103602af: cmp    %eax,%r8d
  0x00000001103602b2: jg     0x0000000110360321  ;*if_icmpgt
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@16 (line 318)

  0x00000001103602b4: mov    %eax,%r10d
  0x00000001103602b7: add    %r8d,%r10d         ;*iadd
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@23 (line 319)

  0x00000001103602ba: mov    %eax,%r11d
  0x00000001103602bd: jmp    0x00000001103602c6
  0x00000001103602bf: lea    (%r12,%r14,8),%rbx  ;*getfield offsets
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@51 (line 323)

  0x00000001103602c3: mov    %r10d,%r11d        ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)

  0x00000001103602c6: mov    %r10d,%eax
  0x00000001103602c9: sar    $0x1f,%eax
  0x00000001103602cc: shr    $0x1f,%eax
  0x00000001103602cf: add    %r10d,%eax
  0x00000001103602d2: sar    %eax               ;*idiv
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@25 (line 319)

  0x00000001103602d4: cmp    %edi,%eax
  0x00000001103602d6: jae    0x000000011036038d
  0x00000001103602dc: mov    0x10(%rdx,%rax,8),%r10  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)

  0x00000001103602e1: mov    %r10,%rsi
  0x00000001103602e4: shr    $0x4,%rsi
  0x00000001103602e8: sar    $0xc,%r10          ;*lshr
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@41 (line 321)

  0x00000001103602ec: and    $0xf,%rsi
  0x00000001103602f0: mov    %esi,%ebp          ;*l2i  ; - sun.util.calendar.ZoneInfo::getTransitionIndex@79 (line 326)

  0x00000001103602f2: test   %ebp,%ebp
  0x00000001103602f4: je     0x000000011036030b  ;*ifeq
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@84 (line 327)

  0x00000001103602f6: mov    0xc(%r12,%r14,8),%esi  ; implicit exception: dispatches to 0x00000001103603fd
  0x00000001103602fb: cmp    %esi,%ebp
  0x00000001103602fd: jae    0x00000001103603c1  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)

  0x0000000110360303: movslq 0x10(%rbx,%rbp,4),%rsi
  0x0000000110360308: sub    %rsi,%r10          ;*lload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@100 (line 332)

  0x000000011036030b: cmp    0x10(%rsp),%r10
  0x0000000110360310: jl     0x00000001103602a0  ;*ifge
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@104 (line 332)

  0x0000000110360312: cmp    0x10(%rsp),%r10
  0x0000000110360317: jle    0x0000000110360183  ;*ifle
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@120 (line 334)

  0x000000011036031d: dec    %eax               ;*isub
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@126 (line 335)

  0x000000011036031f: jmp    0x00000001103602a9
  0x0000000110360321: mov    %r8d,%eax
  0x0000000110360324: jmpq   0x0000000110360106
  0x0000000110360329: mov    %eax,%ebp
  0x000000011036032b: mov    $0xffffffe4,%esi
  0x0000000110360330: mov    %r8d,(%rsp)
  0x0000000110360334: mov    %r11d,0x4(%rsp)
  0x0000000110360339: mov    %rcx,0x8(%rsp)
  0x000000011036033e: mov    %r9d,0x18(%rsp)
  0x0000000110360343: vmovss %xmm0,0x1c(%rsp)
  0x0000000110360349: xchg   %ax,%ax
  0x000000011036034b: callq  0x000000010ff576a0  ; OopMap{[8]=Oop [28]=NarrowOop off=720}
                                                ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)
                                                ;   {runtime_call}
  0x0000000110360350: callq  0x000000010e0276f4  ;*laload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@34 (line 320)
                                                ;   {runtime_call}
  0x0000000110360355: mov    %eax,(%rsp)
  0x0000000110360358: mov    $0xffffffe4,%esi
  0x000000011036035d: mov    %r8d,0x4(%rsp)
  0x0000000110360362: mov    %r11d,0x8(%rsp)
  0x0000000110360367: mov    %rcx,0x18(%rsp)
  0x000000011036036c: mov    %r9d,0xc(%rsp)
  0x0000000110360371: mov    %r13,0x20(%rsp)
  0x0000000110360376: mov    %rdx,0x28(%rsp)
  0x000000011036037b: mov    %r14d,0x30(%rsp)
  0x0000000110360380: data32 xchg %ax,%ax
  0x0000000110360383: callq  0x000000010ff576a0  ; OopMap{[24]=Oop [48]=NarrowOop off=776}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ;   {runtime_call}
  0x0000000110360388: callq  0x000000010e0276f4  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@61 (line 323)
                                                ;   {runtime_call}
  0x000000011036038d: mov    %eax,%ebp
  0x000000011036038f: jmp    0x000000011036032b
  0x0000000110360391: mov    %eax,(%rsp)
  0x0000000110360394: jmp    0x0000000110360358
  0x0000000110360396: mov    %eax,(%rsp)
  0x0000000110360399: mov    $0xffffffe4,%esi
  0x000000011036039e: mov    %r8d,0x4(%rsp)
  0x00000001103603a3: mov    %r11d,0x8(%rsp)
  0x00000001103603a8: mov    %rcx,0x18(%rsp)
  0x00000001103603ad: mov    %r10,0x20(%rsp)
  0x00000001103603b2: mov    %rbx,0x28(%rsp)
  0x00000001103603b7: callq  0x000000010ff576a0  ; OopMap{[24]=Oop [40]=Oop off=828}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x00000001103603bc: callq  0x000000010e0276f4  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x00000001103603c1: mov    %eax,(%rsp)
  0x00000001103603c4: jmp    0x0000000110360399
  0x00000001103603c6: mov    $0xfffffff6,%esi
  0x00000001103603cb: callq  0x000000010ff576a0  ; OopMap{off=848}
                                                ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@7 (line 316)
                                                ;   {runtime_call}
  0x00000001103603d0: callq  0x000000010e0276f4  ;*arraylength
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@7 (line 316)
                                                ;   {runtime_call}
  0x00000001103603d5: mov    $0xffffff86,%esi
  0x00000001103603da: mov    %r10d,%ebp
  0x00000001103603dd: mov    %rcx,(%rsp)
  0x00000001103603e1: mov    0x10(%rsp),%r10
  0x00000001103603e6: mov    %r10,0x8(%rsp)
  0x00000001103603eb: mov    %r11d,0x10(%rsp)
  0x00000001103603f0: data32 xchg %ax,%ax
  0x00000001103603f3: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=888}
                                                ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)
                                                ;   {runtime_call}
  0x00000001103603f8: callq  0x000000010e0276f4  ;*iload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@19 (line 319)
                                                ;   {runtime_call}
  0x00000001103603fd: mov    $0xfffffff6,%esi
  0x0000000110360402: nop
  0x0000000110360403: callq  0x000000010ff576a0  ; OopMap{off=904}
                                                ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x0000000110360408: callq  0x000000010e0276f4  ;*iaload
                                                ; - sun.util.calendar.ZoneInfo::getTransitionIndex@95 (line 328)
                                                ;   {runtime_call}
  0x000000011036040d: hlt
  0x000000011036040e: hlt
  0x000000011036040f: hlt
  0x0000000110360410: hlt
  0x0000000110360411: hlt
  0x0000000110360412: hlt
  0x0000000110360413: hlt
  0x0000000110360414: hlt
  0x0000000110360415: hlt
  0x0000000110360416: hlt
  0x0000000110360417: hlt
  0x0000000110360418: hlt
  0x0000000110360419: hlt
  0x000000011036041a: hlt
  0x000000011036041b: hlt
  0x000000011036041c: hlt
  0x000000011036041d: hlt
  0x000000011036041e: hlt
  0x000000011036041f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110360420: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110360425: callq  0x000000011036042a
  0x000000011036042a: subq   $0x5,(%rsp)
  0x000000011036042f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110360434: hlt
  0x0000000110360435: hlt
  0x0000000110360436: hlt
  0x0000000110360437: hlt
Decoding compiled method 0x000000011035b910:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown'
  #           [sp+0x50]  (sp of caller)
  0x000000011035baa0: mov    %eax,-0x14000(%rsp)
  0x000000011035baa7: push   %rbp
  0x000000011035baa8: sub    $0x40,%rsp
  0x000000011035baac: movabs $0x127283550,%rax  ;   {metadata(method data for {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bab6: mov    0xdc(%rax),%esi
  0x000000011035babc: add    $0x8,%esi
  0x000000011035babf: mov    %esi,0xdc(%rax)
  0x000000011035bac5: movabs $0x127281c08,%rax  ;   {metadata({method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bacf: and    $0x0,%esi
  0x000000011035bad2: cmp    $0x0,%esi
  0x000000011035bad5: je     0x000000011035bdec
  0x000000011035badb: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bae5: mov    0x6c(%rax),%esi
  0x000000011035bae8: shl    $0x3,%rsi          ;*getstatic lock
                                                ; - java.lang.Shutdown::shutdown@0 (line 223)

  0x000000011035baec: lea    0x20(%rsp),%rdi
  0x000000011035baf1: mov    %rsi,0x8(%rdi)
  0x000000011035baf5: mov    (%rsi),%rax        ; implicit exception: dispatches to 0x000000011035be03
  0x000000011035baf8: mov    %rax,%rbx
  0x000000011035bafb: and    $0x7,%rbx
  0x000000011035baff: cmp    $0x5,%rbx
  0x000000011035bb03: jne    0x000000011035bb8a
  0x000000011035bb09: mov    0x8(%rsi),%ebx
  0x000000011035bb0c: shl    $0x3,%rbx
  0x000000011035bb10: mov    0xa8(%rbx),%rbx
  0x000000011035bb17: or     %r15,%rbx
  0x000000011035bb1a: xor    %rax,%rbx
  0x000000011035bb1d: and    $0xffffffffffffff87,%rbx
  0x000000011035bb21: je     0x000000011035bbb2
  0x000000011035bb27: test   $0x7,%rbx
  0x000000011035bb2e: jne    0x000000011035bb77
  0x000000011035bb30: test   $0x300,%rbx
  0x000000011035bb37: jne    0x000000011035bb56
  0x000000011035bb39: and    $0x37f,%rax
  0x000000011035bb40: mov    %rax,%rbx
  0x000000011035bb43: or     %r15,%rbx
  0x000000011035bb46: lock cmpxchg %rbx,(%rsi)
  0x000000011035bb4b: jne    0x000000011035be08
  0x000000011035bb51: jmpq   0x000000011035bbb2
  0x000000011035bb56: mov    0x8(%rsi),%ebx
  0x000000011035bb59: shl    $0x3,%rbx
  0x000000011035bb5d: mov    0xa8(%rbx),%rbx
  0x000000011035bb64: or     %r15,%rbx
  0x000000011035bb67: lock cmpxchg %rbx,(%rsi)
  0x000000011035bb6c: jne    0x000000011035be08
  0x000000011035bb72: jmpq   0x000000011035bbb2
  0x000000011035bb77: mov    0x8(%rsi),%ebx
  0x000000011035bb7a: shl    $0x3,%rbx
  0x000000011035bb7e: mov    0xa8(%rbx),%rbx
  0x000000011035bb85: lock cmpxchg %rbx,(%rsi)
  0x000000011035bb8a: mov    (%rsi),%rax
  0x000000011035bb8d: or     $0x1,%rax
  0x000000011035bb91: mov    %rax,(%rdi)
  0x000000011035bb94: lock cmpxchg %rdi,(%rsi)
  0x000000011035bb99: je     0x000000011035bbb2
  0x000000011035bb9f: sub    %rsp,%rax
  0x000000011035bba2: and    $0xfffffffffffff007,%rax
  0x000000011035bba9: mov    %rax,(%rdi)
  0x000000011035bbac: jne    0x000000011035be08  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)

  0x000000011035bbb2: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bbbc: mov    0x80(%rax),%eax    ;*getstatic state
                                                ; - java.lang.Shutdown::shutdown@6 (line 224)

  0x000000011035bbc2: cmp    $0x0,%eax
  0x000000011035bbc5: je     0x000000011035bbe2
  0x000000011035bbcb: cmp    $0x1,%eax
  0x000000011035bbce: je     0x000000011035bc06
  0x000000011035bbd4: cmp    $0x2,%eax
  0x000000011035bbd7: je     0x000000011035bc06
  0x000000011035bbdd: jmpq   0x000000011035bc06  ;*tableswitch
                                                ; - java.lang.Shutdown::shutdown@9 (line 224)

  0x000000011035bbe2: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bbec: movl   $0x1,0x80(%rax)    ;*putstatic state
                                                ; - java.lang.Shutdown::shutdown@37 (line 226)

  0x000000011035bbf6: movabs $0x127283550,%rax  ;   {metadata(method data for {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bc00: incl   0x158(%rax)        ;*goto
                                                ; - java.lang.Shutdown::shutdown@40 (line 227)

  0x000000011035bc06: lea    0x20(%rsp),%rax
  0x000000011035bc0b: mov    0x8(%rax),%rdi
  0x000000011035bc0f: mov    (%rdi),%rsi
  0x000000011035bc12: and    $0x7,%rsi
  0x000000011035bc16: cmp    $0x5,%rsi
  0x000000011035bc1a: je     0x000000011035bc37
  0x000000011035bc20: mov    (%rax),%rsi
  0x000000011035bc23: test   %rsi,%rsi
  0x000000011035bc26: je     0x000000011035bc37
  0x000000011035bc2c: lock cmpxchg %rsi,(%rdi)
  0x000000011035bc31: jne    0x000000011035be1b  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@44 (line 232)

  0x000000011035bc37: movabs $0x127283550,%rax  ;   {metadata(method data for {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bc41: incl   0x170(%rax)        ;*goto
                                                ; - java.lang.Shutdown::shutdown@45 (line 232)

  0x000000011035bc47: movabs $0x76b2af308,%rsi  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bc51: lea    0x20(%rsp),%rdi
  0x000000011035bc56: mov    %rsi,0x8(%rdi)
  0x000000011035bc5a: mov    (%rsi),%rax        ; implicit exception: dispatches to 0x000000011035be2e
  0x000000011035bc5d: mov    %rax,%rbx
  0x000000011035bc60: and    $0x7,%rbx
  0x000000011035bc64: cmp    $0x5,%rbx
  0x000000011035bc68: jne    0x000000011035bcef
  0x000000011035bc6e: mov    0x8(%rsi),%ebx
  0x000000011035bc71: shl    $0x3,%rbx
  0x000000011035bc75: mov    0xa8(%rbx),%rbx
  0x000000011035bc7c: or     %r15,%rbx
  0x000000011035bc7f: xor    %rax,%rbx
  0x000000011035bc82: and    $0xffffffffffffff87,%rbx
  0x000000011035bc86: je     0x000000011035bd17
  0x000000011035bc8c: test   $0x7,%rbx
  0x000000011035bc93: jne    0x000000011035bcdc
  0x000000011035bc95: test   $0x300,%rbx
  0x000000011035bc9c: jne    0x000000011035bcbb
  0x000000011035bc9e: and    $0x37f,%rax
  0x000000011035bca5: mov    %rax,%rbx
  0x000000011035bca8: or     %r15,%rbx
  0x000000011035bcab: lock cmpxchg %rbx,(%rsi)
  0x000000011035bcb0: jne    0x000000011035be33
  0x000000011035bcb6: jmpq   0x000000011035bd17
  0x000000011035bcbb: mov    0x8(%rsi),%ebx
  0x000000011035bcbe: shl    $0x3,%rbx
  0x000000011035bcc2: mov    0xa8(%rbx),%rbx
  0x000000011035bcc9: or     %r15,%rbx
  0x000000011035bccc: lock cmpxchg %rbx,(%rsi)
  0x000000011035bcd1: jne    0x000000011035be33
  0x000000011035bcd7: jmpq   0x000000011035bd17
  0x000000011035bcdc: mov    0x8(%rsi),%ebx
  0x000000011035bcdf: shl    $0x3,%rbx
  0x000000011035bce3: mov    0xa8(%rbx),%rbx
  0x000000011035bcea: lock cmpxchg %rbx,(%rsi)
  0x000000011035bcef: mov    (%rsi),%rax
  0x000000011035bcf2: or     $0x1,%rax
  0x000000011035bcf6: mov    %rax,(%rdi)
  0x000000011035bcf9: lock cmpxchg %rdi,(%rsi)
  0x000000011035bcfe: je     0x000000011035bd17
  0x000000011035bd04: sub    %rsp,%rax
  0x000000011035bd07: and    $0xfffffffffffff007,%rax
  0x000000011035bd0e: mov    %rax,(%rdi)
  0x000000011035bd11: jne    0x000000011035be33  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)

  0x000000011035bd17: movabs $0x127283550,%rsi  ;   {metadata(method data for {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bd21: addq   $0x1,0x188(%rsi)
  0x000000011035bd29: nop
  0x000000011035bd2a: nop
  0x000000011035bd2b: nop
  0x000000011035bd2c: nop
  0x000000011035bd2d: nop
  0x000000011035bd2e: nop
  0x000000011035bd2f: callq  0x000000010ff58520  ; OopMap{[40]=Oop off=660}
                                                ;*invokestatic sequence
                                                ; - java.lang.Shutdown::shutdown@58 (line 234)
                                                ;   {static_call}
  0x000000011035bd34: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bd3e: lea    0x20(%rsp),%rax
  0x000000011035bd43: mov    0x8(%rax),%rdi
  0x000000011035bd47: mov    (%rdi),%rsi
  0x000000011035bd4a: and    $0x7,%rsi
  0x000000011035bd4e: cmp    $0x5,%rsi
  0x000000011035bd52: je     0x000000011035bd6f
  0x000000011035bd58: mov    (%rax),%rsi
  0x000000011035bd5b: test   %rsi,%rsi
  0x000000011035bd5e: je     0x000000011035bd6f
  0x000000011035bd64: lock cmpxchg %rsi,(%rdi)
  0x000000011035bd69: jne    0x000000011035be46  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@62 (line 235)

  0x000000011035bd6f: movabs $0x127283550,%rax  ;   {metadata(method data for {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown')}
  0x000000011035bd79: incl   0x198(%rax)        ;*goto
                                                ; - java.lang.Shutdown::shutdown@63 (line 235)

  0x000000011035bd7f: add    $0x40,%rsp
  0x000000011035bd83: pop    %rbp
  0x000000011035bd84: test   %eax,-0x3742c8a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035bd8a: retq                      ;*return
                                                ; - java.lang.Shutdown::shutdown@71 (line 236)

  0x000000011035bd8b: mov    0x2a8(%r15),%rax
  0x000000011035bd92: xor    %r10,%r10
  0x000000011035bd95: mov    %r10,0x2a8(%r15)
  0x000000011035bd9c: xor    %r10,%r10
  0x000000011035bd9f: mov    %r10,0x2b0(%r15)
  0x000000011035bda6: mov    %rax,%rsi
  0x000000011035bda9: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035bdb3: lea    0x20(%rsp),%rax
  0x000000011035bdb8: mov    0x8(%rax),%rbx
  0x000000011035bdbc: mov    (%rbx),%rdi
  0x000000011035bdbf: and    $0x7,%rdi
  0x000000011035bdc3: cmp    $0x5,%rdi
  0x000000011035bdc7: je     0x000000011035bde4
  0x000000011035bdcd: mov    (%rax),%rdi
  0x000000011035bdd0: test   %rdi,%rdi
  0x000000011035bdd3: je     0x000000011035bde4
  0x000000011035bdd9: lock cmpxchg %rdi,(%rbx)
  0x000000011035bdde: jne    0x000000011035be59  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@68 (line 235)

  0x000000011035bde4: mov    %rsi,%rax
  0x000000011035bde7: jmpq   0x000000011035be97
  0x000000011035bdec: mov    %rax,0x8(%rsp)
  0x000000011035bdf1: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035bdf9: callq  0x00000001100129e0  ; OopMap{off=862}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown::shutdown@-1 (line 223)
                                                ;   {runtime_call}
  0x000000011035bdfe: jmpq   0x000000011035badb
  0x000000011035be03: callq  0x000000011000e080  ; OopMap{rsi=Oop off=872}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)
                                                ;   {runtime_call}
  0x000000011035be08: mov    %rsi,0x8(%rsp)
  0x000000011035be0d: mov    %rdi,(%rsp)
  0x000000011035be11: callq  0x0000000110010c20  ; OopMap{rsi=Oop [40]=Oop off=886}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)
                                                ;   {runtime_call}
  0x000000011035be16: jmpq   0x000000011035bbb2
  0x000000011035be1b: lea    0x20(%rsp),%rax
  0x000000011035be20: mov    %rax,(%rsp)
  0x000000011035be24: callq  0x0000000110011060  ;   {runtime_call}
  0x000000011035be29: jmpq   0x000000011035bc37
  0x000000011035be2e: callq  0x000000011000e080  ; OopMap{rsi=Oop off=915}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)
                                                ;   {runtime_call}
  0x000000011035be33: mov    %rsi,0x8(%rsp)
  0x000000011035be38: mov    %rdi,(%rsp)
  0x000000011035be3c: callq  0x0000000110010c20  ; OopMap{rsi=Oop [40]=Oop off=929}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)
                                                ;   {runtime_call}
  0x000000011035be41: jmpq   0x000000011035bd17
  0x000000011035be46: lea    0x20(%rsp),%rax
  0x000000011035be4b: mov    %rax,(%rsp)
  0x000000011035be4f: callq  0x0000000110011060  ;   {runtime_call}
  0x000000011035be54: jmpq   0x000000011035bd6f
  0x000000011035be59: lea    0x20(%rsp),%rax
  0x000000011035be5e: mov    %rax,(%rsp)
  0x000000011035be62: callq  0x0000000110011060  ;   {runtime_call}
  0x000000011035be67: jmpq   0x000000011035bde4
  0x000000011035be6c: nop
  0x000000011035be6d: nop
  0x000000011035be6e: mov    0x2a8(%r15),%rax
  0x000000011035be75: movabs $0x0,%r10
  0x000000011035be7f: mov    %r10,0x2a8(%r15)
  0x000000011035be86: movabs $0x0,%r10
  0x000000011035be90: mov    %r10,0x2b0(%r15)
  0x000000011035be97: add    $0x40,%rsp
  0x000000011035be9b: pop    %rbp
  0x000000011035be9c: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035bea1: hlt
  0x000000011035bea2: hlt
  0x000000011035bea3: hlt
  0x000000011035bea4: hlt
  0x000000011035bea5: hlt
  0x000000011035bea6: hlt
  0x000000011035bea7: hlt
  0x000000011035bea8: hlt
  0x000000011035bea9: hlt
  0x000000011035beaa: hlt
  0x000000011035beab: hlt
  0x000000011035beac: hlt
  0x000000011035bead: hlt
  0x000000011035beae: hlt
  0x000000011035beaf: hlt
  0x000000011035beb0: hlt
  0x000000011035beb1: hlt
  0x000000011035beb2: hlt
  0x000000011035beb3: hlt
  0x000000011035beb4: hlt
  0x000000011035beb5: hlt
  0x000000011035beb6: hlt
  0x000000011035beb7: hlt
  0x000000011035beb8: hlt
  0x000000011035beb9: hlt
  0x000000011035beba: hlt
  0x000000011035bebb: hlt
  0x000000011035bebc: hlt
  0x000000011035bebd: hlt
  0x000000011035bebe: hlt
  0x000000011035bebf: hlt
[Stub Code]
  0x000000011035bec0: nop                       ;   {no_reloc}
  0x000000011035bec1: nop
  0x000000011035bec2: nop
  0x000000011035bec3: nop
  0x000000011035bec4: nop
  0x000000011035bec5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035becf: jmpq   0x000000011035becf  ;   {runtime_call}
[Exception Handler]
  0x000000011035bed4: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011035bed9: mov    %rsp,-0x28(%rsp)
  0x000000011035bede: sub    $0x80,%rsp
  0x000000011035bee5: mov    %rax,0x78(%rsp)
  0x000000011035beea: mov    %rcx,0x70(%rsp)
  0x000000011035beef: mov    %rdx,0x68(%rsp)
  0x000000011035bef4: mov    %rbx,0x60(%rsp)
  0x000000011035bef9: mov    %rbp,0x50(%rsp)
  0x000000011035befe: mov    %rsi,0x48(%rsp)
  0x000000011035bf03: mov    %rdi,0x40(%rsp)
  0x000000011035bf08: mov    %r8,0x38(%rsp)
  0x000000011035bf0d: mov    %r9,0x30(%rsp)
  0x000000011035bf12: mov    %r10,0x28(%rsp)
  0x000000011035bf17: mov    %r11,0x20(%rsp)
  0x000000011035bf1c: mov    %r12,0x18(%rsp)
  0x000000011035bf21: mov    %r13,0x10(%rsp)
  0x000000011035bf26: mov    %r14,0x8(%rsp)
  0x000000011035bf2b: mov    %r15,(%rsp)
  0x000000011035bf2f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035bf39: movabs $0x11035bed9,%rsi  ;   {internal_word}
  0x000000011035bf43: mov    %rsp,%rdx
  0x000000011035bf46: and    $0xfffffffffffffff0,%rsp
  0x000000011035bf4a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035bf4f: hlt
[Deopt Handler Code]
  0x000000011035bf50: movabs $0x11035bf50,%r10  ;   {section_word}
  0x000000011035bf5a: push   %r10
  0x000000011035bf5c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035bf61: hlt
  0x000000011035bf62: hlt
  0x000000011035bf63: hlt
  0x000000011035bf64: hlt
  0x000000011035bf65: hlt
  0x000000011035bf66: hlt
  0x000000011035bf67: hlt
Decoding compiled method 0x000000011035df90:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList'
  # this:     rsi:rsi   = 'java/util/ArrayList$SubList'
  # parm0:    rdx       = int
  #           [sp+0xa0]  (sp of caller)
  0x000000011035e160: mov    0x8(%rsi),%r10d
  0x000000011035e164: shl    $0x3,%r10
  0x000000011035e168: cmp    %rax,%r10
  0x000000011035e16b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035e171: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035e17c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035e180: mov    %eax,-0x14000(%rsp)
  0x000000011035e187: push   %rbp
  0x000000011035e188: sub    $0x90,%rsp
  0x000000011035e18f: mov    %rsi,0x68(%rsp)
  0x000000011035e194: mov    %edx,0x70(%rsp)
  0x000000011035e198: movabs $0x127283968,%rax  ;   {metadata(method data for {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList')}
  0x000000011035e1a2: mov    0xdc(%rax),%ecx
  0x000000011035e1a8: add    $0x8,%ecx
  0x000000011035e1ab: mov    %ecx,0xdc(%rax)
  0x000000011035e1b1: movabs $0x12727f590,%rax  ;   {metadata({method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList')}
  0x000000011035e1bb: and    $0x0,%ecx
  0x000000011035e1be: cmp    $0x0,%ecx
  0x000000011035e1c1: je     0x000000011035e41e  ;*aload_0
                                                ; - java.util.ArrayList$SubList::listIterator@0 (line 1099)

  0x000000011035e1c7: mov    %rsi,%rax
  0x000000011035e1ca: movabs $0x127283968,%rcx  ;   {metadata(method data for {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList')}
  0x000000011035e1d4: addq   $0x1,0x108(%rcx)
  0x000000011035e1dc: movabs $0x1272824b8,%rax  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035e1e6: mov    0xdc(%rax),%ecx
  0x000000011035e1ec: add    $0x8,%ecx
  0x000000011035e1ef: mov    %ecx,0xdc(%rax)
  0x000000011035e1f5: movabs $0x12727f8f8,%rax  ;   {metadata({method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035e1ff: and    $0x7ffff8,%ecx
  0x000000011035e205: cmp    $0x0,%ecx
  0x000000011035e208: je     0x000000011035e435
  0x000000011035e20e: mov    0x20(%rsi),%eax
  0x000000011035e211: shl    $0x3,%rax          ;*getfield this$0
                                                ; - java.util.ArrayList$SubList::checkForComodification@1 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)

  0x000000011035e215: mov    0xc(%rax),%eax     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@4 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ; implicit exception: dispatches to 0x000000011035e44c
  0x000000011035e218: mov    0xc(%rsi),%ecx     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@8 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)

  0x000000011035e21b: cmp    %ecx,%eax
  0x000000011035e21d: movabs $0x1272824b8,%rax  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035e227: movabs $0x108,%rcx
  0x000000011035e231: je     0x000000011035e241
  0x000000011035e237: movabs $0x118,%rcx
  0x000000011035e241: mov    (%rax,%rcx,1),%r8
  0x000000011035e245: lea    0x1(%r8),%r8
  0x000000011035e249: mov    %r8,(%rax,%rcx,1)
  0x000000011035e24d: jne    0x000000011035e3de  ;*if_icmpeq
                                                ; - java.util.ArrayList$SubList::checkForComodification@11 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)

  0x000000011035e253: mov    %rsi,%rax
  0x000000011035e256: movabs $0x127283968,%rcx  ;   {metadata(method data for {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList')}
  0x000000011035e260: addq   $0x1,0x118(%rcx)
  0x000000011035e268: movabs $0x127283ac0,%rax  ;   {metadata(method data for {method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e272: mov    0xdc(%rax),%ecx
  0x000000011035e278: add    $0x8,%ecx
  0x000000011035e27b: mov    %ecx,0xdc(%rax)
  0x000000011035e281: movabs $0x12727f7a0,%rax  ;   {metadata({method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e28b: and    $0x7ffff8,%ecx
  0x000000011035e291: cmp    $0x0,%ecx
  0x000000011035e294: je     0x000000011035e451
  0x000000011035e29a: cmp    $0x0,%edx
  0x000000011035e29d: movabs $0x127283ac0,%rax  ;   {metadata(method data for {method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e2a7: movabs $0x108,%rcx
  0x000000011035e2b1: jl     0x000000011035e2c1
  0x000000011035e2b7: movabs $0x118,%rcx
  0x000000011035e2c1: mov    (%rax,%rcx,1),%r8
  0x000000011035e2c5: lea    0x1(%r8),%r8
  0x000000011035e2c9: mov    %r8,(%rax,%rcx,1)
  0x000000011035e2cd: jl     0x000000011035e368  ;*iflt
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@1 (line 1229)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e2d3: mov    0x18(%rsi),%eax    ;*getfield size
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@6 (line 1229)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e2d6: cmp    %eax,%edx
  0x000000011035e2d8: movabs $0x127283ac0,%rax  ;   {metadata(method data for {method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e2e2: movabs $0x128,%rcx
  0x000000011035e2ec: jle    0x000000011035e2fc
  0x000000011035e2f2: movabs $0x138,%rcx
  0x000000011035e2fc: mov    (%rax,%rcx,1),%r8
  0x000000011035e300: lea    0x1(%r8),%r8
  0x000000011035e304: mov    %r8,(%rax,%rcx,1)
  0x000000011035e308: jg     0x000000011035e368  ;*if_icmple
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@9 (line 1229)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e30e: mov    0x14(%rsi),%r8d    ;*getfield offset
                                                ; - java.util.ArrayList$SubList::listIterator@10 (line 1101)

  0x000000011035e312: mov    %rdx,%rdi
  0x000000011035e315: data32 xchg %ax,%ax
  0x000000011035e318: jmpq   0x000000011035e477  ;   {no_reloc}
  0x000000011035e31d: add    %al,(%rax)
  0x000000011035e31f: add    %al,(%rax)
  0x000000011035e321: add    %ch,%cl
  0x000000011035e323: pop    %rdx
  0x000000011035e324: add    %eax,(%rax)
  0x000000011035e326: add    %cl,-0x75(%rax)    ;*new  ; - java.util.ArrayList$SubList::listIterator@14 (line 1103)

  0x000000011035e329: rorb   -0x47(%rax)        ;   {metadata(method data for {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList')}
  0x000000011035e32c: pushq  $0x1272839
  0x000000011035e331: add    %al,(%rax)
  0x000000011035e333: add    %cl,-0x7d(%rax)
  0x000000011035e336: subl   $0x1000001,(%rax)
  0x000000011035e33c: mov    %rsi,%rdx
  0x000000011035e33f: mov    %rdi,%rcx
  0x000000011035e342: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::listIterator@21 (line 1103)

  0x000000011035e345: mov    %rax,0x58(%rsp)
  0x000000011035e34a: nop
  0x000000011035e34b: nop
  0x000000011035e34c: nop
  0x000000011035e34d: nop
  0x000000011035e34e: nop
  0x000000011035e34f: callq  0x000000010ff580a0  ; OopMap{[88]=Oop off=500}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::listIterator@21 (line 1103)
                                                ;   {optimized virtual_call}
  0x000000011035e354: mov    0x58(%rsp),%rax
  0x000000011035e359: add    $0x90,%rsp
  0x000000011035e360: pop    %rbp
  0x000000011035e361: test   %eax,-0x3745267(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035e367: retq                      ;*areturn
                                                ; - java.util.ArrayList$SubList::listIterator@24 (line 1103)

  0x000000011035e368: mov    %rdx,%rdi
  0x000000011035e36b: nopl   0x0(%rax,%rax,1)
  0x000000011035e370: jmpq   0x000000011035e49d  ;   {no_reloc}
  0x000000011035e375: add    %al,(%rax)
  0x000000011035e377: add    %al,(%rax)
  0x000000011035e379: add    %ch,%cl
  0x000000011035e37b: sub    %al,(%rcx)
  0x000000011035e37d: add    %al,(%rax)         ;*new  ; - java.util.ArrayList$SubList::rangeCheckForAdd@12 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e37f: mov    %rsi,%rdx
  0x000000011035e382: movabs $0x127283ac0,%rbx  ;   {metadata(method data for {method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e38c: addq   $0x1,0x148(%rbx)
  0x000000011035e394: mov    %rdi,%rdx
  0x000000011035e397: mov    %rsi,%rbx
  0x000000011035e39a: mov    %rbx,%rsi          ;*invokespecial outOfBoundsMsg
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@18 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e39d: mov    %rax,0x60(%rsp)
  0x000000011035e3a2: nop
  0x000000011035e3a3: nop
  0x000000011035e3a4: nop
  0x000000011035e3a5: nop
  0x000000011035e3a6: nop
  0x000000011035e3a7: callq  0x000000010ff580a0  ; OopMap{[104]=Oop [96]=Oop off=588}
                                                ;*invokespecial outOfBoundsMsg
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@18 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {optimized virtual_call}
  0x000000011035e3ac: mov    0x60(%rsp),%rdx
  0x000000011035e3b1: movabs $0x127283ac0,%rsi  ;   {metadata(method data for {method} {0x000000012727f7a0} 'rangeCheckForAdd' '(I)V' in 'java/util/ArrayList$SubList')}
  0x000000011035e3bb: addq   $0x1,0x158(%rsi)
  0x000000011035e3c3: mov    %rax,%rdx
  0x000000011035e3c6: mov    0x60(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@21 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e3cb: nop
  0x000000011035e3cc: nop
  0x000000011035e3cd: nop
  0x000000011035e3ce: nop
  0x000000011035e3cf: callq  0x000000010ff580a0  ; OopMap{[104]=Oop [96]=Oop off=628}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@21 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {optimized virtual_call}
  0x000000011035e3d4: mov    0x60(%rsp),%rax
  0x000000011035e3d9: jmpq   0x000000011035e505  ;*athrow
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@24 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035e3de: xchg   %ax,%ax
  0x000000011035e3e0: jmpq   0x000000011035e4c3  ;   {no_reloc}
  0x000000011035e3e5: add    %al,(%rax)
  0x000000011035e3e7: add    %al,(%rax)
  0x000000011035e3e9: add    %ch,%cl
  0x000000011035e3eb: fiadd  (%rax)
  0x000000011035e3ed: add    %al,(%rax)         ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)

  0x000000011035e3ef: mov    %rax,%rbx
  0x000000011035e3f2: movabs $0x1272824b8,%rdx  ;   {metadata(method data for {method} {0x000000012727f8f8} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList')}
  0x000000011035e3fc: addq   $0x1,0x128(%rdx)
  0x000000011035e404: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::checkForComodification@18 (line 1239)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)

  0x000000011035e407: mov    %rax,0x78(%rsp)
  0x000000011035e40c: nop
  0x000000011035e40d: nop
  0x000000011035e40e: nop
  0x000000011035e40f: callq  0x000000010ff580a0  ; OopMap{[104]=Oop [120]=Oop off=692}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList::checkForComodification@18 (line 1239)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {optimized virtual_call}
  0x000000011035e414: mov    0x78(%rsp),%rax
  0x000000011035e419: jmpq   0x000000011035e505
  0x000000011035e41e: mov    %rax,0x8(%rsp)
  0x000000011035e423: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035e42b: callq  0x00000001100129e0  ; OopMap{rsi=Oop [104]=Oop off=720}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::listIterator@-1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035e430: jmpq   0x000000011035e1c7
  0x000000011035e435: mov    %rax,0x8(%rsp)
  0x000000011035e43a: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035e442: callq  0x00000001100129e0  ; OopMap{rsi=Oop [104]=Oop off=743}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::checkForComodification@-1 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035e447: jmpq   0x000000011035e20e
  0x000000011035e44c: callq  0x000000011000e080  ; OopMap{rsi=Oop [104]=Oop off=753}
                                                ;*getfield modCount
                                                ; - java.util.ArrayList$SubList::checkForComodification@4 (line 1238)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035e451: mov    %rax,0x8(%rsp)
  0x000000011035e456: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035e45e: callq  0x00000001100129e0  ; OopMap{rsi=Oop [104]=Oop off=771}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::rangeCheckForAdd@-1 (line 1229)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {runtime_call}
  0x000000011035e463: jmpq   0x000000011035e29a
  0x000000011035e468: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035e472: mov    $0xa050f00,%eax
  0x000000011035e477: callq  0x00000001100118a0  ; OopMap{rsi=Oop [104]=Oop off=796}
                                                ;*new  ; - java.util.ArrayList$SubList::listIterator@14 (line 1103)
                                                ;   {runtime_call}
  0x000000011035e47c: jmpq   0x000000011035e318
  0x000000011035e481: mov    %rdx,%rdx
  0x000000011035e484: callq  0x000000011000e520  ; OopMap{rsi=Oop [104]=Oop off=809}
                                                ;*new  ; - java.util.ArrayList$SubList::listIterator@14 (line 1103)
                                                ;   {runtime_call}
  0x000000011035e489: jmpq   0x000000011035e327
  0x000000011035e48e: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035e498: mov    $0xa050f00,%eax
  0x000000011035e49d: callq  0x00000001100118a0  ; OopMap{rsi=Oop [104]=Oop off=834}
                                                ;*new  ; - java.util.ArrayList$SubList::rangeCheckForAdd@12 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {runtime_call}
  0x000000011035e4a2: jmpq   0x000000011035e370
  0x000000011035e4a7: mov    %rdx,%rdx
  0x000000011035e4aa: callq  0x000000011000e520  ; OopMap{rsi=Oop [104]=Oop off=847}
                                                ;*new  ; - java.util.ArrayList$SubList::rangeCheckForAdd@12 (line 1230)
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {runtime_call}
  0x000000011035e4af: jmpq   0x000000011035e37f
  0x000000011035e4b4: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011035e4be: mov    $0xa050f00,%eax
  0x000000011035e4c3: callq  0x00000001100118a0  ; OopMap{[104]=Oop off=872}
                                                ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035e4c8: jmpq   0x000000011035e3e0
  0x000000011035e4cd: mov    %rdx,%rdx
  0x000000011035e4d0: callq  0x000000011000e520  ; OopMap{[104]=Oop off=885}
                                                ;*new  ; - java.util.ArrayList$SubList::checkForComodification@14 (line 1239)
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035e4d5: jmpq   0x000000011035e3ef
  0x000000011035e4da: nop
  0x000000011035e4db: nop
  0x000000011035e4dc: mov    0x2a8(%r15),%rax
  0x000000011035e4e3: movabs $0x0,%r10
  0x000000011035e4ed: mov    %r10,0x2a8(%r15)
  0x000000011035e4f4: movabs $0x0,%r10
  0x000000011035e4fe: mov    %r10,0x2b0(%r15)
  0x000000011035e505: add    $0x90,%rsp
  0x000000011035e50c: pop    %rbp
  0x000000011035e50d: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035e512: hlt
  0x000000011035e513: hlt
  0x000000011035e514: hlt
  0x000000011035e515: hlt
  0x000000011035e516: hlt
  0x000000011035e517: hlt
  0x000000011035e518: hlt
  0x000000011035e519: hlt
  0x000000011035e51a: hlt
  0x000000011035e51b: hlt
  0x000000011035e51c: hlt
  0x000000011035e51d: hlt
  0x000000011035e51e: hlt
  0x000000011035e51f: hlt
[Stub Code]
  0x000000011035e520: nop                       ;   {no_reloc}
  0x000000011035e521: nop
  0x000000011035e522: nop
  0x000000011035e523: nop
  0x000000011035e524: nop
  0x000000011035e525: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035e52f: jmpq   0x000000011035e52f  ;   {runtime_call}
  0x000000011035e534: nop
  0x000000011035e535: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035e53f: jmpq   0x000000011035e53f  ;   {runtime_call}
  0x000000011035e544: nop
  0x000000011035e545: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035e54f: jmpq   0x000000011035e54f  ;   {runtime_call}
  0x000000011035e554: nop
  0x000000011035e555: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035e55f: jmpq   0x000000011035e55f  ;   {runtime_call}
[Exception Handler]
  0x000000011035e564: callq  0x00000001100100e0  ;   {runtime_call}
  0x000000011035e569: mov    %rsp,-0x28(%rsp)
  0x000000011035e56e: sub    $0x80,%rsp
  0x000000011035e575: mov    %rax,0x78(%rsp)
  0x000000011035e57a: mov    %rcx,0x70(%rsp)
  0x000000011035e57f: mov    %rdx,0x68(%rsp)
  0x000000011035e584: mov    %rbx,0x60(%rsp)
  0x000000011035e589: mov    %rbp,0x50(%rsp)
  0x000000011035e58e: mov    %rsi,0x48(%rsp)
  0x000000011035e593: mov    %rdi,0x40(%rsp)
  0x000000011035e598: mov    %r8,0x38(%rsp)
  0x000000011035e59d: mov    %r9,0x30(%rsp)
  0x000000011035e5a2: mov    %r10,0x28(%rsp)
  0x000000011035e5a7: mov    %r11,0x20(%rsp)
  0x000000011035e5ac: mov    %r12,0x18(%rsp)
  0x000000011035e5b1: mov    %r13,0x10(%rsp)
  0x000000011035e5b6: mov    %r14,0x8(%rsp)
  0x000000011035e5bb: mov    %r15,(%rsp)
  0x000000011035e5bf: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035e5c9: movabs $0x11035e569,%rsi  ;   {internal_word}
  0x000000011035e5d3: mov    %rsp,%rdx
  0x000000011035e5d6: and    $0xfffffffffffffff0,%rsp
  0x000000011035e5da: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035e5df: hlt
[Deopt Handler Code]
  0x000000011035e5e0: movabs $0x11035e5e0,%r10  ;   {section_word}
  0x000000011035e5ea: push   %r10
  0x000000011035e5ec: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035e5f1: hlt
  0x000000011035e5f2: hlt
  0x000000011035e5f3: hlt
  0x000000011035e5f4: hlt
  0x000000011035e5f5: hlt
  0x000000011035e5f6: hlt
  0x000000011035e5f7: hlt
Decoding compiled method 0x000000011035f9d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar$Date'
  # parm0:    rdx:rdx   = long
  #           [sp+0x40]  (sp of caller)
  0x000000011035fb40: mov    0x8(%rsi),%r10d
  0x000000011035fb44: shl    $0x3,%r10
  0x000000011035fb48: cmp    %rax,%r10
  0x000000011035fb4b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035fb51: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011035fb5c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035fb60: mov    %eax,-0x14000(%rsp)
  0x000000011035fb67: push   %rbp
  0x000000011035fb68: sub    $0x30,%rsp
  0x000000011035fb6c: movabs $0x127283e98,%rax  ;   {metadata(method data for {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035fb76: mov    0xdc(%rax),%edi
  0x000000011035fb7c: add    $0x8,%edi
  0x000000011035fb7f: mov    %edi,0xdc(%rax)
  0x000000011035fb85: movabs $0x12721a108,%rax  ;   {metadata({method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035fb8f: and    $0x0,%edi
  0x000000011035fb92: cmp    $0x0,%edi
  0x000000011035fb95: je     0x000000011035fc46  ;*lload_1
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@0 (line 173)

  0x000000011035fb9b: mov    0x50(%rsi),%rax    ;*getfield cachedFixedDateJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@2 (line 173)

  0x000000011035fb9f: mov    %rdx,%rdi
  0x000000011035fba2: cmp    %rax,%rdi
  0x000000011035fba5: movabs $0x127283e98,%rax  ;   {metadata(method data for {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035fbaf: movabs $0x118,%rdi
  0x000000011035fbb9: jge    0x000000011035fbc9
  0x000000011035fbbf: movabs $0x108,%rdi
  0x000000011035fbc9: mov    (%rax,%rdi,1),%rbx
  0x000000011035fbcd: lea    0x1(%rbx),%rbx
  0x000000011035fbd1: mov    %rbx,(%rax,%rdi,1)
  0x000000011035fbd5: jl     0x000000011035fc18  ;*lcmp
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@5 (line 173)

  0x000000011035fbdb: mov    0x58(%rsi),%rax    ;*getfield cachedFixedDateNextJan1
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@11 (line 173)

  0x000000011035fbdf: cmp    %rax,%rdx
  0x000000011035fbe2: movabs $0x127283e98,%rax  ;   {metadata(method data for {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035fbec: movabs $0x128,%rsi
  0x000000011035fbf6: jge    0x000000011035fc06
  0x000000011035fbfc: movabs $0x138,%rsi
  0x000000011035fc06: mov    (%rax,%rsi,1),%rdi
  0x000000011035fc0a: lea    0x1(%rdi),%rdi
  0x000000011035fc0e: mov    %rdi,(%rax,%rsi,1)
  0x000000011035fc12: jl     0x000000011035fc22  ;*lcmp
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@14 (line 173)

  0x000000011035fc18: mov    $0x0,%eax
  0x000000011035fc1d: jmpq   0x000000011035fc37  ;*ireturn
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@23 (line 173)

  0x000000011035fc22: movabs $0x127283e98,%rax  ;   {metadata(method data for {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date')}
  0x000000011035fc2c: incl   0x148(%rax)
  0x000000011035fc32: mov    $0x1,%eax          ;*goto
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@19 (line 173)

  0x000000011035fc37: and    $0x1,%eax
  0x000000011035fc3a: add    $0x30,%rsp
  0x000000011035fc3e: pop    %rbp
  0x000000011035fc3f: test   %eax,-0x3746b45(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011035fc45: retq
  0x000000011035fc46: mov    %rax,0x8(%rsp)
  0x000000011035fc4b: movq   $0xffffffffffffffff,(%rsp)
  0x000000011035fc53: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=280}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@-1 (line 173)
                                                ;   {runtime_call}
  0x000000011035fc58: jmpq   0x000000011035fb9b
  0x000000011035fc5d: nop
  0x000000011035fc5e: nop
  0x000000011035fc5f: mov    0x2a8(%r15),%rax
  0x000000011035fc66: movabs $0x0,%r10
  0x000000011035fc70: mov    %r10,0x2a8(%r15)
  0x000000011035fc77: movabs $0x0,%r10
  0x000000011035fc81: mov    %r10,0x2b0(%r15)
  0x000000011035fc88: add    $0x30,%rsp
  0x000000011035fc8c: pop    %rbp
  0x000000011035fc8d: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011035fc92: hlt
  0x000000011035fc93: hlt
  0x000000011035fc94: hlt
  0x000000011035fc95: hlt
  0x000000011035fc96: hlt
  0x000000011035fc97: hlt
  0x000000011035fc98: hlt
  0x000000011035fc99: hlt
  0x000000011035fc9a: hlt
  0x000000011035fc9b: hlt
  0x000000011035fc9c: hlt
  0x000000011035fc9d: hlt
  0x000000011035fc9e: hlt
  0x000000011035fc9f: hlt
[Exception Handler]
[Stub Code]
  0x000000011035fca0: callq  0x00000001100100e0  ;   {no_reloc}
  0x000000011035fca5: mov    %rsp,-0x28(%rsp)
  0x000000011035fcaa: sub    $0x80,%rsp
  0x000000011035fcb1: mov    %rax,0x78(%rsp)
  0x000000011035fcb6: mov    %rcx,0x70(%rsp)
  0x000000011035fcbb: mov    %rdx,0x68(%rsp)
  0x000000011035fcc0: mov    %rbx,0x60(%rsp)
  0x000000011035fcc5: mov    %rbp,0x50(%rsp)
  0x000000011035fcca: mov    %rsi,0x48(%rsp)
  0x000000011035fccf: mov    %rdi,0x40(%rsp)
  0x000000011035fcd4: mov    %r8,0x38(%rsp)
  0x000000011035fcd9: mov    %r9,0x30(%rsp)
  0x000000011035fcde: mov    %r10,0x28(%rsp)
  0x000000011035fce3: mov    %r11,0x20(%rsp)
  0x000000011035fce8: mov    %r12,0x18(%rsp)
  0x000000011035fced: mov    %r13,0x10(%rsp)
  0x000000011035fcf2: mov    %r14,0x8(%rsp)
  0x000000011035fcf7: mov    %r15,(%rsp)
  0x000000011035fcfb: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011035fd05: movabs $0x11035fca5,%rsi  ;   {internal_word}
  0x000000011035fd0f: mov    %rsp,%rdx
  0x000000011035fd12: and    $0xfffffffffffffff0,%rsp
  0x000000011035fd16: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011035fd1b: hlt
[Deopt Handler Code]
  0x000000011035fd1c: movabs $0x11035fd1c,%r10  ;   {section_word}
  0x000000011035fd26: push   %r10
  0x000000011035fd28: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035fd2d: hlt
  0x000000011035fd2e: hlt
  0x000000011035fd2f: hlt
Decoding compiled method 0x000000011035d690:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127281c08} 'shutdown' '()V' in 'java/lang/Shutdown'
  #           [sp+0x30]  (sp of caller)
  0x000000011035d800: mov    %eax,-0x14000(%rsp)
  0x000000011035d807: push   %rbp
  0x000000011035d808: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.Shutdown::shutdown@-1 (line 223)

  0x000000011035d80c: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d816: mov    0x6c(%r10),%r10d   ;*getstatic lock
                                                ; - java.lang.Shutdown::shutdown@0 (line 223)

  0x000000011035d81a: test   %r10d,%r10d
  0x000000011035d81d: je     0x000000011035d931  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)

  0x000000011035d823: lea    (%r12,%r10,8),%rbp  ;*getstatic lock
                                                ; - java.lang.Shutdown::shutdown@0 (line 223)

  0x000000011035d827: mov    0x0(%rbp),%rax
  0x000000011035d82b: mov    %rax,%r11
  0x000000011035d82e: and    $0x7,%r11
  0x000000011035d832: cmp    $0x5,%r11
  0x000000011035d836: jne    0x000000011035d9cf
  0x000000011035d83c: mov    0x8(%r12,%r10,8),%r11d
  0x000000011035d841: movabs $0x0,%r10
  0x000000011035d84b: lea    (%r10,%r11,8),%r10
  0x000000011035d84f: mov    0xa8(%r10),%r10
  0x000000011035d856: mov    %r10,%r11
  0x000000011035d859: or     %r15,%r11
  0x000000011035d85c: mov    %r11,%r8
  0x000000011035d85f: xor    %rax,%r8
  0x000000011035d862: test   $0xffffffffffffff87,%r8
  0x000000011035d869: jne    0x000000011035dae1  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)

  0x000000011035d86f: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d879: mov    0x80(%r10),%r10d
  0x000000011035d880: test   %r10d,%r10d
  0x000000011035d883: jne    0x000000011035d89a  ;*tableswitch
                                                ; - java.lang.Shutdown::shutdown@9 (line 224)

  0x000000011035d885: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d88f: movl   $0x1,0x80(%r10)
  0x000000011035d89a: mov    $0x7,%r10d
  0x000000011035d8a0: and    0x0(%rbp),%r10
  0x000000011035d8a4: cmp    $0x5,%r10
  0x000000011035d8a8: jne    0x000000011035da39  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@44 (line 232)

  0x000000011035d8ae: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d8b8: mov    (%r10),%rax
  0x000000011035d8bb: mov    %rax,%r10
  0x000000011035d8be: and    $0x7,%r10
  0x000000011035d8c2: cmp    $0x5,%r10
  0x000000011035d8c6: jne    0x000000011035d950
  0x000000011035d8cc: mov    $0xf80003df,%r11d  ;   {metadata('java/lang/Class')}
  0x000000011035d8d2: movabs $0x0,%r10
  0x000000011035d8dc: lea    (%r10,%r11,8),%r10
  0x000000011035d8e0: mov    0xa8(%r10),%r10
  0x000000011035d8e7: mov    %r10,%r11
  0x000000011035d8ea: or     %r15,%r11
  0x000000011035d8ed: mov    %r11,%r8
  0x000000011035d8f0: xor    %rax,%r8
  0x000000011035d8f3: test   $0xffffffffffffff87,%r8
  0x000000011035d8fa: jne    0x000000011035db15  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)

  0x000000011035d900: data32 xchg %ax,%ax
  0x000000011035d903: callq  0x000000010ff58520  ; OopMap{off=264}
                                                ;*invokestatic sequence
                                                ; - java.lang.Shutdown::shutdown@58 (line 234)
                                                ;   {static_call}
  0x000000011035d908: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d912: mov    $0x7,%r11d
  0x000000011035d918: and    (%r10),%r11
  0x000000011035d91b: cmp    $0x5,%r11
  0x000000011035d91f: jne    0x000000011035db52  ;*synchronization entry
                                                ; - java.lang.Shutdown::shutdown@-1 (line 223)

  0x000000011035d925: add    $0x20,%rsp
  0x000000011035d929: pop    %rbp
  0x000000011035d92a: test   %eax,-0x3744930(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011035d930: retq
  0x000000011035d931: mov    $0xfffffff6,%esi
  0x000000011035d936: nop
  0x000000011035d937: callq  0x000000010ff576a0  ; OopMap{off=316}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)
                                                ;   {runtime_call}
  0x000000011035d93c: callq  0x000000010e0276f4  ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)
                                                ;   {runtime_call}
  0x000000011035d941: movabs $0x76b2af308,%r11  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d94b: lock cmpxchg %r10,(%r11)
  0x000000011035d950: movabs $0x76b2af308,%r11  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d95a: lea    0x10(%rsp),%rbx
  0x000000011035d95f: mov    (%r11),%rax
  0x000000011035d962: test   $0x2,%rax
  0x000000011035d968: jne    0x000000011035d98e
  0x000000011035d96a: or     $0x1,%rax
  0x000000011035d96e: mov    %rax,(%rbx)
  0x000000011035d971: lock cmpxchg %rbx,(%r11)
  0x000000011035d976: je     0x000000011035d9a7
  0x000000011035d97c: sub    %rsp,%rax
  0x000000011035d97f: and    $0xfffffffffffff007,%rax
  0x000000011035d986: mov    %rax,(%rbx)
  0x000000011035d989: jmpq   0x000000011035d9a7
  0x000000011035d98e: movq   $0x3,(%rbx)
  0x000000011035d995: mov    %rax,%rbx
  0x000000011035d998: mov    0x16(%rbx),%rax
  0x000000011035d99c: test   %rax,%rax
  0x000000011035d99f: jne    0x000000011035d9a7
  0x000000011035d9a1: lock cmpxchg %r15,0x16(%rbx)
  0x000000011035d9a7: je     0x000000011035d900
  0x000000011035d9ad: movabs $0x76b2af308,%rsi  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035d9b7: lea    0x10(%rsp),%rdx
  0x000000011035d9bc: data32 xchg %ax,%ax
  0x000000011035d9bf: callq  0x0000000110018f60  ; OopMap{off=452}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)
                                                ;   {runtime_call}
  0x000000011035d9c4: jmpq   0x000000011035d900
  0x000000011035d9c9: lock cmpxchg %r10,0x0(%rbp)
  0x000000011035d9cf: lea    0x10(%rsp),%rbx
  0x000000011035d9d4: mov    0x0(%rbp),%rax
  0x000000011035d9d8: test   $0x2,%rax
  0x000000011035d9de: jne    0x000000011035da05
  0x000000011035d9e0: or     $0x1,%rax
  0x000000011035d9e4: mov    %rax,(%rbx)
  0x000000011035d9e7: lock cmpxchg %rbx,0x0(%rbp)
  0x000000011035d9ed: je     0x000000011035da1e
  0x000000011035d9f3: sub    %rsp,%rax
  0x000000011035d9f6: and    $0xfffffffffffff007,%rax
  0x000000011035d9fd: mov    %rax,(%rbx)
  0x000000011035da00: jmpq   0x000000011035da1e
  0x000000011035da05: movq   $0x3,(%rbx)
  0x000000011035da0c: mov    %rax,%rbx
  0x000000011035da0f: mov    0x16(%rbx),%rax
  0x000000011035da13: test   %rax,%rax
  0x000000011035da16: jne    0x000000011035da1e
  0x000000011035da18: lock cmpxchg %r15,0x16(%rbx)
  0x000000011035da1e: je     0x000000011035d86f
  0x000000011035da24: mov    %rbp,%rsi
  0x000000011035da27: lea    0x10(%rsp),%rdx
  0x000000011035da2c: data32 xchg %ax,%ax
  0x000000011035da2f: callq  0x0000000110018f60  ; OopMap{rbp=Oop off=564}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)
                                                ;   {runtime_call}
  0x000000011035da34: jmpq   0x000000011035d86f
  0x000000011035da39: lea    0x10(%rsp),%rax
  0x000000011035da3e: cmpq   $0x0,(%rax)
  0x000000011035da45: je     0x000000011035dac1
  0x000000011035da4b: mov    0x0(%rbp),%r10
  0x000000011035da4f: test   $0x2,%r10
  0x000000011035da56: je     0x000000011035dab8
  0x000000011035da58: mov    0x16(%r10),%rax
  0x000000011035da5c: xor    %r15,%rax
  0x000000011035da5f: or     0x26(%r10),%rax
  0x000000011035da63: jne    0x000000011035dac1
  0x000000011035da65: mov    0x36(%r10),%rax
  0x000000011035da69: or     0x3e(%r10),%rax
  0x000000011035da6d: jne    0x000000011035da79
  0x000000011035da6f: movq   $0x0,0x16(%r10)
  0x000000011035da77: jmp    0x000000011035dac1
  0x000000011035da79: cmpq   $0x0,0x46(%r10)
  0x000000011035da81: je     0x000000011035daac
  0x000000011035da83: movq   $0x0,0x16(%r10)
  0x000000011035da8b: lock addl $0x0,(%rsp)
  0x000000011035da90: cmpq   $0x0,0x46(%r10)
  0x000000011035da98: jne    0x000000011035dab1
  0x000000011035da9a: movabs $0x0,%rax
  0x000000011035daa4: lock cmpxchg %r15,0x16(%r10)
  0x000000011035daaa: jne    0x000000011035dab1
  0x000000011035daac: or     $0x1,%eax
  0x000000011035daaf: jmp    0x000000011035dac1
  0x000000011035dab1: test   $0x0,%eax
  0x000000011035dab6: jmp    0x000000011035dac1
  0x000000011035dab8: mov    (%rax),%r10
  0x000000011035dabb: lock cmpxchg %r10,0x0(%rbp)
  0x000000011035dac1: je     0x000000011035d8ae
  0x000000011035dac7: mov    %rbp,%rdi
  0x000000011035daca: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@5 (line 223)

  0x000000011035dacf: movabs $0x10e087a5a,%r10
  0x000000011035dad9: callq  *%r10
  0x000000011035dadc: jmpq   0x000000011035d8ae
  0x000000011035dae1: test   $0x7,%r8
  0x000000011035dae8: jne    0x000000011035d9c9
  0x000000011035daee: test   $0x300,%r8
  0x000000011035daf5: jne    0x000000011035db04
  0x000000011035daf7: and    $0x37f,%rax
  0x000000011035dafe: mov    %rax,%r11
  0x000000011035db01: or     %r15,%r11
  0x000000011035db04: lock cmpxchg %r11,0x0(%rbp)
  0x000000011035db0a: jne    0x000000011035da24
  0x000000011035db10: jmpq   0x000000011035d86f  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@44 (line 232)

  0x000000011035db15: test   $0x7,%r8
  0x000000011035db1c: jne    0x000000011035d941
  0x000000011035db22: test   $0x300,%r8
  0x000000011035db29: jne    0x000000011035db38
  0x000000011035db2b: and    $0x37f,%rax
  0x000000011035db32: mov    %rax,%r11
  0x000000011035db35: or     %r15,%r11
  0x000000011035db38: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035db42: lock cmpxchg %r11,(%r10)
  0x000000011035db47: jne    0x000000011035d9ad
  0x000000011035db4d: jmpq   0x000000011035d900
  0x000000011035db52: movabs $0x76b2af308,%r11  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035db5c: lea    0x10(%rsp),%rax
  0x000000011035db61: cmpq   $0x0,(%rax)
  0x000000011035db68: je     0x000000011035dbe2
  0x000000011035db6e: mov    (%r11),%r10
  0x000000011035db71: test   $0x2,%r10
  0x000000011035db78: je     0x000000011035dbda
  0x000000011035db7a: mov    0x16(%r10),%rax
  0x000000011035db7e: xor    %r15,%rax
  0x000000011035db81: or     0x26(%r10),%rax
  0x000000011035db85: jne    0x000000011035dbe2
  0x000000011035db87: mov    0x36(%r10),%rax
  0x000000011035db8b: or     0x3e(%r10),%rax
  0x000000011035db8f: jne    0x000000011035db9b
  0x000000011035db91: movq   $0x0,0x16(%r10)
  0x000000011035db99: jmp    0x000000011035dbe2
  0x000000011035db9b: cmpq   $0x0,0x46(%r10)
  0x000000011035dba3: je     0x000000011035dbce
  0x000000011035dba5: movq   $0x0,0x16(%r10)
  0x000000011035dbad: lock addl $0x0,(%rsp)
  0x000000011035dbb2: cmpq   $0x0,0x46(%r10)
  0x000000011035dbba: jne    0x000000011035dbd3
  0x000000011035dbbc: movabs $0x0,%rax
  0x000000011035dbc6: lock cmpxchg %r15,0x16(%r10)
  0x000000011035dbcc: jne    0x000000011035dbd3
  0x000000011035dbce: or     $0x1,%eax
  0x000000011035dbd1: jmp    0x000000011035dbe2
  0x000000011035dbd3: test   $0x0,%eax
  0x000000011035dbd8: jmp    0x000000011035dbe2
  0x000000011035dbda: mov    (%rax),%r10
  0x000000011035dbdd: lock cmpxchg %r10,(%r11)
  0x000000011035dbe2: je     0x000000011035d925
  0x000000011035dbe8: movabs $0x76b2af308,%rdi  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035dbf2: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)

  0x000000011035dbf7: movabs $0x10e087a5a,%r10
  0x000000011035dc01: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@62 (line 235)

  0x000000011035dc04: jmpq   0x000000011035d925  ;*invokestatic sequence
                                                ; - java.lang.Shutdown::shutdown@58 (line 234)

  0x000000011035dc09: mov    %rax,%rbx
  0x000000011035dc0c: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035dc16: mov    $0x7,%r11d
  0x000000011035dc1c: and    (%r10),%r11
  0x000000011035dc1f: cmp    $0x5,%r11
  0x000000011035dc23: jne    0x000000011035dc32  ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@68 (line 235)

  0x000000011035dc25: mov    %rbx,%rsi
  0x000000011035dc28: add    $0x20,%rsp
  0x000000011035dc2c: pop    %rbp
  0x000000011035dc2d: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035dc32: movabs $0x76b2af308,%r11  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035dc3c: lea    0x10(%rsp),%rax
  0x000000011035dc41: cmpq   $0x0,(%rax)
  0x000000011035dc48: je     0x000000011035dcc2
  0x000000011035dc4e: mov    (%r11),%r10
  0x000000011035dc51: test   $0x2,%r10
  0x000000011035dc58: je     0x000000011035dcba
  0x000000011035dc5a: mov    0x16(%r10),%rax
  0x000000011035dc5e: xor    %r15,%rax
  0x000000011035dc61: or     0x26(%r10),%rax
  0x000000011035dc65: jne    0x000000011035dcc2
  0x000000011035dc67: mov    0x36(%r10),%rax
  0x000000011035dc6b: or     0x3e(%r10),%rax
  0x000000011035dc6f: jne    0x000000011035dc7b
  0x000000011035dc71: movq   $0x0,0x16(%r10)
  0x000000011035dc79: jmp    0x000000011035dcc2
  0x000000011035dc7b: cmpq   $0x0,0x46(%r10)
  0x000000011035dc83: je     0x000000011035dcae
  0x000000011035dc85: movq   $0x0,0x16(%r10)
  0x000000011035dc8d: lock addl $0x0,(%rsp)
  0x000000011035dc92: cmpq   $0x0,0x46(%r10)
  0x000000011035dc9a: jne    0x000000011035dcb3
  0x000000011035dc9c: movabs $0x0,%rax
  0x000000011035dca6: lock cmpxchg %r15,0x16(%r10)
  0x000000011035dcac: jne    0x000000011035dcb3
  0x000000011035dcae: or     $0x1,%eax
  0x000000011035dcb1: jmp    0x000000011035dcc2
  0x000000011035dcb3: test   $0x0,%eax
  0x000000011035dcb8: jmp    0x000000011035dcc2
  0x000000011035dcba: mov    (%rax),%r10
  0x000000011035dcbd: lock cmpxchg %r10,(%r11)
  0x000000011035dcc2: je     0x000000011035dc25
  0x000000011035dcc8: movabs $0x76b2af308,%rdi  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011035dcd2: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::shutdown@57 (line 233)

  0x000000011035dcd7: movabs $0x10e087a5a,%r10
  0x000000011035dce1: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::shutdown@68 (line 235)

  0x000000011035dce4: jmpq   0x000000011035dc25
  0x000000011035dce9: hlt
  0x000000011035dcea: hlt
  0x000000011035dceb: hlt
  0x000000011035dcec: hlt
  0x000000011035dced: hlt
  0x000000011035dcee: hlt
  0x000000011035dcef: hlt
  0x000000011035dcf0: hlt
  0x000000011035dcf1: hlt
  0x000000011035dcf2: hlt
  0x000000011035dcf3: hlt
  0x000000011035dcf4: hlt
  0x000000011035dcf5: hlt
  0x000000011035dcf6: hlt
  0x000000011035dcf7: hlt
  0x000000011035dcf8: hlt
  0x000000011035dcf9: hlt
  0x000000011035dcfa: hlt
  0x000000011035dcfb: hlt
  0x000000011035dcfc: hlt
  0x000000011035dcfd: hlt
  0x000000011035dcfe: hlt
  0x000000011035dcff: hlt
[Stub Code]
  0x000000011035dd00: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035dd0a: jmpq   0x000000011035dd0a  ;   {runtime_call}
[Exception Handler]
  0x000000011035dd0f: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011035dd14: callq  0x000000011035dd19
  0x000000011035dd19: subq   $0x5,(%rsp)
  0x000000011035dd1e: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035dd23: hlt
  0x000000011035dd24: hlt
  0x000000011035dd25: hlt
  0x000000011035dd26: hlt
  0x000000011035dd27: hlt
Decoding compiled method 0x000000011035b590:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012727f590} 'listIterator' '(I)Ljava/util/ListIterator;' in 'java/util/ArrayList$SubList'
  # this:     rsi:rsi   = 'java/util/ArrayList$SubList'
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x000000011035b6e0: mov    0x8(%rsi),%r10d
  0x000000011035b6e4: shl    $0x3,%r10
  0x000000011035b6e8: cmp    %r10,%rax
  0x000000011035b6eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x000000011035b6f1: data32 xchg %ax,%ax
  0x000000011035b6f4: nopl   0x0(%rax,%rax,1)
  0x000000011035b6fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x000000011035b700: mov    %eax,-0x14000(%rsp)
  0x000000011035b707: push   %rbp
  0x000000011035b708: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.util.ArrayList$SubList::listIterator@-1 (line 1099)

  0x000000011035b70c: mov    %edx,0x8(%rsp)
  0x000000011035b710: mov    %rsi,%rbp
  0x000000011035b713: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=56}
                                                ;*invokespecial checkForComodification
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {optimized virtual_call}
  0x000000011035b718: mov    %rbp,%rsi
  0x000000011035b71b: mov    0x8(%rsp),%edx
  0x000000011035b71f: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=68}
                                                ;*invokespecial rangeCheckForAdd
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)
                                                ;   {optimized virtual_call}
  0x000000011035b724: mov    %rbp,%r10
  0x000000011035b727: mov    0x14(%r10),%ebp    ;*getfield offset
                                                ; - java.util.ArrayList$SubList::listIterator@10 (line 1101)

  0x000000011035b72b: mov    $0x16,%esi
  0x000000011035b730: mov    %r10,(%rsp)
  0x000000011035b734: data32 xchg %ax,%ax
  0x000000011035b737: callq  0x000000010ff576a0  ; OopMap{[0]=Oop off=92}
                                                ;*new  ; - java.util.ArrayList$SubList::listIterator@14 (line 1103)
                                                ;   {runtime_call}
  0x000000011035b73c: callq  0x000000010e0276f4  ;*invokespecial checkForComodification
                                                ; - java.util.ArrayList$SubList::listIterator@1 (line 1099)
                                                ;   {runtime_call}
  0x000000011035b741: mov    %rax,%rsi
  0x000000011035b744: jmp    0x000000011035b749
  0x000000011035b746: mov    %rax,%rsi          ;*invokespecial rangeCheckForAdd
                                                ; - java.util.ArrayList$SubList::listIterator@6 (line 1100)

  0x000000011035b749: add    $0x20,%rsp
  0x000000011035b74d: pop    %rbp
  0x000000011035b74e: jmpq   0x0000000110019060  ;   {runtime_call}
  0x000000011035b753: hlt
  0x000000011035b754: hlt
  0x000000011035b755: hlt
  0x000000011035b756: hlt
  0x000000011035b757: hlt
  0x000000011035b758: hlt
  0x000000011035b759: hlt
  0x000000011035b75a: hlt
  0x000000011035b75b: hlt
  0x000000011035b75c: hlt
  0x000000011035b75d: hlt
  0x000000011035b75e: hlt
  0x000000011035b75f: hlt
[Stub Code]
  0x000000011035b760: movabs $0x0,%rbx          ;   {no_reloc}
  0x000000011035b76a: jmpq   0x000000011035b76a  ;   {runtime_call}
  0x000000011035b76f: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011035b779: jmpq   0x000000011035b779  ;   {runtime_call}
[Exception Handler]
  0x000000011035b77e: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x000000011035b783: callq  0x000000011035b788
  0x000000011035b788: subq   $0x5,(%rsp)
  0x000000011035b78d: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011035b792: hlt
  0x000000011035b793: hlt
  0x000000011035b794: hlt
  0x000000011035b795: hlt
  0x000000011035b796: hlt
  0x000000011035b797: hlt
Decoding compiled method 0x0000000110361350:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000012721a108} 'hit' '(J)Z' in 'sun/util/calendar/BaseCalendar$Date'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar$Date'
  # parm0:    rdx:rdx   = long
  #           [sp+0x20]  (sp of caller)
  0x00000001103614a0: mov    0x8(%rsi),%r10d
  0x00000001103614a4: shl    $0x3,%r10
  0x00000001103614a8: cmp    %r10,%rax
  0x00000001103614ab: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103614b1: data32 xchg %ax,%ax
  0x00000001103614b4: nopl   0x0(%rax,%rax,1)
  0x00000001103614bc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103614c0: sub    $0x18,%rsp
  0x00000001103614c7: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@-1 (line 173)

  0x00000001103614cc: cmp    0x50(%rsi),%rdx
  0x00000001103614d0: jl     0x00000001103614df  ;*iflt
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@6 (line 173)

  0x00000001103614d2: cmp    0x58(%rsi),%rdx
  0x00000001103614d6: jge    0x00000001103614df  ;*ifge
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@15 (line 173)

  0x00000001103614d8: mov    $0x1,%eax
  0x00000001103614dd: jmp    0x00000001103614e1  ;*iconst_0
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@22 (line 173)

  0x00000001103614df: xor    %eax,%eax          ;*ireturn
                                                ; - sun.util.calendar.BaseCalendar$Date::hit@23 (line 173)

  0x00000001103614e1: add    $0x10,%rsp
  0x00000001103614e5: pop    %rbp
  0x00000001103614e6: test   %eax,-0x37484ec(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x00000001103614ec: retq
  0x00000001103614ed: hlt
  0x00000001103614ee: hlt
  0x00000001103614ef: hlt
  0x00000001103614f0: hlt
  0x00000001103614f1: hlt
  0x00000001103614f2: hlt
  0x00000001103614f3: hlt
  0x00000001103614f4: hlt
  0x00000001103614f5: hlt
  0x00000001103614f6: hlt
  0x00000001103614f7: hlt
  0x00000001103614f8: hlt
  0x00000001103614f9: hlt
  0x00000001103614fa: hlt
  0x00000001103614fb: hlt
  0x00000001103614fc: hlt
  0x00000001103614fd: hlt
  0x00000001103614fe: hlt
  0x00000001103614ff: hlt
[Exception Handler]
[Stub Code]
  0x0000000110361500: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110361505: callq  0x000000011036150a
  0x000000011036150a: subq   $0x5,(%rsp)
  0x000000011036150f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110361514: hlt
  0x0000000110361515: hlt
  0x0000000110361516: hlt
  0x0000000110361517: hlt
Decoding compiled method 0x0000000110363990:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown'
  #           [sp+0x50]  (sp of caller)
  0x0000000110363b20: mov    %eax,-0x14000(%rsp)
  0x0000000110363b27: push   %rbp
  0x0000000110363b28: sub    $0x40,%rsp
  0x0000000110363b2c: movabs $0x127283758,%rax  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363b36: mov    0xdc(%rax),%esi
  0x0000000110363b3c: add    $0x8,%esi
  0x0000000110363b3f: mov    %esi,0xdc(%rax)
  0x0000000110363b45: movabs $0x1272819d0,%rax  ;   {metadata({method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363b4f: and    $0x0,%esi
  0x0000000110363b52: cmp    $0x0,%esi
  0x0000000110363b55: je     0x0000000110363ea5
  0x0000000110363b5b: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110363b65: mov    0x6c(%rax),%esi
  0x0000000110363b68: shl    $0x3,%rsi          ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@0 (line 161)

  0x0000000110363b6c: lea    0x20(%rsp),%rdi
  0x0000000110363b71: mov    %rsi,0x8(%rdi)
  0x0000000110363b75: mov    (%rsi),%rax        ; implicit exception: dispatches to 0x0000000110363ebc
  0x0000000110363b78: mov    %rax,%rbx
  0x0000000110363b7b: and    $0x7,%rbx
  0x0000000110363b7f: cmp    $0x5,%rbx
  0x0000000110363b83: jne    0x0000000110363c0a
  0x0000000110363b89: mov    0x8(%rsi),%ebx
  0x0000000110363b8c: shl    $0x3,%rbx
  0x0000000110363b90: mov    0xa8(%rbx),%rbx
  0x0000000110363b97: or     %r15,%rbx
  0x0000000110363b9a: xor    %rax,%rbx
  0x0000000110363b9d: and    $0xffffffffffffff87,%rbx
  0x0000000110363ba1: je     0x0000000110363c32
  0x0000000110363ba7: test   $0x7,%rbx
  0x0000000110363bae: jne    0x0000000110363bf7
  0x0000000110363bb0: test   $0x300,%rbx
  0x0000000110363bb7: jne    0x0000000110363bd6
  0x0000000110363bb9: and    $0x37f,%rax
  0x0000000110363bc0: mov    %rax,%rbx
  0x0000000110363bc3: or     %r15,%rbx
  0x0000000110363bc6: lock cmpxchg %rbx,(%rsi)
  0x0000000110363bcb: jne    0x0000000110363ec1
  0x0000000110363bd1: jmpq   0x0000000110363c32
  0x0000000110363bd6: mov    0x8(%rsi),%ebx
  0x0000000110363bd9: shl    $0x3,%rbx
  0x0000000110363bdd: mov    0xa8(%rbx),%rbx
  0x0000000110363be4: or     %r15,%rbx
  0x0000000110363be7: lock cmpxchg %rbx,(%rsi)
  0x0000000110363bec: jne    0x0000000110363ec1
  0x0000000110363bf2: jmpq   0x0000000110363c32
  0x0000000110363bf7: mov    0x8(%rsi),%ebx
  0x0000000110363bfa: shl    $0x3,%rbx
  0x0000000110363bfe: mov    0xa8(%rbx),%rbx
  0x0000000110363c05: lock cmpxchg %rbx,(%rsi)
  0x0000000110363c0a: mov    (%rsi),%rax
  0x0000000110363c0d: or     $0x1,%rax
  0x0000000110363c11: mov    %rax,(%rdi)
  0x0000000110363c14: lock cmpxchg %rdi,(%rsi)
  0x0000000110363c19: je     0x0000000110363c32
  0x0000000110363c1f: sub    %rsp,%rax
  0x0000000110363c22: and    $0xfffffffffffff007,%rax
  0x0000000110363c29: mov    %rax,(%rdi)
  0x0000000110363c2c: jne    0x0000000110363ec1  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)

  0x0000000110363c32: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110363c3c: mov    0x80(%rax),%eax    ;*getstatic state
                                                ; - java.lang.Shutdown::sequence@6 (line 165)

  0x0000000110363c42: cmp    $0x1,%eax
  0x0000000110363c45: movabs $0x127283758,%rax  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363c4f: movabs $0x108,%rsi
  0x0000000110363c59: je     0x0000000110363c69
  0x0000000110363c5f: movabs $0x118,%rsi
  0x0000000110363c69: mov    (%rax,%rsi,1),%rdi
  0x0000000110363c6d: lea    0x1(%rdi),%rdi
  0x0000000110363c71: mov    %rdi,(%rax,%rsi,1)
  0x0000000110363c75: jne    0x0000000110363e68  ;*if_icmpeq
                                                ; - java.lang.Shutdown::sequence@10 (line 165)

  0x0000000110363c7b: lea    0x20(%rsp),%rax
  0x0000000110363c80: mov    0x8(%rax),%rdi
  0x0000000110363c84: mov    (%rdi),%rsi
  0x0000000110363c87: and    $0x7,%rsi
  0x0000000110363c8b: cmp    $0x5,%rsi
  0x0000000110363c8f: je     0x0000000110363cac
  0x0000000110363c95: mov    (%rax),%rsi
  0x0000000110363c98: test   %rsi,%rsi
  0x0000000110363c9b: je     0x0000000110363cac
  0x0000000110363ca1: lock cmpxchg %rsi,(%rdi)
  0x0000000110363ca6: jne    0x0000000110363ed4  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@17 (line 166)

  0x0000000110363cac: movabs $0x127283758,%rsi  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363cb6: incl   0x128(%rsi)        ;*goto
                                                ; - java.lang.Shutdown::sequence@18 (line 166)

  0x0000000110363cbc: movabs $0x127283758,%rsi  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363cc6: addq   $0x1,0x140(%rsi)
  0x0000000110363cce: nop
  0x0000000110363ccf: callq  0x000000010ff58520  ; OopMap{off=436}
                                                ;*invokestatic runHooks
                                                ; - java.lang.Shutdown::sequence@26 (line 167)
                                                ;   {static_call}
  0x0000000110363cd4: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110363cde: mov    0x6c(%rax),%esi
  0x0000000110363ce1: shl    $0x3,%rsi          ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@29 (line 169)

  0x0000000110363ce5: lea    0x20(%rsp),%rdi
  0x0000000110363cea: mov    %rsi,0x8(%rdi)
  0x0000000110363cee: mov    (%rsi),%rax        ; implicit exception: dispatches to 0x0000000110363ee7
  0x0000000110363cf1: mov    %rax,%rbx
  0x0000000110363cf4: and    $0x7,%rbx
  0x0000000110363cf8: cmp    $0x5,%rbx
  0x0000000110363cfc: jne    0x0000000110363d83
  0x0000000110363d02: mov    0x8(%rsi),%ebx
  0x0000000110363d05: shl    $0x3,%rbx
  0x0000000110363d09: mov    0xa8(%rbx),%rbx
  0x0000000110363d10: or     %r15,%rbx
  0x0000000110363d13: xor    %rax,%rbx
  0x0000000110363d16: and    $0xffffffffffffff87,%rbx
  0x0000000110363d1a: je     0x0000000110363dab
  0x0000000110363d20: test   $0x7,%rbx
  0x0000000110363d27: jne    0x0000000110363d70
  0x0000000110363d29: test   $0x300,%rbx
  0x0000000110363d30: jne    0x0000000110363d4f
  0x0000000110363d32: and    $0x37f,%rax
  0x0000000110363d39: mov    %rax,%rbx
  0x0000000110363d3c: or     %r15,%rbx
  0x0000000110363d3f: lock cmpxchg %rbx,(%rsi)
  0x0000000110363d44: jne    0x0000000110363eec
  0x0000000110363d4a: jmpq   0x0000000110363dab
  0x0000000110363d4f: mov    0x8(%rsi),%ebx
  0x0000000110363d52: shl    $0x3,%rbx
  0x0000000110363d56: mov    0xa8(%rbx),%rbx
  0x0000000110363d5d: or     %r15,%rbx
  0x0000000110363d60: lock cmpxchg %rbx,(%rsi)
  0x0000000110363d65: jne    0x0000000110363eec
  0x0000000110363d6b: jmpq   0x0000000110363dab
  0x0000000110363d70: mov    0x8(%rsi),%ebx
  0x0000000110363d73: shl    $0x3,%rbx
  0x0000000110363d77: mov    0xa8(%rbx),%rbx
  0x0000000110363d7e: lock cmpxchg %rbx,(%rsi)
  0x0000000110363d83: mov    (%rsi),%rax
  0x0000000110363d86: or     $0x1,%rax
  0x0000000110363d8a: mov    %rax,(%rdi)
  0x0000000110363d8d: lock cmpxchg %rdi,(%rsi)
  0x0000000110363d92: je     0x0000000110363dab
  0x0000000110363d98: sub    %rsp,%rax
  0x0000000110363d9b: and    $0xfffffffffffff007,%rax
  0x0000000110363da2: mov    %rax,(%rdi)
  0x0000000110363da5: jne    0x0000000110363eec  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)

  0x0000000110363dab: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110363db5: movl   $0x2,0x80(%rax)    ;*putstatic state
                                                ; - java.lang.Shutdown::sequence@36 (line 170)

  0x0000000110363dbf: movsbl 0x8c(%rax),%esi    ;*getstatic runFinalizersOnExit
                                                ; - java.lang.Shutdown::sequence@39 (line 171)

  0x0000000110363dc6: lea    0x20(%rsp),%rax
  0x0000000110363dcb: mov    0x8(%rax),%rbx
  0x0000000110363dcf: mov    (%rbx),%rdi
  0x0000000110363dd2: and    $0x7,%rdi
  0x0000000110363dd6: cmp    $0x5,%rdi
  0x0000000110363dda: je     0x0000000110363df7
  0x0000000110363de0: mov    (%rax),%rdi
  0x0000000110363de3: test   %rdi,%rdi
  0x0000000110363de6: je     0x0000000110363df7
  0x0000000110363dec: lock cmpxchg %rdi,(%rbx)
  0x0000000110363df1: jne    0x0000000110363eff  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@44 (line 172)

  0x0000000110363df7: movabs $0x127283758,%rdi  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363e01: incl   0x150(%rdi)        ;*goto
                                                ; - java.lang.Shutdown::sequence@45 (line 172)

  0x0000000110363e07: cmp    $0x0,%esi
  0x0000000110363e0a: movabs $0x127283758,%rsi  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363e14: movabs $0x168,%rdi
  0x0000000110363e1e: je     0x0000000110363e2e
  0x0000000110363e24: movabs $0x178,%rdi
  0x0000000110363e2e: mov    (%rsi,%rdi,1),%rbx
  0x0000000110363e32: lea    0x1(%rbx),%rbx
  0x0000000110363e36: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110363e3a: je     0x0000000110363e5c  ;*ifeq
                                                ; - java.lang.Shutdown::sequence@54 (line 173)

  0x0000000110363e40: movabs $0x127283758,%rsi  ;   {metadata(method data for {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown')}
  0x0000000110363e4a: addq   $0x1,0x188(%rsi)
  0x0000000110363e52: nop
  0x0000000110363e53: nop
  0x0000000110363e54: nop
  0x0000000110363e55: nop
  0x0000000110363e56: nop
  0x0000000110363e57: callq  0x000000010ff58520  ; OopMap{off=828}
                                                ;*invokestatic runAllFinalizers
                                                ; - java.lang.Shutdown::sequence@57 (line 173)
                                                ;   {static_call}
  0x0000000110363e5c: add    $0x40,%rsp
  0x0000000110363e60: pop    %rbp
  0x0000000110363e61: test   %eax,-0x374ad67(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110363e67: retq                      ;*return
                                                ; - java.lang.Shutdown::sequence@60 (line 174)

  0x0000000110363e68: lea    0x20(%rsp),%rax
  0x0000000110363e6d: mov    0x8(%rax),%rdi
  0x0000000110363e71: mov    (%rdi),%rsi
  0x0000000110363e74: and    $0x7,%rsi
  0x0000000110363e78: cmp    $0x5,%rsi
  0x0000000110363e7c: je     0x0000000110363e99
  0x0000000110363e82: mov    (%rax),%rsi
  0x0000000110363e85: test   %rsi,%rsi
  0x0000000110363e88: je     0x0000000110363e99
  0x0000000110363e8e: lock cmpxchg %rsi,(%rdi)
  0x0000000110363e93: jne    0x0000000110363f12  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@14 (line 165)

  0x0000000110363e99: add    $0x40,%rsp
  0x0000000110363e9d: pop    %rbp
  0x0000000110363e9e: test   %eax,-0x374ada4(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110363ea4: retq
  0x0000000110363ea5: mov    %rax,0x8(%rsp)
  0x0000000110363eaa: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110363eb2: callq  0x00000001100129e0  ; OopMap{off=919}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown::sequence@-1 (line 161)
                                                ;   {runtime_call}
  0x0000000110363eb7: jmpq   0x0000000110363b5b
  0x0000000110363ebc: callq  0x000000011000e080  ; OopMap{rsi=Oop off=929}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)
                                                ;   {runtime_call}
  0x0000000110363ec1: mov    %rsi,0x8(%rsp)
  0x0000000110363ec6: mov    %rdi,(%rsp)
  0x0000000110363eca: callq  0x0000000110010c20  ; OopMap{rsi=Oop [40]=Oop off=943}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)
                                                ;   {runtime_call}
  0x0000000110363ecf: jmpq   0x0000000110363c32
  0x0000000110363ed4: lea    0x20(%rsp),%rax
  0x0000000110363ed9: mov    %rax,(%rsp)
  0x0000000110363edd: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110363ee2: jmpq   0x0000000110363cac
  0x0000000110363ee7: callq  0x000000011000e080  ; OopMap{rsi=Oop off=972}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)
                                                ;   {runtime_call}
  0x0000000110363eec: mov    %rsi,0x8(%rsp)
  0x0000000110363ef1: mov    %rdi,(%rsp)
  0x0000000110363ef5: callq  0x0000000110010c20  ; OopMap{rsi=Oop [40]=Oop off=986}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)
                                                ;   {runtime_call}
  0x0000000110363efa: jmpq   0x0000000110363dab
  0x0000000110363eff: lea    0x20(%rsp),%rax
  0x0000000110363f04: mov    %rax,(%rsp)
  0x0000000110363f08: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110363f0d: jmpq   0x0000000110363df7
  0x0000000110363f12: lea    0x20(%rsp),%rax
  0x0000000110363f17: mov    %rax,(%rsp)
  0x0000000110363f1b: callq  0x0000000110011060  ;   {runtime_call}
  0x0000000110363f20: jmpq   0x0000000110363e99
  0x0000000110363f25: nop
  0x0000000110363f26: nop
  0x0000000110363f27: mov    0x2a8(%r15),%rax
  0x0000000110363f2e: movabs $0x0,%r10
  0x0000000110363f38: mov    %r10,0x2a8(%r15)
  0x0000000110363f3f: movabs $0x0,%r10
  0x0000000110363f49: mov    %r10,0x2b0(%r15)
  0x0000000110363f50: add    $0x40,%rsp
  0x0000000110363f54: pop    %rbp
  0x0000000110363f55: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110363f5a: hlt
  0x0000000110363f5b: hlt
  0x0000000110363f5c: hlt
  0x0000000110363f5d: hlt
  0x0000000110363f5e: hlt
  0x0000000110363f5f: hlt
[Stub Code]
  0x0000000110363f60: nop                       ;   {no_reloc}
  0x0000000110363f61: nop
  0x0000000110363f62: nop
  0x0000000110363f63: nop
  0x0000000110363f64: nop
  0x0000000110363f65: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110363f6f: jmpq   0x0000000110363f6f  ;   {runtime_call}
  0x0000000110363f74: nop
  0x0000000110363f75: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110363f7f: jmpq   0x0000000110363f7f  ;   {runtime_call}
[Exception Handler]
  0x0000000110363f84: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110363f89: mov    %rsp,-0x28(%rsp)
  0x0000000110363f8e: sub    $0x80,%rsp
  0x0000000110363f95: mov    %rax,0x78(%rsp)
  0x0000000110363f9a: mov    %rcx,0x70(%rsp)
  0x0000000110363f9f: mov    %rdx,0x68(%rsp)
  0x0000000110363fa4: mov    %rbx,0x60(%rsp)
  0x0000000110363fa9: mov    %rbp,0x50(%rsp)
  0x0000000110363fae: mov    %rsi,0x48(%rsp)
  0x0000000110363fb3: mov    %rdi,0x40(%rsp)
  0x0000000110363fb8: mov    %r8,0x38(%rsp)
  0x0000000110363fbd: mov    %r9,0x30(%rsp)
  0x0000000110363fc2: mov    %r10,0x28(%rsp)
  0x0000000110363fc7: mov    %r11,0x20(%rsp)
  0x0000000110363fcc: mov    %r12,0x18(%rsp)
  0x0000000110363fd1: mov    %r13,0x10(%rsp)
  0x0000000110363fd6: mov    %r14,0x8(%rsp)
  0x0000000110363fdb: mov    %r15,(%rsp)
  0x0000000110363fdf: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110363fe9: movabs $0x110363f89,%rsi  ;   {internal_word}
  0x0000000110363ff3: mov    %rsp,%rdx
  0x0000000110363ff6: and    $0xfffffffffffffff0,%rsp
  0x0000000110363ffa: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110363fff: hlt
[Deopt Handler Code]
  0x0000000110364000: movabs $0x110364000,%r10  ;   {section_word}
  0x000000011036400a: push   %r10
  0x000000011036400c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110364011: hlt
  0x0000000110364012: hlt
  0x0000000110364013: hlt
  0x0000000110364014: hlt
  0x0000000110364015: hlt
  0x0000000110364016: hlt
  0x0000000110364017: hlt
Decoding compiled method 0x0000000110360e10:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127284870} '<init>' '(Ljava/util/ArrayList$SubList;II)V' in 'java/util/ArrayList$SubList$1'
  # this:     rsi:rsi   = 'java/util/ArrayList$SubList$1'
  # parm0:    rdx:rdx   = 'java/util/ArrayList$SubList'
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x40]  (sp of caller)
  0x0000000110360f80: mov    0x8(%rsi),%r10d
  0x0000000110360f84: shl    $0x3,%r10
  0x0000000110360f88: cmp    %rax,%r10
  0x0000000110360f8b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110360f91: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110360f9c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110360fa0: mov    %eax,-0x14000(%rsp)
  0x0000000110360fa7: push   %rbp
  0x0000000110360fa8: sub    $0x30,%rsp
  0x0000000110360fac: movabs $0x1272854c8,%rdi  ;   {metadata(method data for {method} {0x0000000127284870} '<init>' '(Ljava/util/ArrayList$SubList;II)V' in 'java/util/ArrayList$SubList$1')}
  0x0000000110360fb6: mov    0xdc(%rdi),%ebx
  0x0000000110360fbc: add    $0x8,%ebx
  0x0000000110360fbf: mov    %ebx,0xdc(%rdi)
  0x0000000110360fc5: movabs $0x127284870,%rdi  ;   {metadata({method} {0x0000000127284870} '<init>' '(Ljava/util/ArrayList$SubList;II)V' in 'java/util/ArrayList$SubList$1')}
  0x0000000110360fcf: and    $0x0,%ebx
  0x0000000110360fd2: cmp    $0x0,%ebx
  0x0000000110360fd5: je     0x000000011036106c  ;*aload_0
                                                ; - java.util.ArrayList$SubList$1::<init>@0 (line 1103)

  0x0000000110360fdb: mov    %rdx,%r10
  0x0000000110360fde: shr    $0x3,%r10
  0x0000000110360fe2: mov    %r10d,0x20(%rsi)
  0x0000000110360fe6: mov    %rsi,%rdi
  0x0000000110360fe9: shr    $0x9,%rdi
  0x0000000110360fed: movabs $0x109ac3000,%rbx
  0x0000000110360ff7: movb   $0x0,(%rdi,%rbx,1)  ;*putfield this$1
                                                ; - java.util.ArrayList$SubList$1::<init>@2 (line 1103)

  0x0000000110360ffb: mov    %ecx,0x18(%rsi)    ;*putfield val$index
                                                ; - java.util.ArrayList$SubList$1::<init>@7 (line 1103)

  0x0000000110360ffe: mov    %r8d,0x1c(%rsi)    ;*putfield val$offset
                                                ; - java.util.ArrayList$SubList$1::<init>@12 (line 1103)

  0x0000000110361002: mov    %rsi,%rdi
  0x0000000110361005: movabs $0x1272854c8,%rbx  ;   {metadata(method data for {method} {0x0000000127284870} '<init>' '(Ljava/util/ArrayList$SubList;II)V' in 'java/util/ArrayList$SubList$1')}
  0x000000011036100f: addq   $0x1,0x108(%rbx)
  0x0000000110361017: movabs $0x12708aa48,%rdi  ;   {metadata(method data for {method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x0000000110361021: mov    0xdc(%rdi),%ebx
  0x0000000110361027: add    $0x8,%ebx
  0x000000011036102a: mov    %ebx,0xdc(%rdi)
  0x0000000110361030: movabs $0x126f12480,%rdi  ;   {metadata({method} {0x0000000126f12480} '<init>' '()V' in 'java/lang/Object')}
  0x000000011036103a: and    $0x7ffff8,%ebx
  0x0000000110361040: cmp    $0x0,%ebx
  0x0000000110361043: je     0x0000000110361083
  0x0000000110361049: mov    %ecx,0xc(%rsi)     ;*putfield cursor
                                                ; - java.util.ArrayList$SubList$1::<init>@24 (line 1104)

  0x000000011036104c: movl   $0xffffffff,0x10(%rsi)  ;*putfield lastRet
                                                ; - java.util.ArrayList$SubList$1::<init>@29 (line 1105)

  0x0000000110361053: mov    0x20(%rdx),%edi    ; implicit exception: dispatches to 0x0000000110361097
  0x0000000110361056: shl    $0x3,%rdi          ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::<init>@37 (line 1106)

  0x000000011036105a: mov    0xc(%rdi),%edi     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::<init>@40 (line 1106)
                                                ; implicit exception: dispatches to 0x000000011036109c
  0x000000011036105d: mov    %edi,0x14(%rsi)    ;*putfield expectedModCount
                                                ; - java.util.ArrayList$SubList$1::<init>@43 (line 1106)

  0x0000000110361060: add    $0x30,%rsp
  0x0000000110361064: pop    %rbp
  0x0000000110361065: test   %eax,-0x3747f6b(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011036106b: retq
  0x000000011036106c: mov    %rdi,0x8(%rsp)
  0x0000000110361071: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110361079: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=254}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::<init>@-1 (line 1103)
                                                ;   {runtime_call}
  0x000000011036107e: jmpq   0x0000000110360fdb
  0x0000000110361083: mov    %rdi,0x8(%rsp)
  0x0000000110361088: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110361090: callq  0x00000001100129e0  ; OopMap{rsi=Oop rdx=Oop off=277}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ; - java.util.ArrayList$SubList$1::<init>@16 (line 1103)
                                                ;   {runtime_call}
  0x0000000110361095: jmp    0x0000000110361049
  0x0000000110361097: callq  0x000000011000e080  ; OopMap{rsi=Oop off=284}
                                                ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::<init>@37 (line 1106)
                                                ;   {runtime_call}
  0x000000011036109c: callq  0x000000011000e080  ; OopMap{rsi=Oop off=289}
                                                ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::<init>@40 (line 1106)
                                                ;   {runtime_call}
  0x00000001103610a1: nop
  0x00000001103610a2: nop
  0x00000001103610a3: mov    0x2a8(%r15),%rax
  0x00000001103610aa: movabs $0x0,%r10
  0x00000001103610b4: mov    %r10,0x2a8(%r15)
  0x00000001103610bb: movabs $0x0,%r10
  0x00000001103610c5: mov    %r10,0x2b0(%r15)
  0x00000001103610cc: add    $0x30,%rsp
  0x00000001103610d0: pop    %rbp
  0x00000001103610d1: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103610d6: hlt
  0x00000001103610d7: hlt
  0x00000001103610d8: hlt
  0x00000001103610d9: hlt
  0x00000001103610da: hlt
  0x00000001103610db: hlt
  0x00000001103610dc: hlt
  0x00000001103610dd: hlt
  0x00000001103610de: hlt
  0x00000001103610df: hlt
[Exception Handler]
[Stub Code]
  0x00000001103610e0: callq  0x00000001100100e0  ;   {no_reloc}
  0x00000001103610e5: mov    %rsp,-0x28(%rsp)
  0x00000001103610ea: sub    $0x80,%rsp
  0x00000001103610f1: mov    %rax,0x78(%rsp)
  0x00000001103610f6: mov    %rcx,0x70(%rsp)
  0x00000001103610fb: mov    %rdx,0x68(%rsp)
  0x0000000110361100: mov    %rbx,0x60(%rsp)
  0x0000000110361105: mov    %rbp,0x50(%rsp)
  0x000000011036110a: mov    %rsi,0x48(%rsp)
  0x000000011036110f: mov    %rdi,0x40(%rsp)
  0x0000000110361114: mov    %r8,0x38(%rsp)
  0x0000000110361119: mov    %r9,0x30(%rsp)
  0x000000011036111e: mov    %r10,0x28(%rsp)
  0x0000000110361123: mov    %r11,0x20(%rsp)
  0x0000000110361128: mov    %r12,0x18(%rsp)
  0x000000011036112d: mov    %r13,0x10(%rsp)
  0x0000000110361132: mov    %r14,0x8(%rsp)
  0x0000000110361137: mov    %r15,(%rsp)
  0x000000011036113b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110361145: movabs $0x1103610e5,%rsi  ;   {internal_word}
  0x000000011036114f: mov    %rsp,%rdx
  0x0000000110361152: and    $0xfffffffffffffff0,%rsp
  0x0000000110361156: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011036115b: hlt
[Deopt Handler Code]
  0x000000011036115c: movabs $0x11036115c,%r10  ;   {section_word}
  0x0000000110361166: push   %r10
  0x0000000110361168: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011036116d: hlt
  0x000000011036116e: hlt
  0x000000011036116f: hlt
Decoding compiled method 0x0000000110362cd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar'
  # parm0:    rdx:rdx   = long
  #           [sp+0x80]  (sp of caller)
  0x0000000110362ec0: mov    0x8(%rsi),%r10d
  0x0000000110362ec4: shl    $0x3,%r10
  0x0000000110362ec8: cmp    %rax,%r10
  0x0000000110362ecb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110362ed1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110362edc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110362ee0: mov    %eax,-0x14000(%rsp)
  0x0000000110362ee7: push   %rbp
  0x0000000110362ee8: sub    $0x70,%rsp
  0x0000000110362eec: movabs $0x127285610,%rdi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362ef6: mov    0xdc(%rdi),%ebx
  0x0000000110362efc: add    $0x8,%ebx
  0x0000000110362eff: mov    %ebx,0xdc(%rdi)
  0x0000000110362f05: movabs $0x1272109f8,%rdi  ;   {metadata({method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362f0f: and    $0x0,%ebx
  0x0000000110362f12: cmp    $0x0,%ebx
  0x0000000110362f15: je     0x00000001103632ba  ;*lload_1
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@0 (line 497)

  0x0000000110362f1b: movabs $0x0,%rsi
  0x0000000110362f25: cmp    %rdx,%rsi
  0x0000000110362f28: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362f32: movabs $0x108,%rdi
  0x0000000110362f3c: jge    0x0000000110362f4c
  0x0000000110362f42: movabs $0x118,%rdi
  0x0000000110362f4c: mov    (%rsi,%rdi,1),%rbx
  0x0000000110362f50: lea    0x1(%rbx),%rbx
  0x0000000110362f54: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110362f58: jge    0x00000001103630b1  ;*lcmp
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@2 (line 497)

  0x0000000110362f5e: movabs $0x1,%r10
  0x0000000110362f68: sub    %r10,%rdx
  0x0000000110362f6b: movabs $0x23ab1,%rbx
  0x0000000110362f75: mov    %rdx,%rsi
  0x0000000110362f78: mov    %rbx,%rax
  0x0000000110362f7b: mov    %rax,%rdi
  0x0000000110362f7e: cmp    $0x0,%rax
  0x0000000110362f82: je     0x00000001103632d1
  0x0000000110362f88: mov    %rbx,0x30(%rsp)
  0x0000000110362f8d: mov    %rdx,0x28(%rsp)
  0x0000000110362f92: callq  0x000000010e08655e  ;*ldiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@14 (line 499)
                                                ;   {runtime_call}
  0x0000000110362f97: mov    %eax,%eax
  0x0000000110362f99: mov    0x28(%rsp),%rsi
  0x0000000110362f9e: mov    0x30(%rsp),%rbx
  0x0000000110362fa3: mov    %rbx,%rdi
  0x0000000110362fa6: cmp    $0x0,%rbx
  0x0000000110362faa: je     0x00000001103632d6
  0x0000000110362fb0: mov    %eax,0x38(%rsp)
  0x0000000110362fb4: callq  0x000000010e086586  ;*lrem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@22 (line 500)
                                                ;   {runtime_call}
  0x0000000110362fb9: mov    %eax,%esi
  0x0000000110362fbb: mov    %rsi,%rax
  0x0000000110362fbe: mov    $0x8eac,%edi
  0x0000000110362fc3: cmp    $0x80000000,%eax
  0x0000000110362fc9: jne    0x0000000110362fda
  0x0000000110362fcf: xor    %edx,%edx
  0x0000000110362fd1: cmp    $0xffffffffffffffff,%edi
  0x0000000110362fd4: je     0x0000000110362fdd
  0x0000000110362fda: cltd
  0x0000000110362fdb: idiv   %edi               ; implicit exception: dispatches to 0x00000001103632db
  0x0000000110362fdd: mov    %rax,%rdi          ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@30 (line 501)

  0x0000000110362fe0: mov    %rsi,%rax
  0x0000000110362fe3: mov    $0x8eac,%esi
  0x0000000110362fe8: cmp    $0x80000000,%eax
  0x0000000110362fee: jne    0x0000000110362fff
  0x0000000110362ff4: xor    %edx,%edx
  0x0000000110362ff6: cmp    $0xffffffffffffffff,%esi
  0x0000000110362ff9: je     0x0000000110363002
  0x0000000110362fff: cltd
  0x0000000110363000: idiv   %esi               ; implicit exception: dispatches to 0x00000001103632e0
  0x0000000110363002: mov    %rdx,%rsi          ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@37 (line 502)

  0x0000000110363005: mov    %rsi,%rax
  0x0000000110363008: mov    $0x5b5,%ebx
  0x000000011036300d: cmp    $0x80000000,%eax
  0x0000000110363013: jne    0x0000000110363024
  0x0000000110363019: xor    %edx,%edx
  0x000000011036301b: cmp    $0xffffffffffffffff,%ebx
  0x000000011036301e: je     0x0000000110363027
  0x0000000110363024: cltd
  0x0000000110363025: idiv   %ebx               ; implicit exception: dispatches to 0x00000001103632e5
  0x0000000110363027: mov    %rax,%rbx          ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@45 (line 503)

  0x000000011036302a: mov    %rsi,%rax
  0x000000011036302d: mov    $0x5b5,%esi
  0x0000000110363032: cmp    $0x80000000,%eax
  0x0000000110363038: jne    0x0000000110363049
  0x000000011036303e: xor    %edx,%edx
  0x0000000110363040: cmp    $0xffffffffffffffff,%esi
  0x0000000110363043: je     0x000000011036304c
  0x0000000110363049: cltd
  0x000000011036304a: idiv   %esi               ; implicit exception: dispatches to 0x00000001103632ea
  0x000000011036304c: mov    %rdx,%rsi          ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@53 (line 504)

  0x000000011036304f: mov    %rsi,%rax
  0x0000000110363052: mov    $0x16d,%ecx
  0x0000000110363057: cmp    $0x80000000,%eax
  0x000000011036305d: jne    0x000000011036306e
  0x0000000110363063: xor    %edx,%edx
  0x0000000110363065: cmp    $0xffffffffffffffff,%ecx
  0x0000000110363068: je     0x0000000110363071
  0x000000011036306e: cltd
  0x000000011036306f: idiv   %ecx               ; implicit exception: dispatches to 0x00000001103632ef
  0x0000000110363071: mov    %rax,%rcx          ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@61 (line 505)

  0x0000000110363074: mov    %rsi,%rax
  0x0000000110363077: mov    $0x16d,%esi
  0x000000011036307c: cmp    $0x80000000,%eax
  0x0000000110363082: jne    0x0000000110363093
  0x0000000110363088: xor    %edx,%edx
  0x000000011036308a: cmp    $0xffffffffffffffff,%esi
  0x000000011036308d: je     0x0000000110363096
  0x0000000110363093: cltd
  0x0000000110363094: idiv   %esi               ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@69 (line 506)
                                                ; implicit exception: dispatches to 0x00000001103632f4
  0x0000000110363096: inc    %edx
  0x0000000110363098: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x00000001103630a2: incl   0x128(%rsi)
  0x00000001103630a8: mov    0x38(%rsp),%eax
  0x00000001103630ac: jmpq   0x000000011036321e  ;*goto
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@74 (line 506)

  0x00000001103630b1: movabs $0x1,%r10
  0x00000001103630bb: sub    %r10,%rdx
  0x00000001103630be: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x00000001103630c8: addq   $0x1,0x140(%rsi)
  0x00000001103630d0: movabs $0x23ab1,%rdi
  0x00000001103630da: mov    %rdx,%rsi
  0x00000001103630dd: mov    %rdx,0x40(%rsp)
  0x00000001103630e2: mov    %rdi,%rdx          ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@85 (line 509)

  0x00000001103630e5: mov    %rdi,0x48(%rsp)
  0x00000001103630ea: nop
  0x00000001103630eb: nop
  0x00000001103630ec: nop
  0x00000001103630ed: nop
  0x00000001103630ee: nop
  0x00000001103630ef: callq  0x000000010ff58520  ; OopMap{off=564}
                                                ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@85 (line 509)
                                                ;   {static_call}
  0x00000001103630f4: mov    %eax,%eax
  0x00000001103630f6: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110363100: addq   $0x1,0x150(%rsi)
  0x0000000110363108: mov    0x40(%rsp),%rsi
  0x000000011036310d: mov    0x48(%rsp),%rdx    ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@95 (line 510)

  0x0000000110363112: mov    %eax,0x3c(%rsp)
  0x0000000110363116: nop
  0x0000000110363117: callq  0x000000010ff58520  ; OopMap{off=604}
                                                ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@95 (line 510)
                                                ;   {static_call}
  0x000000011036311c: mov    %eax,%eax
  0x000000011036311e: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110363128: addq   $0x1,0x160(%rsi)
  0x0000000110363130: mov    %rax,%rsi
  0x0000000110363133: mov    $0x8eac,%edx       ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@105 (line 511)

  0x0000000110363138: mov    %eax,0x50(%rsp)
  0x000000011036313c: nop
  0x000000011036313d: nop
  0x000000011036313e: nop
  0x000000011036313f: callq  0x000000010ff58520  ; OopMap{off=644}
                                                ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@105 (line 511)
                                                ;   {static_call}
  0x0000000110363144: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x000000011036314e: addq   $0x1,0x170(%rsi)
  0x0000000110363156: mov    0x50(%rsp),%esi
  0x000000011036315a: mov    $0x8eac,%edx       ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@114 (line 512)

  0x000000011036315f: mov    %eax,0x54(%rsp)
  0x0000000110363163: nop
  0x0000000110363164: nop
  0x0000000110363165: nop
  0x0000000110363166: nop
  0x0000000110363167: callq  0x000000010ff58520  ; OopMap{off=684}
                                                ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@114 (line 512)
                                                ;   {static_call}
  0x000000011036316c: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110363176: addq   $0x1,0x180(%rsi)
  0x000000011036317e: mov    %rax,%rsi
  0x0000000110363181: mov    $0x5b5,%edx        ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@124 (line 513)

  0x0000000110363186: mov    %eax,0x58(%rsp)
  0x000000011036318a: nop
  0x000000011036318b: nop
  0x000000011036318c: nop
  0x000000011036318d: nop
  0x000000011036318e: nop
  0x000000011036318f: callq  0x000000010ff58520  ; OopMap{off=724}
                                                ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@124 (line 513)
                                                ;   {static_call}
  0x0000000110363194: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x000000011036319e: addq   $0x1,0x190(%rsi)
  0x00000001103631a6: mov    0x58(%rsp),%esi
  0x00000001103631aa: mov    $0x5b5,%edx        ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@134 (line 514)

  0x00000001103631af: mov    %eax,0x5c(%rsp)
  0x00000001103631b3: nop
  0x00000001103631b4: nop
  0x00000001103631b5: nop
  0x00000001103631b6: nop
  0x00000001103631b7: callq  0x000000010ff58520  ; OopMap{off=764}
                                                ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@134 (line 514)
                                                ;   {static_call}
  0x00000001103631bc: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x00000001103631c6: addq   $0x1,0x1a0(%rsi)
  0x00000001103631ce: mov    %rax,%rsi
  0x00000001103631d1: mov    $0x16d,%edx        ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@144 (line 515)

  0x00000001103631d6: mov    %eax,0x60(%rsp)
  0x00000001103631da: nop
  0x00000001103631db: nop
  0x00000001103631dc: nop
  0x00000001103631dd: nop
  0x00000001103631de: nop
  0x00000001103631df: callq  0x000000010ff58520  ; OopMap{off=804}
                                                ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@144 (line 515)
                                                ;   {static_call}
  0x00000001103631e4: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x00000001103631ee: addq   $0x1,0x1b0(%rsi)
  0x00000001103631f6: mov    0x60(%rsp),%esi
  0x00000001103631fa: mov    $0x16d,%edx        ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@154 (line 516)

  0x00000001103631ff: mov    %eax,0x64(%rsp)
  0x0000000110363203: nop
  0x0000000110363204: nop
  0x0000000110363205: nop
  0x0000000110363206: nop
  0x0000000110363207: callq  0x000000010ff58520  ; OopMap{off=844}
                                                ;*invokestatic mod
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@154 (line 516)
                                                ;   {static_call}
  0x000000011036320c: inc    %eax
  0x000000011036320e: mov    0x64(%rsp),%ecx
  0x0000000110363212: mov    0x5c(%rsp),%ebx
  0x0000000110363216: mov    0x54(%rsp),%edi
  0x000000011036321a: mov    0x3c(%rsp),%eax    ;*sipush
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@161 (line 518)

  0x000000011036321e: mov    $0x190,%esi
  0x0000000110363223: imul   %esi,%eax
  0x0000000110363226: mov    $0x64,%esi
  0x000000011036322b: mov    %rdi,%rdx
  0x000000011036322e: imul   %esi,%edx
  0x0000000110363231: add    %edx,%eax
  0x0000000110363233: shl    $0x2,%ebx
  0x0000000110363236: add    %ebx,%eax
  0x0000000110363238: add    %ecx,%eax
  0x000000011036323a: cmp    $0x4,%edi
  0x000000011036323d: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110363247: movabs $0x1c0,%rdi
  0x0000000110363251: je     0x0000000110363261
  0x0000000110363257: movabs $0x1d0,%rdi
  0x0000000110363261: mov    (%rsi,%rdi,1),%rbx
  0x0000000110363265: lea    0x1(%rbx),%rbx
  0x0000000110363269: mov    %rbx,(%rsi,%rdi,1)
  0x000000011036326d: je     0x00000001103632ae  ;*if_icmpeq
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@186 (line 519)

  0x0000000110363273: cmp    $0x4,%ecx
  0x0000000110363276: movabs $0x127285610,%rsi  ;   {metadata(method data for {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110363280: movabs $0x1e0,%rdi
  0x000000011036328a: je     0x000000011036329a
  0x0000000110363290: movabs $0x1f0,%rdi
  0x000000011036329a: mov    (%rsi,%rdi,1),%rbx
  0x000000011036329e: lea    0x1(%rbx),%rbx
  0x00000001103632a2: mov    %rbx,(%rsi,%rdi,1)
  0x00000001103632a6: je     0x00000001103632ae  ;*if_icmpeq
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@192 (line 519)

  0x00000001103632ac: inc    %eax
  0x00000001103632ae: add    $0x70,%rsp
  0x00000001103632b2: pop    %rbp
  0x00000001103632b3: test   %eax,-0x374a1b9(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103632b9: retq
  0x00000001103632ba: mov    %rdi,0x8(%rsp)
  0x00000001103632bf: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103632c7: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=1036}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@-1 (line 497)
                                                ;   {runtime_call}
  0x00000001103632cc: jmpq   0x0000000110362f1b
  0x00000001103632d1: callq  0x000000011000de40  ; OopMap{off=1046}
                                                ;*ldiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@14 (line 499)
                                                ;   {runtime_call}
  0x00000001103632d6: callq  0x000000011000de40  ; OopMap{off=1051}
                                                ;*lrem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@22 (line 500)
                                                ;   {runtime_call}
  0x00000001103632db: callq  0x000000011000de40  ; OopMap{off=1056}
                                                ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@30 (line 501)
                                                ;   {runtime_call}
  0x00000001103632e0: callq  0x000000011000de40  ; OopMap{off=1061}
                                                ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@37 (line 502)
                                                ;   {runtime_call}
  0x00000001103632e5: callq  0x000000011000de40  ; OopMap{off=1066}
                                                ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@45 (line 503)
                                                ;   {runtime_call}
  0x00000001103632ea: callq  0x000000011000de40  ; OopMap{off=1071}
                                                ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@53 (line 504)
                                                ;   {runtime_call}
  0x00000001103632ef: callq  0x000000011000de40  ; OopMap{off=1076}
                                                ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@61 (line 505)
                                                ;   {runtime_call}
  0x00000001103632f4: callq  0x000000011000de40  ; OopMap{off=1081}
                                                ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@69 (line 506)
                                                ;   {runtime_call}
  0x00000001103632f9: nop
  0x00000001103632fa: nop
  0x00000001103632fb: mov    0x2a8(%r15),%rax
  0x0000000110363302: movabs $0x0,%r10
  0x000000011036330c: mov    %r10,0x2a8(%r15)
  0x0000000110363313: movabs $0x0,%r10
  0x000000011036331d: mov    %r10,0x2b0(%r15)
  0x0000000110363324: add    $0x70,%rsp
  0x0000000110363328: pop    %rbp
  0x0000000110363329: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011036332e: hlt
  0x000000011036332f: hlt
  0x0000000110363330: hlt
  0x0000000110363331: hlt
  0x0000000110363332: hlt
  0x0000000110363333: hlt
  0x0000000110363334: hlt
  0x0000000110363335: hlt
  0x0000000110363336: hlt
  0x0000000110363337: hlt
  0x0000000110363338: hlt
  0x0000000110363339: hlt
  0x000000011036333a: hlt
  0x000000011036333b: hlt
  0x000000011036333c: hlt
  0x000000011036333d: hlt
  0x000000011036333e: hlt
  0x000000011036333f: hlt
[Stub Code]
  0x0000000110363340: nop                       ;   {no_reloc}
  0x0000000110363341: nop
  0x0000000110363342: nop
  0x0000000110363343: nop
  0x0000000110363344: nop
  0x0000000110363345: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036334f: jmpq   0x000000011036334f  ;   {runtime_call}
  0x0000000110363354: nop
  0x0000000110363355: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036335f: jmpq   0x000000011036335f  ;   {runtime_call}
  0x0000000110363364: nop
  0x0000000110363365: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036336f: jmpq   0x000000011036336f  ;   {runtime_call}
  0x0000000110363374: nop
  0x0000000110363375: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036337f: jmpq   0x000000011036337f  ;   {runtime_call}
  0x0000000110363384: nop
  0x0000000110363385: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036338f: jmpq   0x000000011036338f  ;   {runtime_call}
  0x0000000110363394: nop
  0x0000000110363395: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036339f: jmpq   0x000000011036339f  ;   {runtime_call}
  0x00000001103633a4: nop
  0x00000001103633a5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103633af: jmpq   0x00000001103633af  ;   {runtime_call}
  0x00000001103633b4: nop
  0x00000001103633b5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103633bf: jmpq   0x00000001103633bf  ;   {runtime_call}
[Exception Handler]
  0x00000001103633c4: callq  0x00000001100100e0  ;   {runtime_call}
  0x00000001103633c9: mov    %rsp,-0x28(%rsp)
  0x00000001103633ce: sub    $0x80,%rsp
  0x00000001103633d5: mov    %rax,0x78(%rsp)
  0x00000001103633da: mov    %rcx,0x70(%rsp)
  0x00000001103633df: mov    %rdx,0x68(%rsp)
  0x00000001103633e4: mov    %rbx,0x60(%rsp)
  0x00000001103633e9: mov    %rbp,0x50(%rsp)
  0x00000001103633ee: mov    %rsi,0x48(%rsp)
  0x00000001103633f3: mov    %rdi,0x40(%rsp)
  0x00000001103633f8: mov    %r8,0x38(%rsp)
  0x00000001103633fd: mov    %r9,0x30(%rsp)
  0x0000000110363402: mov    %r10,0x28(%rsp)
  0x0000000110363407: mov    %r11,0x20(%rsp)
  0x000000011036340c: mov    %r12,0x18(%rsp)
  0x0000000110363411: mov    %r13,0x10(%rsp)
  0x0000000110363416: mov    %r14,0x8(%rsp)
  0x000000011036341b: mov    %r15,(%rsp)
  0x000000011036341f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110363429: movabs $0x1103633c9,%rsi  ;   {internal_word}
  0x0000000110363433: mov    %rsp,%rdx
  0x0000000110363436: and    $0xfffffffffffffff0,%rsp
  0x000000011036343a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011036343f: hlt
[Deopt Handler Code]
  0x0000000110363440: movabs $0x110363440,%r10  ;   {section_word}
  0x000000011036344a: push   %r10
  0x000000011036344c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110363451: hlt
  0x0000000110363452: hlt
  0x0000000110363453: hlt
  0x0000000110363454: hlt
  0x0000000110363455: hlt
  0x0000000110363456: hlt
  0x0000000110363457: hlt
Decoding compiled method 0x0000000110368b90:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127284870} '<init>' '(Ljava/util/ArrayList$SubList;II)V' in 'java/util/ArrayList$SubList$1'
  # this:     rsi:rsi   = 'java/util/ArrayList$SubList$1'
  # parm0:    rdx:rdx   = 'java/util/ArrayList$SubList'
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x20]  (sp of caller)
  0x0000000110368ce0: mov    0x8(%rsi),%r10d
  0x0000000110368ce4: shl    $0x3,%r10
  0x0000000110368ce8: cmp    %r10,%rax
  0x0000000110368ceb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110368cf1: data32 xchg %ax,%ax
  0x0000000110368cf4: nopl   0x0(%rax,%rax,1)
  0x0000000110368cfc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110368d00: mov    %eax,-0x14000(%rsp)
  0x0000000110368d07: push   %rbp
  0x0000000110368d08: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::<init>@-1 (line 1103)

  0x0000000110368d0c: mov    %rsi,%rbp
  0x0000000110368d0f: mov    %ecx,0x18(%rsi)    ;*putfield val$index
                                                ; - java.util.ArrayList$SubList$1::<init>@7 (line 1103)

  0x0000000110368d12: mov    %r8d,0x1c(%rsi)    ;*putfield val$offset
                                                ; - java.util.ArrayList$SubList$1::<init>@12 (line 1103)

  0x0000000110368d16: mov    %rsi,%r10
  0x0000000110368d19: mov    %rdx,%r8
  0x0000000110368d1c: shr    $0x3,%r8
  0x0000000110368d20: mov    %r8d,0x20(%rsi)
  0x0000000110368d24: shr    $0x9,%r10
  0x0000000110368d28: movabs $0x109ac3000,%r11
  0x0000000110368d32: mov    %r12b,(%r11,%r10,1)  ;*putfield this$1
                                                ; - java.util.ArrayList$SubList$1::<init>@2 (line 1103)

  0x0000000110368d36: nop
  0x0000000110368d37: callq  0x000000010ff580a0  ; OopMap{rbp=Oop off=92}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::<init>@16 (line 1103)
                                                ;   {optimized virtual_call}
  0x0000000110368d3c: movl   $0xffffffff,0x10(%rbp)  ;*putfield lastRet
                                                ; - java.util.ArrayList$SubList$1::<init>@29 (line 1105)

  0x0000000110368d43: mov    0x20(%rbp),%r10d   ;*getfield this$1
                                                ; - java.util.ArrayList$SubList$1::<init>@34 (line 1106)

  0x0000000110368d47: mov    0x18(%rbp),%r8d
  0x0000000110368d4b: mov    %r8d,0xc(%rbp)     ;*putfield cursor
                                                ; - java.util.ArrayList$SubList$1::<init>@24 (line 1104)

  0x0000000110368d4f: mov    0x20(%r12,%r10,8),%r10d  ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::<init>@37 (line 1106)
                                                ; implicit exception: dispatches to 0x0000000110368d76
  0x0000000110368d54: mov    0xc(%r12,%r10,8),%r11d  ; implicit exception: dispatches to 0x0000000110368d85
  0x0000000110368d59: mov    %r11d,0x14(%rbp)   ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::<init>@-1 (line 1103)

  0x0000000110368d5d: add    $0x10,%rsp
  0x0000000110368d61: pop    %rbp
  0x0000000110368d62: test   %eax,-0x374fd68(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110368d68: retq                      ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::<init>@16 (line 1103)

  0x0000000110368d69: mov    %rax,%rsi
  0x0000000110368d6c: add    $0x10,%rsp
  0x0000000110368d70: pop    %rbp
  0x0000000110368d71: jmpq   0x0000000110019060  ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::<init>@37 (line 1106)
                                                ;   {runtime_call}
  0x0000000110368d76: mov    $0xfffffff6,%esi
  0x0000000110368d7b: callq  0x000000010ff576a0  ; OopMap{off=160}
                                                ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::<init>@37 (line 1106)
                                                ;   {runtime_call}
  0x0000000110368d80: callq  0x000000010e0276f4  ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::<init>@40 (line 1106)
                                                ;   {runtime_call}
  0x0000000110368d85: mov    $0xfffffff6,%esi
  0x0000000110368d8a: nop
  0x0000000110368d8b: callq  0x000000010ff576a0  ; OopMap{off=176}
                                                ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::<init>@40 (line 1106)
                                                ;   {runtime_call}
  0x0000000110368d90: callq  0x000000010e0276f4  ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::<init>@40 (line 1106)
                                                ;   {runtime_call}
  0x0000000110368d95: hlt
  0x0000000110368d96: hlt
  0x0000000110368d97: hlt
  0x0000000110368d98: hlt
  0x0000000110368d99: hlt
  0x0000000110368d9a: hlt
  0x0000000110368d9b: hlt
  0x0000000110368d9c: hlt
  0x0000000110368d9d: hlt
  0x0000000110368d9e: hlt
  0x0000000110368d9f: hlt
[Stub Code]
  0x0000000110368da0: movabs $0x0,%rbx          ;   {no_reloc}
  0x0000000110368daa: jmpq   0x0000000110368daa  ;   {runtime_call}
[Exception Handler]
  0x0000000110368daf: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110368db4: callq  0x0000000110368db9
  0x0000000110368db9: subq   $0x5,(%rsp)
  0x0000000110368dbe: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110368dc3: hlt
  0x0000000110368dc4: hlt
  0x0000000110368dc5: hlt
  0x0000000110368dc6: hlt
  0x0000000110368dc7: hlt
Decoding compiled method 0x0000000110366650:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000001272819d0} 'sequence' '()V' in 'java/lang/Shutdown'
  #           [sp+0x30]  (sp of caller)
  0x00000001103667c0: mov    %eax,-0x14000(%rsp)
  0x00000001103667c7: push   %rbp
  0x00000001103667c8: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.Shutdown::sequence@-1 (line 161)

  0x00000001103667cc: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x00000001103667d6: mov    0x6c(%r10),%r11d   ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@0 (line 161)

  0x00000001103667da: test   %r11d,%r11d
  0x00000001103667dd: je     0x0000000110366909  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)

  0x00000001103667e3: lea    (%r12,%r11,8),%r9  ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@0 (line 161)

  0x00000001103667e7: mov    (%r9),%rax
  0x00000001103667ea: mov    %rax,%r10
  0x00000001103667ed: and    $0x7,%r10
  0x00000001103667f1: cmp    $0x5,%r10
  0x00000001103667f5: jne    0x000000011036691e
  0x00000001103667fb: mov    0x8(%r12,%r11,8),%r10d
  0x0000000110366800: shl    $0x3,%r10
  0x0000000110366804: mov    0xa8(%r10),%r10
  0x000000011036680b: mov    %r10,%r11
  0x000000011036680e: or     %r15,%r11
  0x0000000110366811: mov    %r11,%r8
  0x0000000110366814: xor    %rax,%r8
  0x0000000110366817: test   $0xffffffffffffff87,%r8
  0x000000011036681e: jne    0x0000000110366991  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)

  0x0000000110366824: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011036682e: mov    0x80(%r10),%r11d
  0x0000000110366835: mov    $0x7,%ebp
  0x000000011036683a: cmp    $0x1,%r11d
  0x000000011036683e: je     0x0000000110366859  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@14 (line 165)

  0x0000000110366840: and    (%r9),%rbp
  0x0000000110366843: cmp    $0x5,%rbp
  0x0000000110366847: jne    0x00000001103669c0  ;*synchronization entry
                                                ; - java.lang.Shutdown::sequence@-1 (line 161)

  0x000000011036684d: add    $0x20,%rsp
  0x0000000110366851: pop    %rbp
  0x0000000110366852: test   %eax,-0x374d858(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110366858: retq
  0x0000000110366859: mov    $0x7,%r10d
  0x000000011036685f: and    (%r9),%r10
  0x0000000110366862: cmp    $0x5,%r10
  0x0000000110366866: jne    0x0000000110366a75  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@17 (line 166)

  0x000000011036686c: data32 xchg %ax,%ax
  0x000000011036686f: callq  0x000000010ff58520  ; OopMap{off=180}
                                                ;*invokestatic runHooks
                                                ; - java.lang.Shutdown::sequence@26 (line 167)
                                                ;   {static_call}
  0x0000000110366874: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x000000011036687e: mov    0x6c(%r10),%r11d   ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@29 (line 169)

  0x0000000110366882: test   %r11d,%r11d
  0x0000000110366885: je     0x0000000110366a66  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)

  0x000000011036688b: lea    (%r12,%r11,8),%r9  ;*getstatic lock
                                                ; - java.lang.Shutdown::sequence@29 (line 169)

  0x000000011036688f: mov    (%r9),%rax
  0x0000000110366892: mov    %rax,%r10
  0x0000000110366895: and    $0x7,%r10
  0x0000000110366899: cmp    $0x5,%r10
  0x000000011036689d: jne    0x0000000110366b20
  0x00000001103668a3: mov    0x8(%r12,%r11,8),%r10d
  0x00000001103668a8: shl    $0x3,%r10
  0x00000001103668ac: mov    0xa8(%r10),%r10
  0x00000001103668b3: mov    %r10,%r11
  0x00000001103668b6: or     %r15,%r11
  0x00000001103668b9: mov    %r11,%r8
  0x00000001103668bc: xor    %rax,%r8
  0x00000001103668bf: test   $0xffffffffffffff87,%r8
  0x00000001103668c6: jne    0x0000000110366c33
  0x00000001103668cc: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x00000001103668d6: movl   $0x2,0x80(%r10)    ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)

  0x00000001103668e1: movzbl 0x8c(%r10),%ebx
  0x00000001103668e9: and    (%r9),%rbp
  0x00000001103668ec: cmp    $0x5,%rbp
  0x00000001103668f0: jne    0x0000000110366b8d
  0x00000001103668f6: test   %ebx,%ebx
  0x00000001103668f8: je     0x000000011036684d  ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@44 (line 172)

  0x00000001103668fe: nop
  0x00000001103668ff: callq  0x000000010ff58520  ; OopMap{off=324}
                                                ;*invokestatic runAllFinalizers
                                                ; - java.lang.Shutdown::sequence@57 (line 173)
                                                ;   {static_call}
  0x0000000110366904: jmpq   0x000000011036684d
  0x0000000110366909: mov    $0xfffffff6,%esi
  0x000000011036690e: nop
  0x000000011036690f: callq  0x000000010ff576a0  ; OopMap{off=340}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)
                                                ;   {runtime_call}
  0x0000000110366914: callq  0x000000010e0276f4  ;   {runtime_call}
  0x0000000110366919: lock cmpxchg %r10,(%r9)
  0x000000011036691e: lea    0x10(%rsp),%rbx
  0x0000000110366923: mov    (%r9),%rax
  0x0000000110366926: test   $0x2,%rax
  0x000000011036692c: jne    0x0000000110366952
  0x000000011036692e: or     $0x1,%rax
  0x0000000110366932: mov    %rax,(%rbx)
  0x0000000110366935: lock cmpxchg %rbx,(%r9)
  0x000000011036693a: je     0x000000011036696b
  0x0000000110366940: sub    %rsp,%rax
  0x0000000110366943: and    $0xfffffffffffff007,%rax
  0x000000011036694a: mov    %rax,(%rbx)
  0x000000011036694d: jmpq   0x000000011036696b
  0x0000000110366952: movq   $0x3,(%rbx)
  0x0000000110366959: mov    %rax,%rbx
  0x000000011036695c: mov    0x16(%rbx),%rax
  0x0000000110366960: test   %rax,%rax
  0x0000000110366963: jne    0x000000011036696b
  0x0000000110366965: lock cmpxchg %r15,0x16(%rbx)
  0x000000011036696b: je     0x0000000110366824
  0x0000000110366971: mov    %r9,%rsi
  0x0000000110366974: lea    0x10(%rsp),%rdx
  0x0000000110366979: mov    %r9,(%rsp)
  0x000000011036697d: mov    %r9,0x8(%rsp)
  0x0000000110366982: nop
  0x0000000110366983: callq  0x0000000110018f60  ; OopMap{[0]=Oop [8]=Oop off=456}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)
                                                ;   {runtime_call}
  0x0000000110366988: mov    (%rsp),%r9
  0x000000011036698c: jmpq   0x0000000110366824
  0x0000000110366991: test   $0x7,%r8
  0x0000000110366998: jne    0x0000000110366919
  0x000000011036699e: test   $0x300,%r8
  0x00000001103669a5: jne    0x00000001103669b4
  0x00000001103669a7: and    $0x37f,%rax
  0x00000001103669ae: mov    %rax,%r11
  0x00000001103669b1: or     %r15,%r11
  0x00000001103669b4: lock cmpxchg %r11,(%r9)
  0x00000001103669b9: jne    0x0000000110366971
  0x00000001103669bb: jmpq   0x0000000110366824
  0x00000001103669c0: lea    0x10(%rsp),%rax
  0x00000001103669c5: cmpq   $0x0,(%rax)
  0x00000001103669cc: je     0x0000000110366a46
  0x00000001103669d2: mov    (%r9),%r10
  0x00000001103669d5: test   $0x2,%r10
  0x00000001103669dc: je     0x0000000110366a3e
  0x00000001103669de: mov    0x16(%r10),%rax
  0x00000001103669e2: xor    %r15,%rax
  0x00000001103669e5: or     0x26(%r10),%rax
  0x00000001103669e9: jne    0x0000000110366a46
  0x00000001103669eb: mov    0x36(%r10),%rax
  0x00000001103669ef: or     0x3e(%r10),%rax
  0x00000001103669f3: jne    0x00000001103669ff
  0x00000001103669f5: movq   $0x0,0x16(%r10)
  0x00000001103669fd: jmp    0x0000000110366a46
  0x00000001103669ff: cmpq   $0x0,0x46(%r10)
  0x0000000110366a07: je     0x0000000110366a32
  0x0000000110366a09: movq   $0x0,0x16(%r10)
  0x0000000110366a11: lock addl $0x0,(%rsp)
  0x0000000110366a16: cmpq   $0x0,0x46(%r10)
  0x0000000110366a1e: jne    0x0000000110366a37
  0x0000000110366a20: movabs $0x0,%rax
  0x0000000110366a2a: lock cmpxchg %r15,0x16(%r10)
  0x0000000110366a30: jne    0x0000000110366a37
  0x0000000110366a32: or     $0x1,%eax
  0x0000000110366a35: jmp    0x0000000110366a46
  0x0000000110366a37: test   $0x0,%eax
  0x0000000110366a3c: jmp    0x0000000110366a46
  0x0000000110366a3e: mov    (%rax),%r10
  0x0000000110366a41: lock cmpxchg %r10,(%r9)
  0x0000000110366a46: je     0x000000011036684d
  0x0000000110366a4c: mov    %r9,%rdi
  0x0000000110366a4f: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)

  0x0000000110366a54: movabs $0x10e087a5a,%r10
  0x0000000110366a5e: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@14 (line 165)

  0x0000000110366a61: jmpq   0x000000011036684d
  0x0000000110366a66: mov    $0xfffffff6,%esi
  0x0000000110366a6b: callq  0x000000010ff576a0  ; OopMap{off=688}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)
                                                ;   {runtime_call}
  0x0000000110366a70: callq  0x000000010e0276f4  ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)
                                                ;   {runtime_call}
  0x0000000110366a75: lea    0x10(%rsp),%rax
  0x0000000110366a7a: cmpq   $0x0,(%rax)
  0x0000000110366a81: je     0x0000000110366afb
  0x0000000110366a87: mov    (%r9),%r10
  0x0000000110366a8a: test   $0x2,%r10
  0x0000000110366a91: je     0x0000000110366af3
  0x0000000110366a93: mov    0x16(%r10),%rax
  0x0000000110366a97: xor    %r15,%rax
  0x0000000110366a9a: or     0x26(%r10),%rax
  0x0000000110366a9e: jne    0x0000000110366afb
  0x0000000110366aa0: mov    0x36(%r10),%rax
  0x0000000110366aa4: or     0x3e(%r10),%rax
  0x0000000110366aa8: jne    0x0000000110366ab4
  0x0000000110366aaa: movq   $0x0,0x16(%r10)
  0x0000000110366ab2: jmp    0x0000000110366afb
  0x0000000110366ab4: cmpq   $0x0,0x46(%r10)
  0x0000000110366abc: je     0x0000000110366ae7
  0x0000000110366abe: movq   $0x0,0x16(%r10)
  0x0000000110366ac6: lock addl $0x0,(%rsp)
  0x0000000110366acb: cmpq   $0x0,0x46(%r10)
  0x0000000110366ad3: jne    0x0000000110366aec
  0x0000000110366ad5: movabs $0x0,%rax
  0x0000000110366adf: lock cmpxchg %r15,0x16(%r10)
  0x0000000110366ae5: jne    0x0000000110366aec
  0x0000000110366ae7: or     $0x1,%eax
  0x0000000110366aea: jmp    0x0000000110366afb
  0x0000000110366aec: test   $0x0,%eax
  0x0000000110366af1: jmp    0x0000000110366afb
  0x0000000110366af3: mov    (%rax),%r10
  0x0000000110366af6: lock cmpxchg %r10,(%r9)
  0x0000000110366afb: je     0x000000011036686c
  0x0000000110366b01: mov    %r9,%rdi
  0x0000000110366b04: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@5 (line 161)

  0x0000000110366b09: movabs $0x10e087a5a,%r10
  0x0000000110366b13: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@17 (line 166)

  0x0000000110366b16: jmpq   0x000000011036686c
  0x0000000110366b1b: lock cmpxchg %r10,(%r9)
  0x0000000110366b20: lea    0x10(%rsp),%rbx
  0x0000000110366b25: mov    (%r9),%rax
  0x0000000110366b28: test   $0x2,%rax
  0x0000000110366b2e: jne    0x0000000110366b54
  0x0000000110366b30: or     $0x1,%rax
  0x0000000110366b34: mov    %rax,(%rbx)
  0x0000000110366b37: lock cmpxchg %rbx,(%r9)
  0x0000000110366b3c: je     0x0000000110366b6d
  0x0000000110366b42: sub    %rsp,%rax
  0x0000000110366b45: and    $0xfffffffffffff007,%rax
  0x0000000110366b4c: mov    %rax,(%rbx)
  0x0000000110366b4f: jmpq   0x0000000110366b6d
  0x0000000110366b54: movq   $0x3,(%rbx)
  0x0000000110366b5b: mov    %rax,%rbx
  0x0000000110366b5e: mov    0x16(%rbx),%rax
  0x0000000110366b62: test   %rax,%rax
  0x0000000110366b65: jne    0x0000000110366b6d
  0x0000000110366b67: lock cmpxchg %r15,0x16(%rbx)
  0x0000000110366b6d: je     0x00000001103668cc
  0x0000000110366b73: mov    %r9,(%rsp)
  0x0000000110366b77: mov    %r9,%rsi
  0x0000000110366b7a: lea    0x10(%rsp),%rdx
  0x0000000110366b7f: callq  0x0000000110018f60  ; OopMap{[0]=Oop off=964}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)
                                                ;   {runtime_call}
  0x0000000110366b84: mov    (%rsp),%r9
  0x0000000110366b88: jmpq   0x00000001103668cc
  0x0000000110366b8d: lea    0x10(%rsp),%rax
  0x0000000110366b92: cmpq   $0x0,(%rax)
  0x0000000110366b99: je     0x0000000110366c13
  0x0000000110366b9f: mov    (%r9),%r10
  0x0000000110366ba2: test   $0x2,%r10
  0x0000000110366ba9: je     0x0000000110366c0b
  0x0000000110366bab: mov    0x16(%r10),%rax
  0x0000000110366baf: xor    %r15,%rax
  0x0000000110366bb2: or     0x26(%r10),%rax
  0x0000000110366bb6: jne    0x0000000110366c13
  0x0000000110366bb8: mov    0x36(%r10),%rax
  0x0000000110366bbc: or     0x3e(%r10),%rax
  0x0000000110366bc0: jne    0x0000000110366bcc
  0x0000000110366bc2: movq   $0x0,0x16(%r10)
  0x0000000110366bca: jmp    0x0000000110366c13
  0x0000000110366bcc: cmpq   $0x0,0x46(%r10)
  0x0000000110366bd4: je     0x0000000110366bff
  0x0000000110366bd6: movq   $0x0,0x16(%r10)
  0x0000000110366bde: lock addl $0x0,(%rsp)
  0x0000000110366be3: cmpq   $0x0,0x46(%r10)
  0x0000000110366beb: jne    0x0000000110366c04
  0x0000000110366bed: movabs $0x0,%rax
  0x0000000110366bf7: lock cmpxchg %r15,0x16(%r10)
  0x0000000110366bfd: jne    0x0000000110366c04
  0x0000000110366bff: or     $0x1,%eax
  0x0000000110366c02: jmp    0x0000000110366c13
  0x0000000110366c04: test   $0x0,%eax
  0x0000000110366c09: jmp    0x0000000110366c13
  0x0000000110366c0b: mov    (%rax),%r10
  0x0000000110366c0e: lock cmpxchg %r10,(%r9)
  0x0000000110366c13: je     0x00000001103668f6
  0x0000000110366c19: mov    %r9,%rdi
  0x0000000110366c1c: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::sequence@34 (line 169)

  0x0000000110366c21: movabs $0x10e087a5a,%r10
  0x0000000110366c2b: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::sequence@44 (line 172)

  0x0000000110366c2e: jmpq   0x00000001103668f6
  0x0000000110366c33: test   $0x7,%r8
  0x0000000110366c3a: jne    0x0000000110366b1b
  0x0000000110366c40: test   $0x300,%r8
  0x0000000110366c47: jne    0x0000000110366c56
  0x0000000110366c49: and    $0x37f,%rax
  0x0000000110366c50: mov    %rax,%r11
  0x0000000110366c53: or     %r15,%r11
  0x0000000110366c56: lock cmpxchg %r11,(%r9)
  0x0000000110366c5b: jne    0x0000000110366b73
  0x0000000110366c61: jmpq   0x00000001103668cc  ;*invokestatic runHooks
                                                ; - java.lang.Shutdown::sequence@26 (line 167)

  0x0000000110366c66: mov    %rax,%rsi
  0x0000000110366c69: jmp    0x0000000110366c6e
  0x0000000110366c6b: mov    %rax,%rsi          ;*invokestatic runAllFinalizers
                                                ; - java.lang.Shutdown::sequence@57 (line 173)

  0x0000000110366c6e: add    $0x20,%rsp
  0x0000000110366c72: pop    %rbp
  0x0000000110366c73: jmpq   0x0000000110019060  ;*return
                                                ; - java.lang.Shutdown::sequence@60 (line 174)
                                                ;   {runtime_call}
  0x0000000110366c78: hlt
  0x0000000110366c79: hlt
  0x0000000110366c7a: hlt
  0x0000000110366c7b: hlt
  0x0000000110366c7c: hlt
  0x0000000110366c7d: hlt
  0x0000000110366c7e: hlt
  0x0000000110366c7f: hlt
[Stub Code]
  0x0000000110366c80: movabs $0x0,%rbx          ;   {no_reloc}
  0x0000000110366c8a: jmpq   0x0000000110366c8a  ;   {runtime_call}
  0x0000000110366c8f: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110366c99: jmpq   0x0000000110366c99  ;   {runtime_call}
[Exception Handler]
  0x0000000110366c9e: jmpq   0x000000010ff80da0  ;   {runtime_call}
[Deopt Handler Code]
  0x0000000110366ca3: callq  0x0000000110366ca8
  0x0000000110366ca8: subq   $0x5,(%rsp)
  0x0000000110366cad: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110366cb2: hlt
  0x0000000110366cb3: hlt
  0x0000000110366cb4: hlt
  0x0000000110366cb5: hlt
  0x0000000110366cb6: hlt
  0x0000000110366cb7: hlt
Decoding compiled method 0x00000001103671d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000001272109f8} 'getGregorianYearFromFixedDate' '(J)I' in 'sun/util/calendar/BaseCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar'
  # parm0:    rdx:rdx   = long
  #           [sp+0x30]  (sp of caller)
  0x0000000110367320: mov    0x8(%rsi),%r10d
  0x0000000110367324: shl    $0x3,%r10
  0x0000000110367328: cmp    %r10,%rax
  0x000000011036732b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110367331: data32 xchg %ax,%ax
  0x0000000110367334: nopl   0x0(%rax,%rax,1)
  0x000000011036733c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110367340: mov    %eax,-0x14000(%rsp)
  0x0000000110367347: push   %rbp
  0x0000000110367348: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@-1 (line 497)

  0x000000011036734c: mov    %rdx,%r10
  0x000000011036734f: dec    %r10               ;*lsub
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@8 (line 498)

  0x0000000110367352: mov    %rdx,%r8
  0x0000000110367355: test   %rdx,%rdx
  0x0000000110367358: jle    0x0000000110367449  ;*ifle
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@3 (line 497)

  0x000000011036735e: mov    %r10,%r11
  0x0000000110367361: sar    $0x3f,%r11
  0x0000000110367365: movabs $0x396b06bcc8f862ed,%rax
  0x000000011036736f: imul   %r10
  0x0000000110367372: sar    $0xf,%rdx
  0x0000000110367376: sub    %r11,%rdx          ;*ldiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@14 (line 499)

  0x0000000110367379: mov    %edx,%r10d
  0x000000011036737c: imul   $0x23ab1,%rdx,%r11
  0x0000000110367383: sub    %r11,%r8
  0x0000000110367386: imul   $0x190,%r10d,%eax
  0x000000011036738d: mov    %r8d,%ecx
  0x0000000110367390: mov    %ecx,%r11d
  0x0000000110367393: dec    %r11d              ;*l2i  ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@23 (line 500)

  0x0000000110367396: mov    %r11d,%r8d
  0x0000000110367399: sar    $0x1f,%r8d
  0x000000011036739d: movslq %r11d,%r10
  0x00000001103673a0: imul   $0xffffffffe5ac81fb,%r10,%r10
  0x00000001103673a7: sar    $0x20,%r10
  0x00000001103673ab: mov    %r10d,%r9d
  0x00000001103673ae: add    %ecx,%r9d
  0x00000001103673b1: dec    %r9d
  0x00000001103673b4: sar    $0xf,%r9d
  0x00000001103673b8: sub    %r8d,%r9d          ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@30 (line 501)

  0x00000001103673bb: imul   $0x64,%r9d,%r11d
  0x00000001103673bf: add    %r11d,%eax
  0x00000001103673c2: imul   $0x8eac,%r9d,%r10d
  0x00000001103673c9: sub    %r10d,%ecx
  0x00000001103673cc: mov    %ecx,%r11d
  0x00000001103673cf: dec    %r11d              ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@37 (line 502)

  0x00000001103673d2: mov    %r11d,%r8d
  0x00000001103673d5: sar    $0x1f,%r8d
  0x00000001103673d9: movslq %r11d,%r10
  0x00000001103673dc: imul   $0x166db073,%r10,%r10
  0x00000001103673e3: sar    $0x27,%r10
  0x00000001103673e7: mov    %r10d,%r10d
  0x00000001103673ea: sub    %r8d,%r10d         ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@45 (line 503)

  0x00000001103673ed: mov    %r10d,%r8d
  0x00000001103673f0: shl    $0x2,%r8d
  0x00000001103673f4: add    %r8d,%eax
  0x00000001103673f7: imul   $0x5b5,%r10d,%r10d
  0x00000001103673fe: sub    %r10d,%ecx
  0x0000000110367401: mov    %ecx,%r11d
  0x0000000110367404: dec    %r11d              ;*irem
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@53 (line 504)

  0x0000000110367407: mov    %r11d,%r8d
  0x000000011036740a: sar    $0x1f,%r8d
  0x000000011036740e: movslq %r11d,%r10
  0x0000000110367411: imul   $0xffffffffb38cf9b1,%r10,%r10
  0x0000000110367418: sar    $0x20,%r10
  0x000000011036741c: mov    %r10d,%r11d
  0x000000011036741f: add    %ecx,%r11d
  0x0000000110367422: dec    %r11d
  0x0000000110367425: sar    $0x8,%r11d
  0x0000000110367429: sub    %r8d,%r11d         ;*idiv
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@61 (line 505)

  0x000000011036742c: add    %r11d,%eax         ;*iadd
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@180 (line 518)

  0x000000011036742f: cmp    $0x4,%r9d
  0x0000000110367433: je     0x000000011036743d  ;*if_icmpeq
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@186 (line 519)

  0x0000000110367435: cmp    $0x4,%r11d
  0x0000000110367439: je     0x000000011036743d  ;*if_icmpeq
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@192 (line 519)

  0x000000011036743b: inc    %eax               ;*iload
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@198 (line 522)

  0x000000011036743d: add    $0x20,%rsp
  0x0000000110367441: pop    %rbp
  0x0000000110367442: test   %eax,-0x374e448(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110367448: retq
  0x0000000110367449: mov    $0x119,%esi
  0x000000011036744e: mov    %r10,(%rsp)
  0x0000000110367452: nop
  0x0000000110367453: callq  0x000000010ff576a0  ; OopMap{off=312}
                                                ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@85 (line 509)
                                                ;   {runtime_call}
  0x0000000110367458: callq  0x000000010e0276f4  ;*invokestatic floorDivide
                                                ; - sun.util.calendar.BaseCalendar::getGregorianYearFromFixedDate@85 (line 509)
                                                ;   {runtime_call}
  0x000000011036745d: hlt
  0x000000011036745e: hlt
  0x000000011036745f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110367460: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110367465: callq  0x000000011036746a
  0x000000011036746a: subq   $0x5,(%rsp)
  0x000000011036746f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110367474: hlt
  0x0000000110367475: hlt
  0x0000000110367476: hlt
  0x0000000110367477: hlt
Decoding compiled method 0x0000000110368750:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1'
  #           [sp+0x40]  (sp of caller)
  0x00000001103688c0: mov    0x8(%rsi),%r10d
  0x00000001103688c4: shl    $0x3,%r10
  0x00000001103688c8: cmp    %rax,%r10
  0x00000001103688cb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103688d1: data32 data32 nopw 0x0(%rax,%rax,1)
  0x00000001103688dc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x00000001103688e0: mov    %eax,-0x14000(%rsp)
  0x00000001103688e7: push   %rbp
  0x00000001103688e8: sub    $0x30,%rsp
  0x00000001103688ec: movabs $0x1272858a0,%rax  ;   {metadata(method data for {method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1')}
  0x00000001103688f6: mov    0xdc(%rax),%edi
  0x00000001103688fc: add    $0x8,%edi
  0x00000001103688ff: mov    %edi,0xdc(%rax)
  0x0000000110368905: movabs $0x127284918,%rax  ;   {metadata({method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1')}
  0x000000011036890f: and    $0x0,%edi
  0x0000000110368912: cmp    $0x0,%edi
  0x0000000110368915: je     0x000000011036898e  ;*aload_0
                                                ; - java.util.ArrayList$SubList$1::hasNext@0 (line 1109)

  0x000000011036891b: mov    0xc(%rsi),%eax     ;*getfield cursor
                                                ; - java.util.ArrayList$SubList$1::hasNext@1 (line 1109)

  0x000000011036891e: mov    0x20(%rsi),%esi
  0x0000000110368921: shl    $0x3,%rsi          ;*getfield this$1
                                                ; - java.util.ArrayList$SubList$1::hasNext@5 (line 1109)

  0x0000000110368925: mov    0x18(%rsi),%esi    ;*getfield size
                                                ; - java.util.ArrayList$SubList$1::hasNext@8 (line 1109)
                                                ; implicit exception: dispatches to 0x00000001103689a5
  0x0000000110368928: cmp    %esi,%eax
  0x000000011036892a: movabs $0x1272858a0,%rax  ;   {metadata(method data for {method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1')}
  0x0000000110368934: movabs $0x108,%rsi
  0x000000011036893e: je     0x000000011036894e
  0x0000000110368944: movabs $0x118,%rsi
  0x000000011036894e: mov    (%rax,%rsi,1),%rdi
  0x0000000110368952: lea    0x1(%rdi),%rdi
  0x0000000110368956: mov    %rdi,(%rax,%rsi,1)
  0x000000011036895a: je     0x000000011036897a  ;*if_icmpeq
                                                ; - java.util.ArrayList$SubList$1::hasNext@11 (line 1109)

  0x0000000110368960: movabs $0x1272858a0,%rax  ;   {metadata(method data for {method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1')}
  0x000000011036896a: incl   0x128(%rax)
  0x0000000110368970: mov    $0x1,%eax
  0x0000000110368975: jmpq   0x000000011036897f  ;*goto
                                                ; - java.util.ArrayList$SubList$1::hasNext@15 (line 1109)

  0x000000011036897a: mov    $0x0,%eax          ;*ireturn
                                                ; - java.util.ArrayList$SubList$1::hasNext@19 (line 1109)

  0x000000011036897f: and    $0x1,%eax
  0x0000000110368982: add    $0x30,%rsp
  0x0000000110368986: pop    %rbp
  0x0000000110368987: test   %eax,-0x374f88d(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011036898d: retq
  0x000000011036898e: mov    %rax,0x8(%rsp)
  0x0000000110368993: movq   $0xffffffffffffffff,(%rsp)
  0x000000011036899b: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=224}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::hasNext@-1 (line 1109)
                                                ;   {runtime_call}
  0x00000001103689a0: jmpq   0x000000011036891b
  0x00000001103689a5: callq  0x000000011000e080  ; OopMap{off=234}
                                                ;*getfield size
                                                ; - java.util.ArrayList$SubList$1::hasNext@8 (line 1109)
                                                ;   {runtime_call}
  0x00000001103689aa: nop
  0x00000001103689ab: nop
  0x00000001103689ac: mov    0x2a8(%r15),%rax
  0x00000001103689b3: movabs $0x0,%r10
  0x00000001103689bd: mov    %r10,0x2a8(%r15)
  0x00000001103689c4: movabs $0x0,%r10
  0x00000001103689ce: mov    %r10,0x2b0(%r15)
  0x00000001103689d5: add    $0x30,%rsp
  0x00000001103689d9: pop    %rbp
  0x00000001103689da: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x00000001103689df: hlt
[Exception Handler]
[Stub Code]
  0x00000001103689e0: callq  0x00000001100100e0  ;   {no_reloc}
  0x00000001103689e5: mov    %rsp,-0x28(%rsp)
  0x00000001103689ea: sub    $0x80,%rsp
  0x00000001103689f1: mov    %rax,0x78(%rsp)
  0x00000001103689f6: mov    %rcx,0x70(%rsp)
  0x00000001103689fb: mov    %rdx,0x68(%rsp)
  0x0000000110368a00: mov    %rbx,0x60(%rsp)
  0x0000000110368a05: mov    %rbp,0x50(%rsp)
  0x0000000110368a0a: mov    %rsi,0x48(%rsp)
  0x0000000110368a0f: mov    %rdi,0x40(%rsp)
  0x0000000110368a14: mov    %r8,0x38(%rsp)
  0x0000000110368a19: mov    %r9,0x30(%rsp)
  0x0000000110368a1e: mov    %r10,0x28(%rsp)
  0x0000000110368a23: mov    %r11,0x20(%rsp)
  0x0000000110368a28: mov    %r12,0x18(%rsp)
  0x0000000110368a2d: mov    %r13,0x10(%rsp)
  0x0000000110368a32: mov    %r14,0x8(%rsp)
  0x0000000110368a37: mov    %r15,(%rsp)
  0x0000000110368a3b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110368a45: movabs $0x1103689e5,%rsi  ;   {internal_word}
  0x0000000110368a4f: mov    %rsp,%rdx
  0x0000000110368a52: and    $0xfffffffffffffff0,%rsp
  0x0000000110368a56: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110368a5b: hlt
[Deopt Handler Code]
  0x0000000110368a5c: movabs $0x110368a5c,%r10  ;   {section_word}
  0x0000000110368a66: push   %r10
  0x0000000110368a68: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110368a6d: hlt
  0x0000000110368a6e: hlt
  0x0000000110368a6f: hlt
Decoding compiled method 0x0000000110367a50:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown'
  #           [sp+0x50]  (sp of caller)
  0x0000000110367c00: mov    %eax,-0x14000(%rsp)
  0x0000000110367c07: push   %rbp
  0x0000000110367c08: sub    $0x40,%rsp
  0x0000000110367c0c: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367c16: mov    0xdc(%rax),%esi
  0x0000000110367c1c: add    $0x8,%esi
  0x0000000110367c1f: mov    %esi,0xdc(%rax)
  0x0000000110367c25: movabs $0x1272816e8,%rax  ;   {metadata({method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367c2f: and    $0x0,%esi
  0x0000000110367c32: cmp    $0x0,%esi
  0x0000000110367c35: je     0x00000001103681a3  ;*iconst_0
                                                ; - java.lang.Shutdown::runHooks@0 (line 114)

  0x0000000110367c3b: mov    $0x0,%edi          ;*iload_0
                                                ; - java.lang.Shutdown::runHooks@2 (line 114)

  0x0000000110367c40: cmp    $0xa,%edi
  0x0000000110367c43: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367c4d: movabs $0x108,%rsi
  0x0000000110367c57: jge    0x0000000110367c67
  0x0000000110367c5d: movabs $0x118,%rsi
  0x0000000110367c67: mov    (%rax,%rsi,1),%rbx
  0x0000000110367c6b: lea    0x1(%rbx),%rbx
  0x0000000110367c6f: mov    %rbx,(%rax,%rsi,1)
  0x0000000110367c73: jge    0x00000001103680b0  ;*if_icmpge
                                                ; - java.lang.Shutdown::runHooks@5 (line 114)

  0x0000000110367c79: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110367c83: mov    0x6c(%rax),%esi
  0x0000000110367c86: shl    $0x3,%rsi          ;*getstatic lock
                                                ; - java.lang.Shutdown::runHooks@8 (line 117)

  0x0000000110367c8a: lea    0x28(%rsp),%rbx
  0x0000000110367c8f: mov    %rsi,0x8(%rbx)
  0x0000000110367c93: mov    (%rsi),%rax        ; implicit exception: dispatches to 0x00000001103681ba
  0x0000000110367c96: mov    %rax,%rdx
  0x0000000110367c99: and    $0x7,%rdx
  0x0000000110367c9d: cmp    $0x5,%rdx
  0x0000000110367ca1: jne    0x0000000110367d28
  0x0000000110367ca7: mov    0x8(%rsi),%edx
  0x0000000110367caa: shl    $0x3,%rdx
  0x0000000110367cae: mov    0xa8(%rdx),%rdx
  0x0000000110367cb5: or     %r15,%rdx
  0x0000000110367cb8: xor    %rax,%rdx
  0x0000000110367cbb: and    $0xffffffffffffff87,%rdx
  0x0000000110367cbf: je     0x0000000110367d50
  0x0000000110367cc5: test   $0x7,%rdx
  0x0000000110367ccc: jne    0x0000000110367d15
  0x0000000110367cce: test   $0x300,%rdx
  0x0000000110367cd5: jne    0x0000000110367cf4
  0x0000000110367cd7: and    $0x37f,%rax
  0x0000000110367cde: mov    %rax,%rdx
  0x0000000110367ce1: or     %r15,%rdx
  0x0000000110367ce4: lock cmpxchg %rdx,(%rsi)
  0x0000000110367ce9: jne    0x00000001103681bf
  0x0000000110367cef: jmpq   0x0000000110367d50
  0x0000000110367cf4: mov    0x8(%rsi),%edx
  0x0000000110367cf7: shl    $0x3,%rdx
  0x0000000110367cfb: mov    0xa8(%rdx),%rdx
  0x0000000110367d02: or     %r15,%rdx
  0x0000000110367d05: lock cmpxchg %rdx,(%rsi)
  0x0000000110367d0a: jne    0x00000001103681bf
  0x0000000110367d10: jmpq   0x0000000110367d50
  0x0000000110367d15: mov    0x8(%rsi),%edx
  0x0000000110367d18: shl    $0x3,%rdx
  0x0000000110367d1c: mov    0xa8(%rdx),%rdx
  0x0000000110367d23: lock cmpxchg %rdx,(%rsi)
  0x0000000110367d28: mov    (%rsi),%rax
  0x0000000110367d2b: or     $0x1,%rax
  0x0000000110367d2f: mov    %rax,(%rbx)
  0x0000000110367d32: lock cmpxchg %rbx,(%rsi)
  0x0000000110367d37: je     0x0000000110367d50
  0x0000000110367d3d: sub    %rsp,%rax
  0x0000000110367d40: and    $0xfffffffffffff007,%rax
  0x0000000110367d47: mov    %rax,(%rbx)
  0x0000000110367d4a: jne    0x00000001103681bf  ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)

  0x0000000110367d50: movabs $0x76b2af308,%rax  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110367d5a: mov    %edi,0x88(%rax)    ;*putstatic currentRunningHook
                                                ; - java.lang.Shutdown::runHooks@15 (line 120)

  0x0000000110367d60: movabs $0x76b2af4c0,%rax  ;   {oop(a 'java/lang/Runnable'[10] )}
  0x0000000110367d6a: movslq %edi,%rbx
  0x0000000110367d6d: cmp    0xc(%rax),%edi     ; implicit exception: dispatches to 0x00000001103681d2
  0x0000000110367d70: jae    0x00000001103681dc
  0x0000000110367d76: mov    0x10(%rax,%rbx,4),%esi
  0x0000000110367d7a: shl    $0x3,%rsi          ;*aaload
                                                ; - java.lang.Shutdown::runHooks@22 (line 121)

  0x0000000110367d7e: lea    0x28(%rsp),%rax
  0x0000000110367d83: mov    0x8(%rax),%rdx
  0x0000000110367d87: mov    (%rdx),%rbx
  0x0000000110367d8a: and    $0x7,%rbx
  0x0000000110367d8e: cmp    $0x5,%rbx
  0x0000000110367d92: je     0x0000000110367daf
  0x0000000110367d98: mov    (%rax),%rbx
  0x0000000110367d9b: test   %rbx,%rbx
  0x0000000110367d9e: je     0x0000000110367daf
  0x0000000110367da4: lock cmpxchg %rbx,(%rdx)
  0x0000000110367da9: jne    0x00000001103681e5  ;*monitorexit
                                                ; - java.lang.Shutdown::runHooks@25 (line 122)

  0x0000000110367daf: movabs $0x1272844c0,%rbx  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367db9: incl   0x128(%rbx)        ;*goto
                                                ; - java.lang.Shutdown::runHooks@26 (line 122)

  0x0000000110367dbf: cmp    $0x0,%rsi
  0x0000000110367dc3: movabs $0x1272844c0,%rbx  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367dcd: movabs $0x140,%rax
  0x0000000110367dd7: je     0x0000000110367de7
  0x0000000110367ddd: movabs $0x150,%rax
  0x0000000110367de7: mov    (%rbx,%rax,1),%rdx
  0x0000000110367deb: lea    0x1(%rdx),%rdx
  0x0000000110367def: mov    %rdx,(%rbx,%rax,1)
  0x0000000110367df3: mov    %edi,0x20(%rsp)
  0x0000000110367df7: je     0x0000000110367ea4  ;*ifnull
                                                ; - java.lang.Shutdown::runHooks@35 (line 123)

  0x0000000110367dfd: cmp    (%rsi),%rax        ;*invokeinterface run
                                                ; - java.lang.Shutdown::runHooks@39 (line 123)
                                                ; implicit exception: dispatches to 0x00000001103681f8
  0x0000000110367e00: mov    %rsi,%rbx
  0x0000000110367e03: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367e0d: mov    0x8(%rbx),%ebx
  0x0000000110367e10: shl    $0x3,%rbx
  0x0000000110367e14: cmp    0x168(%rax),%rbx
  0x0000000110367e1b: jne    0x0000000110367e2a
  0x0000000110367e1d: addq   $0x1,0x170(%rax)
  0x0000000110367e25: jmpq   0x0000000110367e90
  0x0000000110367e2a: cmp    0x178(%rax),%rbx
  0x0000000110367e31: jne    0x0000000110367e40
  0x0000000110367e33: addq   $0x1,0x180(%rax)
  0x0000000110367e3b: jmpq   0x0000000110367e90
  0x0000000110367e40: cmpq   $0x0,0x168(%rax)
  0x0000000110367e4b: jne    0x0000000110367e64
  0x0000000110367e4d: mov    %rbx,0x168(%rax)
  0x0000000110367e54: movq   $0x1,0x170(%rax)
  0x0000000110367e5f: jmpq   0x0000000110367e90
  0x0000000110367e64: cmpq   $0x0,0x178(%rax)
  0x0000000110367e6f: jne    0x0000000110367e88
  0x0000000110367e71: mov    %rbx,0x178(%rax)
  0x0000000110367e78: movq   $0x1,0x180(%rax)
  0x0000000110367e83: jmpq   0x0000000110367e90
  0x0000000110367e88: addq   $0x1,0x160(%rax)
  0x0000000110367e90: nop
  0x0000000110367e91: nop
  0x0000000110367e92: nop
  0x0000000110367e93: nop
  0x0000000110367e94: nop
  0x0000000110367e95: movabs $0xffffffffffffffff,%rax
  0x0000000110367e9f: callq  0x000000010ff582e0  ; OopMap{off=676}
                                                ;*invokeinterface run
                                                ; - java.lang.Shutdown::runHooks@39 (line 123)
                                                ;   {virtual_call}
  0x0000000110367ea4: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367eae: incl   0x190(%rax)
  0x0000000110367eb4: jmpq   0x000000011036805d  ;*goto
                                                ; - java.lang.Shutdown::runHooks@44 (line 129)

  0x0000000110367eb9: mov    0x2a8(%r15),%rax
  0x0000000110367ec0: xor    %r10,%r10
  0x0000000110367ec3: mov    %r10,0x2a8(%r15)
  0x0000000110367eca: xor    %r10,%r10
  0x0000000110367ecd: mov    %r10,0x2b0(%r15)
  0x0000000110367ed4: mov    %rax,%rdx
  0x0000000110367ed7: lea    0x28(%rsp),%rax
  0x0000000110367edc: mov    0x8(%rax),%rdi
  0x0000000110367ee0: mov    (%rdi),%rsi
  0x0000000110367ee3: and    $0x7,%rsi
  0x0000000110367ee7: cmp    $0x5,%rsi
  0x0000000110367eeb: je     0x0000000110367f08
  0x0000000110367ef1: mov    (%rax),%rsi
  0x0000000110367ef4: test   %rsi,%rsi
  0x0000000110367ef7: je     0x0000000110367f08
  0x0000000110367efd: lock cmpxchg %rsi,(%rdi)
  0x0000000110367f02: jne    0x00000001103681fd  ;*monitorexit
                                                ; - java.lang.Shutdown::runHooks@31 (line 122)

  0x0000000110367f08: mov    %rdx,%rax          ; OopMap{rax=Oop off=779}
                                                ;*athrow
                                                ; - java.lang.Shutdown::runHooks@33 (line 122)

  0x0000000110367f0b: movabs $0x110367f0b,%rdx  ;   {section_word}
  0x0000000110367f15: callq  0x000000011000fca0  ;   {runtime_call}
  0x0000000110367f1a: nop                       ;*athrow
                                                ; - java.lang.Shutdown::runHooks@33 (line 122)

  0x0000000110367f1b: mov    0x2a8(%r15),%rax
  0x0000000110367f22: xor    %r10,%r10
  0x0000000110367f25: mov    %r10,0x2a8(%r15)
  0x0000000110367f2c: xor    %r10,%r10
  0x0000000110367f2f: mov    %r10,0x2b0(%r15)
  0x0000000110367f36: cmp    $0x0,%rax
  0x0000000110367f3a: jne    0x0000000110367f55
  0x0000000110367f3c: movabs $0x1272844c0,%rbx  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367f46: orl    $0x100,0x1a0(%rbx)
  0x0000000110367f50: jmpq   0x0000000110368015
  0x0000000110367f55: movabs $0x7c0002d88,%rdx  ;   {metadata('java/lang/ThreadDeath')}
  0x0000000110367f5f: mov    0x8(%rax),%edi
  0x0000000110367f62: shl    $0x3,%rdi
  0x0000000110367f66: cmp    %rdi,%rdx
  0x0000000110367f69: jne    0x0000000110367ff9
  0x0000000110367f6f: movabs $0x1272844c0,%rbx  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110367f79: mov    0x8(%rax),%edx
  0x0000000110367f7c: shl    $0x3,%rdx
  0x0000000110367f80: cmp    0x1b0(%rbx),%rdx
  0x0000000110367f87: jne    0x0000000110367f96
  0x0000000110367f89: addq   $0x1,0x1b8(%rbx)
  0x0000000110367f91: jmpq   0x000000011036801a
  0x0000000110367f96: cmp    0x1c0(%rbx),%rdx
  0x0000000110367f9d: jne    0x0000000110367fac
  0x0000000110367f9f: addq   $0x1,0x1c8(%rbx)
  0x0000000110367fa7: jmpq   0x000000011036801a
  0x0000000110367fac: cmpq   $0x0,0x1b0(%rbx)
  0x0000000110367fb7: jne    0x0000000110367fd0
  0x0000000110367fb9: mov    %rdx,0x1b0(%rbx)
  0x0000000110367fc0: movq   $0x1,0x1b8(%rbx)
  0x0000000110367fcb: jmpq   0x000000011036801a
  0x0000000110367fd0: cmpq   $0x0,0x1c0(%rbx)
  0x0000000110367fdb: jne    0x0000000110367ff4
  0x0000000110367fdd: mov    %rdx,0x1c0(%rbx)
  0x0000000110367fe4: movq   $0x1,0x1c8(%rbx)
  0x0000000110367fef: jmpq   0x000000011036801a
  0x0000000110367ff4: jmpq   0x000000011036801a
  0x0000000110367ff9: movabs $0x1272844c0,%rbx  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110368003: subq   $0x1,0x1a8(%rbx)
  0x000000011036800b: jmpq   0x0000000110368015
  0x0000000110368010: jmpq   0x000000011036801a
  0x0000000110368015: xor    %rsi,%rsi
  0x0000000110368018: jmp    0x0000000110368024
  0x000000011036801a: movabs $0x1,%rsi          ;*instanceof
                                                ; - java.lang.Shutdown::runHooks@49 (line 125)

  0x0000000110368024: cmp    $0x0,%esi
  0x0000000110368027: movabs $0x1272844c0,%rsi  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110368031: movabs $0x1d8,%rdi
  0x000000011036803b: je     0x000000011036804b
  0x0000000110368041: movabs $0x1e8,%rdi
  0x000000011036804b: mov    (%rsi,%rdi,1),%rbx
  0x000000011036804f: lea    0x1(%rbx),%rbx
  0x0000000110368053: mov    %rbx,(%rsi,%rdi,1)
  0x0000000110368057: jne    0x00000001103680bc  ;*ifeq
                                                ; - java.lang.Shutdown::runHooks@52 (line 125)

  0x000000011036805d: mov    0x20(%rsp),%edi
  0x0000000110368061: inc    %edi
  0x0000000110368063: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x000000011036806d: mov    0xe0(%rax),%esi
  0x0000000110368073: add    $0x8,%esi
  0x0000000110368076: mov    %esi,0xe0(%rax)
  0x000000011036807c: movabs $0x1272816e8,%rax  ;   {metadata({method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110368086: and    $0xfff8,%esi
  0x000000011036808c: cmp    $0x0,%esi
  0x000000011036808f: je     0x0000000110368210  ; OopMap{off=1173}
                                                ;*goto
                                                ; - java.lang.Shutdown::runHooks@65 (line 114)

  0x0000000110368095: test   %eax,-0x374ef9b(%rip)        # 0x000000010cc19100
                                                ;   {poll}
  0x000000011036809b: movabs $0x1272844c0,%rax  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x00000001103680a5: incl   0x228(%rax)
  0x00000001103680ab: jmpq   0x0000000110367c40  ;*goto
                                                ; - java.lang.Shutdown::runHooks@65 (line 114)

  0x00000001103680b0: add    $0x40,%rsp
  0x00000001103680b4: pop    %rbp
  0x00000001103680b5: test   %eax,-0x374efbb(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x00000001103680bb: retq                      ;*return
                                                ; - java.lang.Shutdown::runHooks@68 (line 131)

  0x00000001103680bc: cmp    $0x0,%rax
  0x00000001103680c0: jne    0x00000001103680db
  0x00000001103680c2: movabs $0x1272844c0,%rdi  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x00000001103680cc: orl    $0x100,0x1f0(%rdi)
  0x00000001103680d6: jmpq   0x000000011036819b
  0x00000001103680db: movabs $0x7c0002d88,%rbx  ;   {metadata('java/lang/ThreadDeath')}
  0x00000001103680e5: mov    0x8(%rax),%esi
  0x00000001103680e8: shl    $0x3,%rsi
  0x00000001103680ec: cmp    %rsi,%rbx
  0x00000001103680ef: jne    0x000000011036817f
  0x00000001103680f5: movabs $0x1272844c0,%rdi  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x00000001103680ff: mov    0x8(%rax),%ebx
  0x0000000110368102: shl    $0x3,%rbx
  0x0000000110368106: cmp    0x200(%rdi),%rbx
  0x000000011036810d: jne    0x000000011036811c
  0x000000011036810f: addq   $0x1,0x208(%rdi)
  0x0000000110368117: jmpq   0x000000011036819b
  0x000000011036811c: cmp    0x210(%rdi),%rbx
  0x0000000110368123: jne    0x0000000110368132
  0x0000000110368125: addq   $0x1,0x218(%rdi)
  0x000000011036812d: jmpq   0x000000011036819b
  0x0000000110368132: cmpq   $0x0,0x200(%rdi)
  0x000000011036813d: jne    0x0000000110368156
  0x000000011036813f: mov    %rbx,0x200(%rdi)
  0x0000000110368146: movq   $0x1,0x208(%rdi)
  0x0000000110368151: jmpq   0x000000011036819b
  0x0000000110368156: cmpq   $0x0,0x210(%rdi)
  0x0000000110368161: jne    0x000000011036817a
  0x0000000110368163: mov    %rbx,0x210(%rdi)
  0x000000011036816a: movq   $0x1,0x218(%rdi)
  0x0000000110368175: jmpq   0x000000011036819b
  0x000000011036817a: jmpq   0x000000011036819b
  0x000000011036817f: movabs $0x1272844c0,%rdi  ;   {metadata(method data for {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown')}
  0x0000000110368189: subq   $0x1,0x1f8(%rdi)
  0x0000000110368191: jmpq   0x0000000110368227
  0x0000000110368196: jmpq   0x000000011036819b  ;*checkcast
                                                ; - java.lang.Shutdown::runHooks@56 (line 126)

  0x000000011036819b: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x0000000110368230
  0x000000011036819e: jmpq   0x000000011036827b
  0x00000001103681a3: mov    %rax,0x8(%rsp)
  0x00000001103681a8: movq   $0xffffffffffffffff,(%rsp)
  0x00000001103681b0: callq  0x00000001100129e0  ; OopMap{off=1461}
                                                ;*synchronization entry
                                                ; - java.lang.Shutdown::runHooks@-1 (line 114)
                                                ;   {runtime_call}
  0x00000001103681b5: jmpq   0x0000000110367c3b
  0x00000001103681ba: callq  0x000000011000e080  ; OopMap{rsi=Oop off=1471}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)
                                                ;   {runtime_call}
  0x00000001103681bf: mov    %rsi,0x8(%rsp)
  0x00000001103681c4: mov    %rbx,(%rsp)
  0x00000001103681c8: callq  0x0000000110010c20  ; OopMap{rsi=Oop [48]=Oop off=1485}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)
                                                ;   {runtime_call}
  0x00000001103681cd: jmpq   0x0000000110367d50
  0x00000001103681d2: callq  0x000000011000e080  ; OopMap{rsi=Oop rax=Oop [48]=Oop off=1495}
                                                ;*aaload
                                                ; - java.lang.Shutdown::runHooks@22 (line 121)
                                                ;   {runtime_call}
  0x00000001103681d7: callq  0x000000011000e080  ; OopMap{rsi=Oop rax=Oop [48]=Oop off=1500}
                                                ;*aaload
                                                ; - java.lang.Shutdown::runHooks@22 (line 121)
                                                ;   {runtime_call}
  0x00000001103681dc: mov    %rdi,(%rsp)
  0x00000001103681e0: callq  0x000000010ff80440  ; OopMap{rsi=Oop rax=Oop [48]=Oop off=1509}
                                                ;*aaload
                                                ; - java.lang.Shutdown::runHooks@22 (line 121)
                                                ;   {runtime_call}
  0x00000001103681e5: lea    0x28(%rsp),%rax
  0x00000001103681ea: mov    %rax,(%rsp)
  0x00000001103681ee: callq  0x0000000110011060  ;   {runtime_call}
  0x00000001103681f3: jmpq   0x0000000110367daf
  0x00000001103681f8: callq  0x000000011000e080  ; OopMap{rsi=Oop off=1533}
                                                ;*invokeinterface run
                                                ; - java.lang.Shutdown::runHooks@39 (line 123)
                                                ;   {runtime_call}
  0x00000001103681fd: lea    0x28(%rsp),%rax
  0x0000000110368202: mov    %rax,(%rsp)
  0x0000000110368206: callq  0x0000000110011060  ;   {runtime_call}
  0x000000011036820b: jmpq   0x0000000110367f08
  0x0000000110368210: mov    %rax,0x8(%rsp)
  0x0000000110368215: movq   $0x41,(%rsp)
  0x000000011036821d: callq  0x00000001100129e0  ; OopMap{off=1570}
                                                ;*goto
                                                ; - java.lang.Shutdown::runHooks@65 (line 114)
                                                ;   {runtime_call}
  0x0000000110368222: jmpq   0x0000000110368095
  0x0000000110368227: mov    %rax,(%rsp)
  0x000000011036822b: callq  0x0000000110010440  ; OopMap{off=1584}
                                                ;*checkcast
                                                ; - java.lang.Shutdown::runHooks@56 (line 126)
                                                ;   {runtime_call}
  0x0000000110368230: callq  0x000000011000e080  ; OopMap{rax=Oop off=1589}
                                                ;*athrow
                                                ; - java.lang.Shutdown::runHooks@61 (line 127)
                                                ;   {runtime_call}
  0x0000000110368235: mov    %edi,0x20(%rsp)
  0x0000000110368239: jmpq   0x0000000110367f1b
  0x000000011036823e: mov    %edi,0x20(%rsp)
  0x0000000110368242: jmpq   0x0000000110367eb9
  0x0000000110368247: mov    %edi,0x20(%rsp)
  0x000000011036824b: jmpq   0x0000000110367eb9
  0x0000000110368250: nop
  0x0000000110368251: nop
  0x0000000110368252: mov    0x2a8(%r15),%rax
  0x0000000110368259: movabs $0x0,%r10
  0x0000000110368263: mov    %r10,0x2a8(%r15)
  0x000000011036826a: movabs $0x0,%r10
  0x0000000110368274: mov    %r10,0x2b0(%r15)
  0x000000011036827b: add    $0x40,%rsp
  0x000000011036827f: pop    %rbp
  0x0000000110368280: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110368285: hlt
  0x0000000110368286: hlt
  0x0000000110368287: hlt
  0x0000000110368288: hlt
  0x0000000110368289: hlt
  0x000000011036828a: hlt
  0x000000011036828b: hlt
  0x000000011036828c: hlt
  0x000000011036828d: hlt
  0x000000011036828e: hlt
  0x000000011036828f: hlt
  0x0000000110368290: hlt
  0x0000000110368291: hlt
  0x0000000110368292: hlt
  0x0000000110368293: hlt
  0x0000000110368294: hlt
  0x0000000110368295: hlt
  0x0000000110368296: hlt
  0x0000000110368297: hlt
  0x0000000110368298: hlt
  0x0000000110368299: hlt
  0x000000011036829a: hlt
  0x000000011036829b: hlt
  0x000000011036829c: hlt
  0x000000011036829d: hlt
  0x000000011036829e: hlt
  0x000000011036829f: hlt
[Stub Code]
  0x00000001103682a0: nop                       ;   {no_reloc}
  0x00000001103682a1: nop
  0x00000001103682a2: nop
  0x00000001103682a3: nop
  0x00000001103682a4: nop
  0x00000001103682a5: movabs $0x0,%rbx          ;   {static_stub}
  0x00000001103682af: jmpq   0x00000001103682af  ;   {runtime_call}
[Exception Handler]
  0x00000001103682b4: callq  0x00000001100100e0  ;   {runtime_call}
  0x00000001103682b9: mov    %rsp,-0x28(%rsp)
  0x00000001103682be: sub    $0x80,%rsp
  0x00000001103682c5: mov    %rax,0x78(%rsp)
  0x00000001103682ca: mov    %rcx,0x70(%rsp)
  0x00000001103682cf: mov    %rdx,0x68(%rsp)
  0x00000001103682d4: mov    %rbx,0x60(%rsp)
  0x00000001103682d9: mov    %rbp,0x50(%rsp)
  0x00000001103682de: mov    %rsi,0x48(%rsp)
  0x00000001103682e3: mov    %rdi,0x40(%rsp)
  0x00000001103682e8: mov    %r8,0x38(%rsp)
  0x00000001103682ed: mov    %r9,0x30(%rsp)
  0x00000001103682f2: mov    %r10,0x28(%rsp)
  0x00000001103682f7: mov    %r11,0x20(%rsp)
  0x00000001103682fc: mov    %r12,0x18(%rsp)
  0x0000000110368301: mov    %r13,0x10(%rsp)
  0x0000000110368306: mov    %r14,0x8(%rsp)
  0x000000011036830b: mov    %r15,(%rsp)
  0x000000011036830f: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110368319: movabs $0x1103682b9,%rsi  ;   {internal_word}
  0x0000000110368323: mov    %rsp,%rdx
  0x0000000110368326: and    $0xfffffffffffffff0,%rsp
  0x000000011036832a: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011036832f: hlt
[Deopt Handler Code]
  0x0000000110368330: movabs $0x110368330,%r10  ;   {section_word}
  0x000000011036833a: push   %r10
  0x000000011036833c: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110368341: hlt
  0x0000000110368342: hlt
  0x0000000110368343: hlt
  0x0000000110368344: hlt
  0x0000000110368345: hlt
  0x0000000110368346: hlt
  0x0000000110368347: hlt
Decoding compiled method 0x0000000110367690:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127284918} 'hasNext' '()Z' in 'java/util/ArrayList$SubList$1'
  #           [sp+0x20]  (sp of caller)
  0x00000001103677e0: mov    0x8(%rsi),%r10d
  0x00000001103677e4: shl    $0x3,%r10
  0x00000001103677e8: cmp    %r10,%rax
  0x00000001103677eb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x00000001103677f1: data32 xchg %ax,%ax
  0x00000001103677f4: nopl   0x0(%rax,%rax,1)
  0x00000001103677fc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110367800: mov    %eax,-0x14000(%rsp)
  0x0000000110367807: push   %rbp
  0x0000000110367808: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::hasNext@-1 (line 1109)

  0x000000011036780c: mov    0x20(%rsi),%r11d   ;*getfield this$1
                                                ; - java.util.ArrayList$SubList$1::hasNext@5 (line 1109)

  0x0000000110367810: mov    0x18(%r12,%r11,8),%r10d  ; implicit exception: dispatches to 0x0000000110367833
  0x0000000110367815: mov    0xc(%rsi),%r8d
  0x0000000110367819: cmp    %r10d,%r8d
  0x000000011036781c: je     0x000000011036782f  ;*if_icmpeq
                                                ; - java.util.ArrayList$SubList$1::hasNext@11 (line 1109)

  0x000000011036781e: mov    $0x1,%eax          ;*ireturn
                                                ; - java.util.ArrayList$SubList$1::hasNext@19 (line 1109)

  0x0000000110367823: add    $0x10,%rsp
  0x0000000110367827: pop    %rbp
  0x0000000110367828: test   %eax,-0x374e82e(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x000000011036782e: retq
  0x000000011036782f: xor    %eax,%eax
  0x0000000110367831: jmp    0x0000000110367823
  0x0000000110367833: mov    $0xfffffff6,%esi
  0x0000000110367838: data32 xchg %ax,%ax
  0x000000011036783b: callq  0x000000010ff576a0  ; OopMap{off=96}
                                                ;*getfield size
                                                ; - java.util.ArrayList$SubList$1::hasNext@8 (line 1109)
                                                ;   {runtime_call}
  0x0000000110367840: callq  0x000000010e0276f4  ;*getfield size
                                                ; - java.util.ArrayList$SubList$1::hasNext@8 (line 1109)
                                                ;   {runtime_call}
  0x0000000110367845: hlt
  0x0000000110367846: hlt
  0x0000000110367847: hlt
  0x0000000110367848: hlt
  0x0000000110367849: hlt
  0x000000011036784a: hlt
  0x000000011036784b: hlt
  0x000000011036784c: hlt
  0x000000011036784d: hlt
  0x000000011036784e: hlt
  0x000000011036784f: hlt
  0x0000000110367850: hlt
  0x0000000110367851: hlt
  0x0000000110367852: hlt
  0x0000000110367853: hlt
  0x0000000110367854: hlt
  0x0000000110367855: hlt
  0x0000000110367856: hlt
  0x0000000110367857: hlt
  0x0000000110367858: hlt
  0x0000000110367859: hlt
  0x000000011036785a: hlt
  0x000000011036785b: hlt
  0x000000011036785c: hlt
  0x000000011036785d: hlt
  0x000000011036785e: hlt
  0x000000011036785f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110367860: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110367865: callq  0x000000011036786a
  0x000000011036786a: subq   $0x5,(%rsp)
  0x000000011036786f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110367874: hlt
  0x0000000110367875: hlt
  0x0000000110367876: hlt
  0x0000000110367877: hlt
Decoding compiled method 0x0000000110362910:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127210b30} 'isLeapYear' '(I)Z' in 'sun/util/calendar/BaseCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar'
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x0000000110362a80: mov    0x8(%rsi),%r10d
  0x0000000110362a84: shl    $0x3,%r10
  0x0000000110362a88: cmp    %rax,%r10
  0x0000000110362a8b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110362a91: data32 data32 nopw 0x0(%rax,%rax,1)
  0x0000000110362a9c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110362aa0: mov    %eax,-0x14000(%rsp)
  0x0000000110362aa7: push   %rbp
  0x0000000110362aa8: sub    $0x30,%rsp
  0x0000000110362aac: movabs $0x127285a38,%rdi  ;   {metadata(method data for {method} {0x0000000127210b30} 'isLeapYear' '(I)Z' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362ab6: mov    0xdc(%rdi),%ebx
  0x0000000110362abc: add    $0x8,%ebx
  0x0000000110362abf: mov    %ebx,0xdc(%rdi)
  0x0000000110362ac5: movabs $0x127210b30,%rdi  ;   {metadata({method} {0x0000000127210b30} 'isLeapYear' '(I)Z' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362acf: and    $0x0,%ebx
  0x0000000110362ad2: cmp    $0x0,%ebx
  0x0000000110362ad5: je     0x0000000110362b0b  ;*iload_1
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@0 (line 535)

  0x0000000110362adb: movabs $0x127285a38,%rsi  ;   {metadata(method data for {method} {0x0000000127210b30} 'isLeapYear' '(I)Z' in 'sun/util/calendar/BaseCalendar')}
  0x0000000110362ae5: addq   $0x1,0x108(%rsi)
  0x0000000110362aed: mov    %rdx,%rsi          ;*invokestatic isGregorianLeapYear
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@1 (line 535)

  0x0000000110362af0: nop
  0x0000000110362af1: nop
  0x0000000110362af2: nop
  0x0000000110362af3: nop
  0x0000000110362af4: nop
  0x0000000110362af5: nop
  0x0000000110362af6: nop
  0x0000000110362af7: callq  0x000000010ff58520  ; OopMap{off=124}
                                                ;*invokestatic isGregorianLeapYear
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@1 (line 535)
                                                ;   {static_call}
  0x0000000110362afc: and    $0x1,%eax
  0x0000000110362aff: add    $0x30,%rsp
  0x0000000110362b03: pop    %rbp
  0x0000000110362b04: test   %eax,-0x3749a0a(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110362b0a: retq
  0x0000000110362b0b: mov    %rdi,0x8(%rsp)
  0x0000000110362b10: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110362b18: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=157}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@-1 (line 535)
                                                ;   {runtime_call}
  0x0000000110362b1d: jmp    0x0000000110362adb
  0x0000000110362b1f: nop
  0x0000000110362b20: nop
  0x0000000110362b21: mov    0x2a8(%r15),%rax
  0x0000000110362b28: movabs $0x0,%r10
  0x0000000110362b32: mov    %r10,0x2a8(%r15)
  0x0000000110362b39: movabs $0x0,%r10
  0x0000000110362b43: mov    %r10,0x2b0(%r15)
  0x0000000110362b4a: add    $0x30,%rsp
  0x0000000110362b4e: pop    %rbp
  0x0000000110362b4f: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110362b54: hlt
  0x0000000110362b55: hlt
  0x0000000110362b56: hlt
  0x0000000110362b57: hlt
  0x0000000110362b58: hlt
  0x0000000110362b59: hlt
  0x0000000110362b5a: hlt
  0x0000000110362b5b: hlt
  0x0000000110362b5c: hlt
  0x0000000110362b5d: hlt
  0x0000000110362b5e: hlt
  0x0000000110362b5f: hlt
[Stub Code]
  0x0000000110362b60: nop                       ;   {no_reloc}
  0x0000000110362b61: nop
  0x0000000110362b62: nop
  0x0000000110362b63: nop
  0x0000000110362b64: nop
  0x0000000110362b65: movabs $0x0,%rbx          ;   {static_stub}
  0x0000000110362b6f: jmpq   0x0000000110362b6f  ;   {runtime_call}
[Exception Handler]
  0x0000000110362b74: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110362b79: mov    %rsp,-0x28(%rsp)
  0x0000000110362b7e: sub    $0x80,%rsp
  0x0000000110362b85: mov    %rax,0x78(%rsp)
  0x0000000110362b8a: mov    %rcx,0x70(%rsp)
  0x0000000110362b8f: mov    %rdx,0x68(%rsp)
  0x0000000110362b94: mov    %rbx,0x60(%rsp)
  0x0000000110362b99: mov    %rbp,0x50(%rsp)
  0x0000000110362b9e: mov    %rsi,0x48(%rsp)
  0x0000000110362ba3: mov    %rdi,0x40(%rsp)
  0x0000000110362ba8: mov    %r8,0x38(%rsp)
  0x0000000110362bad: mov    %r9,0x30(%rsp)
  0x0000000110362bb2: mov    %r10,0x28(%rsp)
  0x0000000110362bb7: mov    %r11,0x20(%rsp)
  0x0000000110362bbc: mov    %r12,0x18(%rsp)
  0x0000000110362bc1: mov    %r13,0x10(%rsp)
  0x0000000110362bc6: mov    %r14,0x8(%rsp)
  0x0000000110362bcb: mov    %r15,(%rsp)
  0x0000000110362bcf: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x0000000110362bd9: movabs $0x110362b79,%rsi  ;   {internal_word}
  0x0000000110362be3: mov    %rsp,%rdx
  0x0000000110362be6: and    $0xfffffffffffffff0,%rsp
  0x0000000110362bea: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x0000000110362bef: hlt
[Deopt Handler Code]
  0x0000000110362bf0: movabs $0x110362bf0,%r10  ;   {section_word}
  0x0000000110362bfa: push   %r10
  0x0000000110362bfc: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110362c01: hlt
  0x0000000110362c02: hlt
  0x0000000110362c03: hlt
  0x0000000110362c04: hlt
  0x0000000110362c05: hlt
  0x0000000110362c06: hlt
  0x0000000110362c07: hlt
Decoding compiled method 0x0000000110360b90:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127210b30} 'isLeapYear' '(I)Z' in 'sun/util/calendar/BaseCalendar'
  # this:     rsi:rsi   = 'sun/util/calendar/BaseCalendar'
  # parm0:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  0x0000000110360ce0: mov    0x8(%rsi),%r10d
  0x0000000110360ce4: shl    $0x3,%r10
  0x0000000110360ce8: cmp    %r10,%rax
  0x0000000110360ceb: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110360cf1: data32 xchg %ax,%ax
  0x0000000110360cf4: nopl   0x0(%rax,%rax,1)
  0x0000000110360cfc: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110360d00: mov    %eax,-0x14000(%rsp)
  0x0000000110360d07: push   %rbp
  0x0000000110360d08: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@-1 (line 535)

  0x0000000110360d0c: mov    $0x119,%esi
  0x0000000110360d11: mov    %edx,%ebp
  0x0000000110360d13: callq  0x000000010ff576a0  ; OopMap{off=56}
                                                ;*invokestatic isGregorianLeapYear
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@1 (line 535)
                                                ;   {runtime_call}
  0x0000000110360d18: callq  0x000000010e0276f4  ;*invokestatic isGregorianLeapYear
                                                ; - sun.util.calendar.BaseCalendar::isLeapYear@1 (line 535)
                                                ;   {runtime_call}
  0x0000000110360d1d: hlt
  0x0000000110360d1e: hlt
  0x0000000110360d1f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110360d20: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110360d25: callq  0x0000000110360d2a
  0x0000000110360d2a: subq   $0x5,(%rsp)
  0x0000000110360d2f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110360d34: hlt
  0x0000000110360d35: hlt
  0x0000000110360d36: hlt
  0x0000000110360d37: hlt
Decoding compiled method 0x0000000110361e90:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1'
  #           [sp+0x80]  (sp of caller)
  0x0000000110362040: mov    0x8(%rsi),%r10d
  0x0000000110362044: shl    $0x3,%r10
  0x0000000110362048: cmp    %rax,%r10
  0x000000011036204b: jne    0x000000010ff57e60  ;   {runtime_call}
  0x0000000110362051: data32 data32 nopw 0x0(%rax,%rax,1)
  0x000000011036205c: data32 data32 xchg %ax,%ax
[Verified Entry Point]
  0x0000000110362060: mov    %eax,-0x14000(%rsp)
  0x0000000110362067: push   %rbp
  0x0000000110362068: sub    $0x70,%rsp
  0x000000011036206c: movabs $0x127285bb8,%rax  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x0000000110362076: mov    0xdc(%rax),%edx
  0x000000011036207c: add    $0x8,%edx
  0x000000011036207f: mov    %edx,0xdc(%rax)
  0x0000000110362085: movabs $0x127284a00,%rax  ;   {metadata({method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x000000011036208f: and    $0x0,%edx
  0x0000000110362092: cmp    $0x0,%edx
  0x0000000110362095: je     0x0000000110362326  ;*aload_0
                                                ; - java.util.ArrayList$SubList$1::next@0 (line 1114)

  0x000000011036209b: mov    %rsi,%rax
  0x000000011036209e: movabs $0x127285bb8,%rdx  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x00000001103620a8: mov    0x8(%rax),%eax
  0x00000001103620ab: shl    $0x3,%rax
  0x00000001103620af: cmp    0x110(%rdx),%rax
  0x00000001103620b6: jne    0x00000001103620c5
  0x00000001103620b8: addq   $0x1,0x118(%rdx)
  0x00000001103620c0: jmpq   0x000000011036212b
  0x00000001103620c5: cmp    0x120(%rdx),%rax
  0x00000001103620cc: jne    0x00000001103620db
  0x00000001103620ce: addq   $0x1,0x128(%rdx)
  0x00000001103620d6: jmpq   0x000000011036212b
  0x00000001103620db: cmpq   $0x0,0x110(%rdx)
  0x00000001103620e6: jne    0x00000001103620ff
  0x00000001103620e8: mov    %rax,0x110(%rdx)
  0x00000001103620ef: movq   $0x1,0x118(%rdx)
  0x00000001103620fa: jmpq   0x000000011036212b
  0x00000001103620ff: cmpq   $0x0,0x120(%rdx)
  0x000000011036210a: jne    0x0000000110362123
  0x000000011036210c: mov    %rax,0x120(%rdx)
  0x0000000110362113: movq   $0x1,0x128(%rdx)
  0x000000011036211e: jmpq   0x000000011036212b
  0x0000000110362123: addq   $0x1,0x108(%rdx)
  0x000000011036212b: movabs $0x127285d90,%rax  ;   {metadata(method data for {method} {0x0000000127285118} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList$1')}
  0x0000000110362135: mov    0xdc(%rax),%edx
  0x000000011036213b: add    $0x8,%edx
  0x000000011036213e: mov    %edx,0xdc(%rax)
  0x0000000110362144: movabs $0x127285118,%rax  ;   {metadata({method} {0x0000000127285118} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList$1')}
  0x000000011036214e: and    $0x7ffff8,%edx
  0x0000000110362154: cmp    $0x0,%edx
  0x0000000110362157: je     0x000000011036233d
  0x000000011036215d: mov    0x14(%rsi),%eax    ;*getfield expectedModCount
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@1 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x0000000110362160: mov    0x20(%rsi),%edx
  0x0000000110362163: shl    $0x3,%rdx          ;*getfield this$1
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@5 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x0000000110362167: mov    0x20(%rdx),%edi    ; implicit exception: dispatches to 0x0000000110362354
  0x000000011036216a: shl    $0x3,%rdi          ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@8 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x000000011036216e: mov    0xc(%rdi),%ebx     ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@11 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ; implicit exception: dispatches to 0x0000000110362359
  0x0000000110362171: cmp    %ebx,%eax
  0x0000000110362173: movabs $0x127285d90,%rax  ;   {metadata(method data for {method} {0x0000000127285118} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList$1')}
  0x000000011036217d: movabs $0x108,%rbx
  0x0000000110362187: je     0x0000000110362197
  0x000000011036218d: movabs $0x118,%rbx
  0x0000000110362197: mov    (%rax,%rbx,1),%rcx
  0x000000011036219b: lea    0x1(%rcx),%rcx
  0x000000011036219f: mov    %rcx,(%rax,%rbx,1)
  0x00000001103621a3: jne    0x00000001103622de  ;*if_icmpeq
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@14 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x00000001103621a9: mov    0xc(%rsi),%eax     ;*getfield cursor
                                                ; - java.util.ArrayList$SubList$1::next@5 (line 1115)

  0x00000001103621ac: mov    0x18(%rdx),%edx    ;*getfield size
                                                ; - java.util.ArrayList$SubList$1::next@14 (line 1116)

  0x00000001103621af: cmp    %edx,%eax
  0x00000001103621b1: movabs $0x127285bb8,%rdx  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x00000001103621bb: movabs $0x138,%rbx
  0x00000001103621c5: jl     0x00000001103621d5
  0x00000001103621cb: movabs $0x148,%rbx
  0x00000001103621d5: mov    (%rdx,%rbx,1),%rcx
  0x00000001103621d9: lea    0x1(%rcx),%rcx
  0x00000001103621dd: mov    %rcx,(%rdx,%rbx,1)
  0x00000001103621e1: jge    0x000000011036229e  ;*if_icmplt
                                                ; - java.util.ArrayList$SubList$1::next@17 (line 1116)

  0x00000001103621e7: mov    0x14(%rdi),%edx
  0x00000001103621ea: shl    $0x3,%rdx          ;*getfield elementData
                                                ; - java.util.ArrayList$SubList$1::next@35 (line 1118)

  0x00000001103621ee: mov    0x1c(%rsi),%edi    ;*getfield val$offset
                                                ; - java.util.ArrayList$SubList$1::next@40 (line 1119)

  0x00000001103621f1: add    %eax,%edi
  0x00000001103621f3: mov    0xc(%rdx),%ebx     ;*arraylength
                                                ; - java.util.ArrayList$SubList$1::next@46 (line 1119)
                                                ; implicit exception: dispatches to 0x000000011036235e
  0x00000001103621f6: cmp    %ebx,%edi
  0x00000001103621f8: movabs $0x127285bb8,%rbx  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x0000000110362202: movabs $0x168,%rcx
  0x000000011036220c: jl     0x000000011036221c
  0x0000000110362212: movabs $0x178,%rcx
  0x000000011036221c: mov    (%rbx,%rcx,1),%r8
  0x0000000110362220: lea    0x1(%r8),%r8
  0x0000000110362224: mov    %r8,(%rbx,%rcx,1)
  0x0000000110362228: jge    0x0000000110362259  ;*if_icmplt
                                                ; - java.util.ArrayList$SubList$1::next@47 (line 1119)

  0x000000011036222e: mov    %rax,%rbx
  0x0000000110362231: inc    %ebx
  0x0000000110362233: mov    %ebx,0xc(%rsi)     ;*putfield cursor
                                                ; - java.util.ArrayList$SubList$1::next@62 (line 1121)

  0x0000000110362236: mov    %eax,0x10(%rsi)    ;*putfield lastRet
                                                ; - java.util.ArrayList$SubList$1::next@73 (line 1122)

  0x0000000110362239: movslq %edi,%rax
  0x000000011036223c: cmp    0xc(%rdx),%edi
  0x000000011036223f: jae    0x0000000110362363
  0x0000000110362245: mov    0x10(%rdx,%rax,4),%eax
  0x0000000110362249: shl    $0x3,%rax          ;*aaload
                                                ; - java.util.ArrayList$SubList$1::next@77 (line 1122)

  0x000000011036224d: add    $0x70,%rsp
  0x0000000110362251: pop    %rbp
  0x0000000110362252: test   %eax,-0x3749158(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x0000000110362258: retq                      ;*areturn
                                                ; - java.util.ArrayList$SubList$1::next@78 (line 1122)

  0x0000000110362259: nopl   0x0(%rax)
  0x0000000110362260: jmpq   0x000000011036237b  ;   {no_reloc}
  0x0000000110362265: add    %al,(%rax)
  0x0000000110362267: add    %al,(%rax)
  0x0000000110362269: add    %ch,%cl
  0x000000011036226b: (bad)
  0x000000011036226c: add    %eax,(%rax)
  0x000000011036226e: add    %cl,-0x75(%rax)    ;*new  ; - java.util.ArrayList$SubList$1::next@50 (line 1120)

  0x0000000110362271: lock movabs $0x127285bb8,%rdi  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x000000011036227c: addq   $0x1,0x188(%rdi)
  0x0000000110362284: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::next@54 (line 1120)

  0x0000000110362287: mov    %rax,0x48(%rsp)
  0x000000011036228c: nop
  0x000000011036228d: nop
  0x000000011036228e: nop
  0x000000011036228f: callq  0x000000010ff580a0  ; OopMap{[72]=Oop off=596}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::next@54 (line 1120)
                                                ;   {optimized virtual_call}
  0x0000000110362294: mov    0x48(%rsp),%rax
  0x0000000110362299: jmpq   0x0000000110362409  ;*athrow
                                                ; - java.util.ArrayList$SubList$1::next@57 (line 1120)

  0x000000011036229e: xchg   %ax,%ax
  0x00000001103622a0: jmpq   0x00000001103623a1  ;   {no_reloc}
  0x00000001103622a5: add    %al,(%rax)
  0x00000001103622a7: add    %al,(%rax)
  0x00000001103622a9: add    %ch,%cl
  0x00000001103622ab: cld
  0x00000001103622ac: add    %al,(%rax)
  0x00000001103622ae: add    %cl,-0x75(%rax)    ;*new  ; - java.util.ArrayList$SubList$1::next@20 (line 1117)

  0x00000001103622b1: lock movabs $0x127285bb8,%rdi  ;   {metadata(method data for {method} {0x0000000127284a00} 'next' '()Ljava/lang/Object;' in 'java/util/ArrayList$SubList$1')}
  0x00000001103622bc: addq   $0x1,0x158(%rdi)
  0x00000001103622c4: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::next@24 (line 1117)

  0x00000001103622c7: mov    %rax,0x50(%rsp)
  0x00000001103622cc: nop
  0x00000001103622cd: nop
  0x00000001103622ce: nop
  0x00000001103622cf: callq  0x000000010ff580a0  ; OopMap{[80]=Oop off=660}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::next@24 (line 1117)
                                                ;   {optimized virtual_call}
  0x00000001103622d4: mov    0x50(%rsp),%rax
  0x00000001103622d9: jmpq   0x0000000110362409  ;*athrow
                                                ; - java.util.ArrayList$SubList$1::next@27 (line 1117)

  0x00000001103622de: mov    %rsi,0x60(%rsp)
  0x00000001103622e3: nopl   0x0(%rax,%rax,1)
  0x00000001103622e8: jmpq   0x00000001103623c7  ;   {no_reloc}
  0x00000001103622ed: add    %al,(%rax)
  0x00000001103622ef: add    %al,(%rax)
  0x00000001103622f1: add    %ch,%cl
  0x00000001103622f3: fiaddl (%rax)
  0x00000001103622f5: add    %al,(%rax)         ;*new  ; - java.util.ArrayList$SubList$1::checkForComodification@17 (line 1213)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x00000001103622f7: mov    %rax,%rdi
  0x00000001103622fa: movabs $0x127285d90,%rbx  ;   {metadata(method data for {method} {0x0000000127285118} 'checkForComodification' '()V' in 'java/util/ArrayList$SubList$1')}
  0x0000000110362304: addq   $0x1,0x128(%rbx)
  0x000000011036230c: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@21 (line 1213)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)

  0x000000011036230f: mov    %rax,0x58(%rsp)
  0x0000000110362314: nop
  0x0000000110362315: nop
  0x0000000110362316: nop
  0x0000000110362317: callq  0x000000010ff580a0  ; OopMap{[96]=Oop [88]=Oop off=732}
                                                ;*invokespecial <init>
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@21 (line 1213)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {optimized virtual_call}
  0x000000011036231c: mov    0x58(%rsp),%rax
  0x0000000110362321: jmpq   0x0000000110362409
  0x0000000110362326: mov    %rax,0x8(%rsp)
  0x000000011036232b: movq   $0xffffffffffffffff,(%rsp)
  0x0000000110362333: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=760}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::next@-1 (line 1114)
                                                ;   {runtime_call}
  0x0000000110362338: jmpq   0x000000011036209b
  0x000000011036233d: mov    %rax,0x8(%rsp)
  0x0000000110362342: movq   $0xffffffffffffffff,(%rsp)
  0x000000011036234a: callq  0x00000001100129e0  ; OopMap{rsi=Oop off=783}
                                                ;*synchronization entry
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@-1 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {runtime_call}
  0x000000011036234f: jmpq   0x000000011036215d
  0x0000000110362354: callq  0x000000011000e080  ; OopMap{rsi=Oop rdx=Oop off=793}
                                                ;*getfield this$0
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@8 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {runtime_call}
  0x0000000110362359: callq  0x000000011000e080  ; OopMap{rsi=Oop rdx=Oop rdi=Oop off=798}
                                                ;*getfield modCount
                                                ; - java.util.ArrayList$SubList$1::checkForComodification@11 (line 1212)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {runtime_call}
  0x000000011036235e: callq  0x000000011000e080  ; OopMap{rsi=Oop rdx=Oop off=803}
                                                ;*arraylength
                                                ; - java.util.ArrayList$SubList$1::next@46 (line 1119)
                                                ;   {runtime_call}
  0x0000000110362363: mov    %rdi,(%rsp)
  0x0000000110362367: callq  0x000000010ff80440  ; OopMap{rdx=Oop off=812}
                                                ;*aaload
                                                ; - java.util.ArrayList$SubList$1::next@77 (line 1122)
                                                ;   {runtime_call}
  0x000000011036236c: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x0000000110362376: mov    $0xa050f00,%eax
  0x000000011036237b: callq  0x00000001100118a0  ; OopMap{off=832}
                                                ;*new  ; - java.util.ArrayList$SubList$1::next@50 (line 1120)
                                                ;   {runtime_call}
  0x0000000110362380: jmpq   0x0000000110362260
  0x0000000110362385: mov    %rdx,%rdx
  0x0000000110362388: callq  0x000000011000e520  ; OopMap{off=845}
                                                ;*new  ; - java.util.ArrayList$SubList$1::next@50 (line 1120)
                                                ;   {runtime_call}
  0x000000011036238d: jmpq   0x000000011036226f
  0x0000000110362392: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000011036239c: mov    $0xa050f00,%eax
  0x00000001103623a1: callq  0x00000001100118a0  ; OopMap{off=870}
                                                ;*new  ; - java.util.ArrayList$SubList$1::next@20 (line 1117)
                                                ;   {runtime_call}
  0x00000001103623a6: jmpq   0x00000001103622a0
  0x00000001103623ab: mov    %rdx,%rdx
  0x00000001103623ae: callq  0x000000011000e520  ; OopMap{off=883}
                                                ;*new  ; - java.util.ArrayList$SubList$1::next@20 (line 1117)
                                                ;   {runtime_call}
  0x00000001103623b3: jmpq   0x00000001103622af
  0x00000001103623b8: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00000001103623c2: mov    $0xa050f00,%eax
  0x00000001103623c7: callq  0x00000001100118a0  ; OopMap{[96]=Oop off=908}
                                                ;*new  ; - java.util.ArrayList$SubList$1::checkForComodification@17 (line 1213)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {runtime_call}
  0x00000001103623cc: jmpq   0x00000001103622e8
  0x00000001103623d1: mov    %rdx,%rdx
  0x00000001103623d4: callq  0x000000011000e520  ; OopMap{[96]=Oop off=921}
                                                ;*new  ; - java.util.ArrayList$SubList$1::checkForComodification@17 (line 1213)
                                                ; - java.util.ArrayList$SubList$1::next@1 (line 1114)
                                                ;   {runtime_call}
  0x00000001103623d9: jmpq   0x00000001103622f7
  0x00000001103623de: nop
  0x00000001103623df: nop
  0x00000001103623e0: mov    0x2a8(%r15),%rax
  0x00000001103623e7: movabs $0x0,%r10
  0x00000001103623f1: mov    %r10,0x2a8(%r15)
  0x00000001103623f8: movabs $0x0,%r10
  0x0000000110362402: mov    %r10,0x2b0(%r15)
  0x0000000110362409: add    $0x70,%rsp
  0x000000011036240d: pop    %rbp
  0x000000011036240e: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x0000000110362413: hlt
  0x0000000110362414: hlt
  0x0000000110362415: hlt
  0x0000000110362416: hlt
  0x0000000110362417: hlt
  0x0000000110362418: hlt
  0x0000000110362419: hlt
  0x000000011036241a: hlt
  0x000000011036241b: hlt
  0x000000011036241c: hlt
  0x000000011036241d: hlt
  0x000000011036241e: hlt
  0x000000011036241f: hlt
[Stub Code]
  0x0000000110362420: nop                       ;   {no_reloc}
  0x0000000110362421: nop
  0x0000000110362422: nop
  0x0000000110362423: nop
  0x0000000110362424: nop
  0x0000000110362425: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036242f: jmpq   0x000000011036242f  ;   {runtime_call}
  0x0000000110362434: nop
  0x0000000110362435: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036243f: jmpq   0x000000011036243f  ;   {runtime_call}
  0x0000000110362444: nop
  0x0000000110362445: movabs $0x0,%rbx          ;   {static_stub}
  0x000000011036244f: jmpq   0x000000011036244f  ;   {runtime_call}
[Exception Handler]
  0x0000000110362454: callq  0x00000001100100e0  ;   {runtime_call}
  0x0000000110362459: mov    %rsp,-0x28(%rsp)
  0x000000011036245e: sub    $0x80,%rsp
  0x0000000110362465: mov    %rax,0x78(%rsp)
  0x000000011036246a: mov    %rcx,0x70(%rsp)
  0x000000011036246f: mov    %rdx,0x68(%rsp)
  0x0000000110362474: mov    %rbx,0x60(%rsp)
  0x0000000110362479: mov    %rbp,0x50(%rsp)
  0x000000011036247e: mov    %rsi,0x48(%rsp)
  0x0000000110362483: mov    %rdi,0x40(%rsp)
  0x0000000110362488: mov    %r8,0x38(%rsp)
  0x000000011036248d: mov    %r9,0x30(%rsp)
  0x0000000110362492: mov    %r10,0x28(%rsp)
  0x0000000110362497: mov    %r11,0x20(%rsp)
  0x000000011036249c: mov    %r12,0x18(%rsp)
  0x00000001103624a1: mov    %r13,0x10(%rsp)
  0x00000001103624a6: mov    %r14,0x8(%rsp)
  0x00000001103624ab: mov    %r15,(%rsp)
  0x00000001103624af: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x00000001103624b9: movabs $0x110362459,%rsi  ;   {internal_word}
  0x00000001103624c3: mov    %rsp,%rdx
  0x00000001103624c6: and    $0xfffffffffffffff0,%rsp
  0x00000001103624ca: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x00000001103624cf: hlt
[Deopt Handler Code]
  0x00000001103624d0: movabs $0x1103624d0,%r10  ;   {section_word}
  0x00000001103624da: push   %r10
  0x00000001103624dc: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x00000001103624e1: hlt
  0x00000001103624e2: hlt
  0x00000001103624e3: hlt
  0x00000001103624e4: hlt
  0x00000001103624e5: hlt
  0x00000001103624e6: hlt
  0x00000001103624e7: hlt
Decoding compiled method 0x0000000110361890:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000001272816e8} 'runHooks' '()V' in 'java/lang/Shutdown'
  #           [sp+0x30]  (sp of caller)
  0x00000001103619e0: mov    %eax,-0x14000(%rsp)
  0x00000001103619e7: push   %rbp
  0x00000001103619e8: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.Shutdown::runHooks@-1 (line 114)

  0x00000001103619ec: xor    %ebp,%ebp
  0x00000001103619ee: jmp    0x0000000110361a0f  ;*monitorexit
                                                ; - java.lang.Shutdown::runHooks@25 (line 122)

  0x00000001103619f0: lea    (%r12,%rbx,8),%rsi  ;*aaload
                                                ; - java.lang.Shutdown::runHooks@22 (line 121)

  0x00000001103619f4: nop
  0x00000001103619f5: movabs $0xffffffffffffffff,%rax
  0x00000001103619ff: callq  0x000000010ff582e0  ; OopMap{off=36}
                                                ;*invokeinterface run
                                                ; - java.lang.Shutdown::runHooks@39 (line 123)
                                                ;   {virtual_call}
  0x0000000110361a04: inc    %ebp               ;*iinc
                                                ; - java.lang.Shutdown::runHooks@62 (line 114)

  0x0000000110361a06: cmp    $0xa,%ebp
  0x0000000110361a09: jge    0x0000000110361ab1
  0x0000000110361a0f: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110361a19: mov    0x6c(%r10),%r10d   ;*getstatic lock
                                                ; - java.lang.Shutdown::runHooks@8 (line 117)

  0x0000000110361a1d: test   %r10d,%r10d
  0x0000000110361a20: je     0x0000000110361abd  ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)

  0x0000000110361a26: lea    (%r12,%r10,8),%r9  ;*getstatic lock
                                                ; - java.lang.Shutdown::runHooks@8 (line 117)

  0x0000000110361a2a: mov    (%r9),%rax
  0x0000000110361a2d: mov    %rax,%r11
  0x0000000110361a30: and    $0x7,%r11
  0x0000000110361a34: cmp    $0x5,%r11
  0x0000000110361a38: jne    0x0000000110361ad2
  0x0000000110361a3e: mov    0x8(%r12,%r10,8),%r11d
  0x0000000110361a43: movabs $0x0,%r10
  0x0000000110361a4d: lea    (%r10,%r11,8),%r10
  0x0000000110361a51: mov    0xa8(%r10),%r10
  0x0000000110361a58: mov    %r10,%r11
  0x0000000110361a5b: or     %r15,%r11
  0x0000000110361a5e: mov    %r11,%r8
  0x0000000110361a61: xor    %rax,%r8
  0x0000000110361a64: test   $0xffffffffffffff87,%r8
  0x0000000110361a6b: jne    0x0000000110361be7
  0x0000000110361a71: movabs $0x76b2af308,%r10  ;   {oop(a 'java/lang/Class' = 'java/lang/Shutdown')}
  0x0000000110361a7b: mov    %ebp,0x88(%r10)    ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)

  0x0000000110361a82: movabs $0x76b2af4c0,%r10  ;   {oop(a 'java/lang/Runnable'[10] )}
  0x0000000110361a8c: mov    0x10(%r10,%rbp,4),%ebx
  0x0000000110361a91: mov    $0x7,%r10d
  0x0000000110361a97: and    (%r9),%r10
  0x0000000110361a9a: cmp    $0x5,%r10
  0x0000000110361a9e: jne    0x0000000110361b41  ;*monitorexit
                                                ; - java.lang.Shutdown::runHooks@25 (line 122)

  0x0000000110361aa4: test   %ebx,%ebx
  0x0000000110361aa6: jne    0x00000001103619f0  ;*ifnull
                                                ; - java.lang.Shutdown::runHooks@35 (line 123)

  0x0000000110361aac: jmpq   0x0000000110361a04
  0x0000000110361ab1: add    $0x20,%rsp
  0x0000000110361ab5: pop    %rbp
  0x0000000110361ab6: test   %eax,-0x3748abc(%rip)        # 0x000000010cc19000
                                                ;   {poll_return}
  0x0000000110361abc: retq
  0x0000000110361abd: mov    $0xfffffff6,%esi
  0x0000000110361ac2: nop
  0x0000000110361ac3: callq  0x000000010ff576a0  ; OopMap{off=232}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)
                                                ;   {runtime_call}
  0x0000000110361ac8: callq  0x000000010e0276f4  ;   {runtime_call}
  0x0000000110361acd: lock cmpxchg %r10,(%r9)
  0x0000000110361ad2: lea    0x10(%rsp),%rbx
  0x0000000110361ad7: mov    (%r9),%rax
  0x0000000110361ada: test   $0x2,%rax
  0x0000000110361ae0: jne    0x0000000110361b06
  0x0000000110361ae2: or     $0x1,%rax
  0x0000000110361ae6: mov    %rax,(%rbx)
  0x0000000110361ae9: lock cmpxchg %rbx,(%r9)
  0x0000000110361aee: je     0x0000000110361b1f
  0x0000000110361af4: sub    %rsp,%rax
  0x0000000110361af7: and    $0xfffffffffffff007,%rax
  0x0000000110361afe: mov    %rax,(%rbx)
  0x0000000110361b01: jmpq   0x0000000110361b1f
  0x0000000110361b06: movq   $0x3,(%rbx)
  0x0000000110361b0d: mov    %rax,%rbx
  0x0000000110361b10: mov    0x16(%rbx),%rax
  0x0000000110361b14: test   %rax,%rax
  0x0000000110361b17: jne    0x0000000110361b1f
  0x0000000110361b19: lock cmpxchg %r15,0x16(%rbx)
  0x0000000110361b1f: je     0x0000000110361a71
  0x0000000110361b25: mov    %r9,(%rsp)
  0x0000000110361b29: mov    %r9,%rsi
  0x0000000110361b2c: lea    0x10(%rsp),%rdx
  0x0000000110361b31: xchg   %ax,%ax
  0x0000000110361b33: callq  0x0000000110018f60  ; OopMap{[0]=Oop off=344}
                                                ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)
                                                ;   {runtime_call}
  0x0000000110361b38: mov    (%rsp),%r9
  0x0000000110361b3c: jmpq   0x0000000110361a71
  0x0000000110361b41: lea    0x10(%rsp),%rax
  0x0000000110361b46: cmpq   $0x0,(%rax)
  0x0000000110361b4d: je     0x0000000110361bc7
  0x0000000110361b53: mov    (%r9),%r10
  0x0000000110361b56: test   $0x2,%r10
  0x0000000110361b5d: je     0x0000000110361bbf
  0x0000000110361b5f: mov    0x16(%r10),%rax
  0x0000000110361b63: xor    %r15,%rax
  0x0000000110361b66: or     0x26(%r10),%rax
  0x0000000110361b6a: jne    0x0000000110361bc7
  0x0000000110361b6c: mov    0x36(%r10),%rax
  0x0000000110361b70: or     0x3e(%r10),%rax
  0x0000000110361b74: jne    0x0000000110361b80
  0x0000000110361b76: movq   $0x0,0x16(%r10)
  0x0000000110361b7e: jmp    0x0000000110361bc7
  0x0000000110361b80: cmpq   $0x0,0x46(%r10)
  0x0000000110361b88: je     0x0000000110361bb3
  0x0000000110361b8a: movq   $0x0,0x16(%r10)
  0x0000000110361b92: lock addl $0x0,(%rsp)
  0x0000000110361b97: cmpq   $0x0,0x46(%r10)
  0x0000000110361b9f: jne    0x0000000110361bb8
  0x0000000110361ba1: movabs $0x0,%rax
  0x0000000110361bab: lock cmpxchg %r15,0x16(%r10)
  0x0000000110361bb1: jne    0x0000000110361bb8
  0x0000000110361bb3: or     $0x1,%eax
  0x0000000110361bb6: jmp    0x0000000110361bc7
  0x0000000110361bb8: test   $0x0,%eax
  0x0000000110361bbd: jmp    0x0000000110361bc7
  0x0000000110361bbf: mov    (%rax),%r10
  0x0000000110361bc2: lock cmpxchg %r10,(%r9)
  0x0000000110361bc7: je     0x0000000110361aa4
  0x0000000110361bcd: mov    %r9,%rdi
  0x0000000110361bd0: lea    0x10(%rsp),%rsi    ;*monitorenter
                                                ; - java.lang.Shutdown::runHooks@13 (line 117)

  0x0000000110361bd5: movabs $0x10e087a5a,%r10
  0x0000000110361bdf: callq  *%r10              ;*monitorexit
                                                ; - java.lang.Shutdown::runHooks@25 (line 122)

  0x0000000110361be2: jmpq   0x0000000110361aa4
  0x0000000110361be7: test   $0x7,%r8
  0x0000000110361bee: jne    0x0000000110361acd
  0x0000000110361bf4: test   $0x300,%r8
  0x0000000110361bfb: jne    0x0000000110361c0a
  0x0000000110361bfd: and    $0x37f,%rax
  0x0000000110361c04: mov    %rax,%r11
  0x0000000110361c07: or     %r15,%r11
  0x0000000110361c0a: lock cmpxchg %r11,(%r9)
  0x0000000110361c0f: jne    0x0000000110361b25
  0x0000000110361c15: jmpq   0x0000000110361a71  ;*invokeinterface run
                                                ; - java.lang.Shutdown::runHooks@39 (line 123)

  0x0000000110361c1a: mov    0x8(%rax),%r10d
  0x0000000110361c1e: cmp    $0xf80005b1,%r10d  ;   {metadata('java/lang/ThreadDeath')}
  0x0000000110361c25: jne    0x0000000110361a04  ;*instanceof
                                                ; - java.lang.Shutdown::runHooks@49 (line 125)

  0x0000000110361c2b: mov    %rax,%rsi          ;*checkcast
                                                ; - java.lang.Shutdown::runHooks@56 (line 126)

  0x0000000110361c2e: add    $0x20,%rsp
  0x0000000110361c32: pop    %rbp
  0x0000000110361c33: jmpq   0x0000000110019060  ;*getstatic lock
                                                ; - java.lang.Shutdown::runHooks@8 (line 117)
                                                ;   {runtime_call}
  0x0000000110361c38: hlt
  0x0000000110361c39: hlt
  0x0000000110361c3a: hlt
  0x0000000110361c3b: hlt
  0x0000000110361c3c: hlt
  0x0000000110361c3d: hlt
  0x0000000110361c3e: hlt
  0x0000000110361c3f: hlt
[Exception Handler]
[Stub Code]
  0x0000000110361c40: jmpq   0x000000010ff80da0  ;   {no_reloc}
[Deopt Handler Code]
  0x0000000110361c45: callq  0x0000000110361c4a
  0x0000000110361c4a: subq   $0x5,(%rsp)
  0x0000000110361c4f: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x0000000110361c54: hlt
  0x0000000110361c55: hlt
  0x0000000110361c56: hlt
  0x0000000110361c57: hlt
Decoding compiled method 0x000000011036a190:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils'
  # parm0:    rsi       = int
  #           [sp+0x40]  (sp of caller)
  0x000000011036a300: mov    %eax,-0x14000(%rsp)
  0x000000011036a307: push   %rbp
  0x000000011036a308: sub    $0x30,%rsp
  0x000000011036a30c: movabs $0x127286bf0,%rax  ;   {metadata(method data for {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a316: mov    0xdc(%rax),%edx
  0x000000011036a31c: add    $0x8,%edx
  0x000000011036a31f: mov    %edx,0xdc(%rax)
  0x000000011036a325: movabs $0x127286280,%rax  ;   {metadata({method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a32f: and    $0x0,%edx
  0x000000011036a332: cmp    $0x0,%edx
  0x000000011036a335: je     0x000000011036a47a  ;*iload_0
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@0 (line 43)

  0x000000011036a33b: mov    %rsi,%rax
  0x000000011036a33e: mov    $0x4,%edi
  0x000000011036a343: cmp    $0x80000000,%eax
  0x000000011036a349: jne    0x000000011036a35a
  0x000000011036a34f: xor    %edx,%edx
  0x000000011036a351: cmp    $0xffffffffffffffff,%edi
  0x000000011036a354: je     0x000000011036a35d
  0x000000011036a35a: cltd
  0x000000011036a35b: idiv   %edi               ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@2 (line 43)
                                                ; implicit exception: dispatches to 0x000000011036a491
  0x000000011036a35d: cmp    $0x0,%edx
  0x000000011036a360: movabs $0x127286bf0,%rax  ;   {metadata(method data for {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a36a: movabs $0x108,%rdx
  0x000000011036a374: jne    0x000000011036a384
  0x000000011036a37a: movabs $0x118,%rdx
  0x000000011036a384: mov    (%rax,%rdx,1),%rdi
  0x000000011036a388: lea    0x1(%rdi),%rdi
  0x000000011036a38c: mov    %rdi,(%rax,%rdx,1)
  0x000000011036a390: jne    0x000000011036a44c  ;*ifne
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@3 (line 43)

  0x000000011036a396: mov    %rsi,%rax
  0x000000011036a399: mov    $0x64,%edi
  0x000000011036a39e: cmp    $0x80000000,%eax
  0x000000011036a3a4: jne    0x000000011036a3b5
  0x000000011036a3aa: xor    %edx,%edx
  0x000000011036a3ac: cmp    $0xffffffffffffffff,%edi
  0x000000011036a3af: je     0x000000011036a3b8
  0x000000011036a3b5: cltd
  0x000000011036a3b6: idiv   %edi               ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@9 (line 43)
                                                ; implicit exception: dispatches to 0x000000011036a496
  0x000000011036a3b8: cmp    $0x0,%edx
  0x000000011036a3bb: movabs $0x127286bf0,%rax  ;   {metadata(method data for {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a3c5: movabs $0x128,%rdx
  0x000000011036a3cf: jne    0x000000011036a3df
  0x000000011036a3d5: movabs $0x138,%rdx
  0x000000011036a3df: mov    (%rax,%rdx,1),%rdi
  0x000000011036a3e3: lea    0x1(%rdi),%rdi
  0x000000011036a3e7: mov    %rdi,(%rax,%rdx,1)
  0x000000011036a3eb: jne    0x000000011036a456  ;*ifne
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@10 (line 43)

  0x000000011036a3f1: mov    %rsi,%rax
  0x000000011036a3f4: mov    $0x190,%esi
  0x000000011036a3f9: cmp    $0x80000000,%eax
  0x000000011036a3ff: jne    0x000000011036a410
  0x000000011036a405: xor    %edx,%edx
  0x000000011036a407: cmp    $0xffffffffffffffff,%esi
  0x000000011036a40a: je     0x000000011036a413
  0x000000011036a410: cltd
  0x000000011036a411: idiv   %esi               ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@17 (line 43)
                                                ; implicit exception: dispatches to 0x000000011036a49b
  0x000000011036a413: cmp    $0x0,%edx
  0x000000011036a416: movabs $0x127286bf0,%rax  ;   {metadata(method data for {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a420: movabs $0x148,%rsi
  0x000000011036a42a: jne    0x000000011036a43a
  0x000000011036a430: movabs $0x158,%rsi
  0x000000011036a43a: mov    (%rax,%rsi,1),%rdi
  0x000000011036a43e: lea    0x1(%rdi),%rdi
  0x000000011036a442: mov    %rdi,(%rax,%rsi,1)
  0x000000011036a446: je     0x000000011036a456  ;*ifne
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@18 (line 43)

  0x000000011036a44c: mov    $0x0,%eax
  0x000000011036a451: jmpq   0x000000011036a46b  ;*ireturn
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@26 (line 43)

  0x000000011036a456: movabs $0x127286bf0,%rax  ;   {metadata(method data for {method} {0x0000000127286280} 'isGregorianLeapYear' '(I)Z' in 'sun/util/calendar/CalendarUtils')}
  0x000000011036a460: incl   0x168(%rax)
  0x000000011036a466: mov    $0x1,%eax          ;*goto
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@22 (line 43)

  0x000000011036a46b: and    $0x1,%eax
  0x000000011036a46e: add    $0x30,%rsp
  0x000000011036a472: pop    %rbp
  0x000000011036a473: test   %eax,-0x3751379(%rip)        # 0x000000010cc19100
                                                ;   {poll_return}
  0x000000011036a479: retq
  0x000000011036a47a: mov    %rax,0x8(%rsp)
  0x000000011036a47f: movq   $0xffffffffffffffff,(%rsp)
  0x000000011036a487: callq  0x00000001100129e0  ; OopMap{off=396}
                                                ;*synchronization entry
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@-1 (line 43)
                                                ;   {runtime_call}
  0x000000011036a48c: jmpq   0x000000011036a33b
  0x000000011036a491: callq  0x000000011000de40  ; OopMap{off=406}
                                                ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@2 (line 43)
                                                ;   {runtime_call}
  0x000000011036a496: callq  0x000000011000de40  ; OopMap{off=411}
                                                ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@9 (line 43)
                                                ;   {runtime_call}
  0x000000011036a49b: callq  0x000000011000de40  ; OopMap{off=416}
                                                ;*irem
                                                ; - sun.util.calendar.CalendarUtils::isGregorianLeapYear@17 (line 43)
                                                ;   {runtime_call}
  0x000000011036a4a0: nop
  0x000000011036a4a1: nop
  0x000000011036a4a2: mov    0x2a8(%r15),%rax
  0x000000011036a4a9: movabs $0x0,%r10
  0x000000011036a4b3: mov    %r10,0x2a8(%r15)
  0x000000011036a4ba: movabs $0x0,%r10
  0x000000011036a4c4: mov    %r10,0x2b0(%r15)
  0x000000011036a4cb: add    $0x30,%rsp
  0x000000011036a4cf: pop    %rbp
  0x000000011036a4d0: jmpq   0x000000010ff808e0  ;   {runtime_call}
  0x000000011036a4d5: hlt
  0x000000011036a4d6: hlt
  0x000000011036a4d7: hlt
  0x000000011036a4d8: hlt
  0x000000011036a4d9: hlt
  0x000000011036a4da: hlt
  0x000000011036a4db: hlt
  0x000000011036a4dc: hlt
  0x000000011036a4dd: hlt
  0x000000011036a4de: hlt
  0x000000011036a4df: hlt
[Exception Handler]
[Stub Code]
  0x000000011036a4e0: callq  0x00000001100100e0  ;   {no_reloc}
  0x000000011036a4e5: mov    %rsp,-0x28(%rsp)
  0x000000011036a4ea: sub    $0x80,%rsp
  0x000000011036a4f1: mov    %rax,0x78(%rsp)
  0x000000011036a4f6: mov    %rcx,0x70(%rsp)
  0x000000011036a4fb: mov    %rdx,0x68(%rsp)
  0x000000011036a500: mov    %rbx,0x60(%rsp)
  0x000000011036a505: mov    %rbp,0x50(%rsp)
  0x000000011036a50a: mov    %rsi,0x48(%rsp)
  0x000000011036a50f: mov    %rdi,0x40(%rsp)
  0x000000011036a514: mov    %r8,0x38(%rsp)
  0x000000011036a519: mov    %r9,0x30(%rsp)
  0x000000011036a51e: mov    %r10,0x28(%rsp)
  0x000000011036a523: mov    %r11,0x20(%rsp)
  0x000000011036a528: mov    %r12,0x18(%rsp)
  0x000000011036a52d: mov    %r13,0x10(%rsp)
  0x000000011036a532: mov    %r14,0x8(%rsp)
  0x000000011036a537: mov    %r15,(%rsp)
  0x000000011036a53b: movabs $0x10e17c39c,%rdi  ;   {external_word}
  0x000000011036a545: movabs $0x11036a4e5,%rsi  ;   {internal_word}
  0x000000011036a54f: mov    %rsp,%rdx
  0x000000011036a552: and    $0xfffffffffffffff0,%rsp
  0x000000011036a556: callq  0x000000010dfa3f7a  ;   {runtime_call}
  0x000000011036a55b: hlt
[Deopt Handler Code]
  0x000000011036a55c: movabs $0x11036a55c,%r10  ;   {section_word}
  0x000000011036a566: push   %r10
  0x000000011036a568: jmpq   0x000000010ff59500  ;   {runtime_call}
  0x000000011036a56d: hlt
  0x000000011036a56e: hlt
  0x000000011036a56f: hlt

Process finished with exit code 0
